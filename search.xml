<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>element-ui+mybatis-plus+springboot解决IPage分页问题</title>
      <link href="/2020/11/06/element-ui-mybatis-plus-springboot%E8%A7%A3%E5%86%B3IPage%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/06/element-ui-mybatis-plus-springboot%E8%A7%A3%E5%86%B3IPage%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文应用于ssm框架，解决controller接口返回mybatis-plus封装的IPage类型与Vue.element-ui前端的接收与分页</p><h2 id="mybatis-plus中的IPage与Page类"><a href="#mybatis-plus中的IPage与Page类" class="headerlink" title="mybatis-plus中的IPage与Page类"></a>mybatis-plus中的IPage与Page类</h2><p>首先上源码(部分)<br>接口Ipage类型：<br><img src="/img/vue/IPage.PNG" alt="Ipage部分源码"><br>IPage的实现类Page:<br><img src="/img/vue/Page.PNG" alt="Page部分源码"></p><p>源码可见Page是IPage的实现类，可见想使用mybatis-plus的封装分页则要明白Page类的属性<br>Page类的属性介绍：<br>records 用来存放查询出来的数据<br>total 返回记录的总数<br>size 每页显示条数，默认 10<br>current 当前页,默认1<br>orders 排序字段信息<br>optimizeCountSql 自动优化 COUNT SQL,默认true<br>isSearchCount 是否进行 count 查询,默认true<br>hitCount 是否命中count缓存,默认false</p><h2 id="实战实现"><a href="#实战实现" class="headerlink" title="实战实现"></a>实战实现</h2><h3 id="后端接口："><a href="#后端接口：" class="headerlink" title="后端接口："></a>后端接口：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getOtherWorkList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;Work&gt; <span class="title">getOtherWorkByParam</span><span class="params">(@RequestParam <span class="keyword">long</span> size, @RequestParam <span class="keyword">long</span> current, HttpServletRequest request, WorkParam workParam)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TokenUtil tokenUtil = <span class="keyword">new</span> TokenUtil();</span><br><span class="line">        String userId = tokenUtil.getRequestToken(request, redisService);</span><br><span class="line">        Page&lt;Work&gt; page = <span class="keyword">new</span> Page&lt;&gt;();</span><br><span class="line">        page.setCurrent(current);</span><br><span class="line">        page.setSize(size);</span><br><span class="line">        Page&lt;Work&gt; workPage = workService.page(page,Wrappers.&lt;Work&gt;lambdaQuery()</span><br><span class="line">                .eq(!workParam.getTitle().isEmpty() &amp;&amp; !workParam.getTitle().equals(<span class="string">""</span>), Work::getTitle, workParam.getTitle())</span><br><span class="line">                .eq(workParam.getStatus()!=<span class="keyword">null</span>, Work::getStatus, workParam.getStatus())</span><br><span class="line">                .eq(workParam.getType() != <span class="keyword">null</span>, Work::getType, workParam.getType())</span><br><span class="line">                .ne(userId!=<span class="keyword">null</span>, Work::getUserId, userId)</span><br><span class="line">                .between(workParam.getStartDate() != <span class="keyword">null</span> &amp;&amp; workParam.getStartDate().before(workParam.getEndDate()), Work::getCreateDate, workParam.getStartDate(), workParam.getEndDate()));</span><br><span class="line">        <span class="keyword">return</span> workPage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>形参中size和current分别代表每页容量、当前页与Page类中属性名对应，形参能使用参数Page<Work> page更好，request用户获取请求头token验证登录用户，workParm为查询条件为前端table传来的检索条件</p><p>方便理解可以简化成以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getOtherWorkList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;Work&gt; <span class="title">getOtherWorkByParam</span><span class="params">(Page&lt;Work&gt; page)</span></span>&#123;</span><br><span class="line">        Page&lt;Work&gt; workPage = workService.page(page);</span><br><span class="line">        <span class="keyword">return</span> workPage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="element-ui前端请求发送与接收数据分页"><a href="#element-ui前端请求发送与接收数据分页" class="headerlink" title="element-ui前端请求发送与接收数据分页"></a>element-ui前端请求发送与接收数据分页</h3><p>分页组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">     &lt;el-pagination</span><br><span class="line">        @size-change&#x3D;&quot;handleSizeChange&quot;</span><br><span class="line">        @current-change&#x3D;&quot;handleCurrentChange&quot;</span><br><span class="line">        :current-page&#x3D;&quot;page.current&quot;</span><br><span class="line">        :page-sizes&#x3D;&quot;[1, 5, 10, 20]&quot;</span><br><span class="line">        :page-size&#x3D;&quot;page.size&quot;</span><br><span class="line">        layout&#x3D;&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">        :total&#x3D;&quot;pageTotal&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-pagination&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></p><p>table组件与处理数据分页:<br>注意：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:data&#x3D;&quot;records.slice((page.current-1)*page.size,page.current*page.size)&quot;</span><br></pre></td></tr></table></figure><br>请务必加上，page.current和page.size取决于你自己vue定义的数据属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table</span><br><span class="line">               :data&#x3D;&quot;records.slice((page.current-1)*page.size,page.current*page.size)&quot;</span><br><span class="line">               border</span><br><span class="line">               class&#x3D;&quot;table&quot;</span><br><span class="line">               ref&#x3D;&quot;multipleTable&quot;</span><br><span class="line">               header-cell-class-name&#x3D;&quot;table-header&quot;</span><br><span class="line">               @selection-change&#x3D;&quot;handleSelectionChange&quot;</span><br><span class="line">           &gt;</span><br></pre></td></tr></table></figure><p>Vue定义绑定数据:<br>注意：Page数据在records中，注意看Page源码属性类型介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            tableData: [],</span><br><span class="line">            records: [],</span><br><span class="line">            multipleSelection: [],</span><br><span class="line">            page: &#123;</span><br><span class="line">                size: 1,</span><br><span class="line">                current: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            workParam: &#123;&#125;,</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure></p><p>Vue请求发送与接收数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">       this.getData();</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">       &#x2F;&#x2F; 获取 easy-mock 的模拟数据</span><br><span class="line">       async getData() &#123;</span><br><span class="line">           this.$http</span><br><span class="line">           .get(&#96;&#x2F;api&#x2F;work&#x2F;getOtherWorkList&#96;, &#123;</span><br><span class="line">           params: &#123;</span><br><span class="line">               size: this.page.size,</span><br><span class="line">               current: this.page.current</span><br><span class="line">           &#125;,</span><br><span class="line">           headers: &#123;</span><br><span class="line">           token: this.token,</span><br><span class="line">           &#125;,</span><br><span class="line">           &#125;)</span><br><span class="line">           .then((response) &#x3D;&gt; &#123;</span><br><span class="line">               this.records &#x3D; response.data.records;</span><br><span class="line">               console.log(this.records);</span><br><span class="line">               this.pageTotal &#x3D; response.data.total;</span><br><span class="line">               console.log(this.pageTotal);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure></p><p>选择页面size事件方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handleSizeChange(newSize)&#123;</span><br><span class="line">    console.log(newSize)</span><br><span class="line">    this.page.size &#x3D; newSize;</span><br><span class="line">    console.log(&#96;目前页面容量&#96;+this.query.pageSize)</span><br><span class="line">    this.getData()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>选择页码事件方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handleCurrentChange(newPage)&#123;</span><br><span class="line">    console.log(newPage)</span><br><span class="line">    this.page.current &#x3D; newPage;</span><br><span class="line">    this.getData()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="实现效果展示"><a href="#实现效果展示" class="headerlink" title="实现效果展示"></a>实现效果展示</h3><p><img src="/img/vue/分页1.PNG" alt="分页1"><br><img src="/img/vue/分页2.PNG" alt="分页2"><br><img src="/img/vue/分页3.PNG" alt="分页3"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis-plus </tag>
            
            <tag> element-ui </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis缓存雪崩、缓存穿透、缓存击穿与布隆过滤器</title>
      <link href="/2020/11/02/redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/02/redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redis作为基于内存的非关系型数据库，通过读取缓存有效降低了大数据量访问系统(如购物商城网站)导致的数据库大量的磁盘读写操作，减少了数据库瘫痪、服务器宕机的风险。但是引入redis后也可能会产生新的问题导致redis缓存失效，大量数据访问依旧直接落在数据库上导致数据库瘫痪。本文主要介绍redis缓存雪崩、缓存穿透、缓存击穿与他们的解决方案。</p><h2 id="redis常见问题"><a href="#redis常见问题" class="headerlink" title="redis常见问题"></a>redis常见问题</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>我们知道redis存储的数据大部分会设置过期时间这就导致有可能大量数据过期时间相近使得某时段大量缓存失效，又或者redis集群(即多台执行相同redis缓存服务的服务器群)宕机、重启导致服务器服务失效无缓存可用。想象一下，redis集群是高山积雪底层的雪堆，发生上述两大类问题后就如同积雪的底层不再起支持作用，大量的数据访问如雪崩一样冲向山下的数据库，这无疑让数据库离瘫痪、服务器宕机不远了。下图为避免雪崩的数据访问流程图。<br><img src="/img/Redis/雪崩.png" alt="避免缓存雪崩的系统设计访问流程图"> </p><p>解决方案：</p><ol><li><p>设计上使用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。<br>注意：加锁排队只是为了减轻数据库的压力，并没有提高系统吞吐量。假设在高并发下，缓存重建期间key是锁着的，这是过来1000个请求999个都在阻塞的。同样会导致用户等待超时</p></li><li><p>缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li></ol><p>雪崩处理：</p><p>发生前：尽量保证整个 redis 集群的⾼可⽤性，发现机器宕机尽快补上。选择合适的内存淘汰策<br>略。降低失效时间重复率。</p><p>发生中：错峰限流降低对数据库的访问量，避免数据库瘫痪。</p><p>发生后：使用redis持久化策略RDB(快照)、AOF(文件追加)的文件尽快进行缓存恢复。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透说简单点就是⼤量请求的key根本不存在于缓存中,导致请求直接到了数据库上，根本没有经过缓存这⼀层。举个例⼦：某个⿊客故意制造我们缓存中不存在的key发起⼤量请求，导致⼤量请求落到数据库。下图分别为正常读取缓存流程、缓存中不存在该key直接访问数据库、设置布隆过滤器过滤非法key的流程。<br><img src="/img/Redis/穿透1.png" alt="正常读取缓存流程"><br><img src="/img/Redis/穿透2.png" alt="缓存中不存在该key直接访问数据库"><br><img src="/img/Redis/穿透3.png" alt="设置布隆过滤器过滤非法key"><br>解决方案：</p><ol><li><p>上线前做好基本的参数校验，⼀些不合法的参数请求直接抛出异常信息返回给客户端。⽐如查询的数据库id不能⼩于0、传⼊的邮箱格式不对的时候直接返回错误消息给客户端等等。</p></li><li><p>请求redis读取缓存前添加布隆过滤器过滤非法的key,布隆过滤器可用判断该数据在数据库中是否存在从而避免非法和不存在的key去访问我们的数据库。下文详细介绍布隆过滤器。</p></li><li><p>设置缓存⽆效 key : 如果缓存和数据库都查不到某个 key 的数据就写⼀个key到 redis 中去并设置过期时间。这种⽅式可以解决请求的 key 变化不频繁的情况，如果⿊客恶意攻击，每次构建不同的请求key，会导致redis中缓存⼤量⽆效的key。很明显，这种⽅案并不能从根本上解决此问题。如果⾮要⽤这种⽅式来解决穿透问题的话，尽量将⽆效的 key的过期时间设置短⼀点⽐如 1 分钟。</p></li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存雪崩和缓存穿透都理解的话，缓存击穿可以说是非常简单了。缓存击穿聚焦于热点的key数据，大并发集中对这些点进行访问，当这些热点数据发生过期失效可想而知持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。举个例子：电商网站上某个商品是爆款，一群用户访问这个商品信息结果这个商品信息的key在缓存中失效了，然后数据库就崩了，大家就都买不成了跑别的解决击穿问题的商城网站去买了。击穿的流程图可看上文缓存穿透流程图中缓存中不存在该key直接访问数据库的流程图。</p><p>解决方案：</p><ol><li><p>业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。<br>SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。</p></li><li><p>将热点数据的key直接设置过期时间特别长或永不过期自然解决，但注意这中不过期的key数据维护。</p></li></ol><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>布隆过滤器（Bloom Filter）是一个数据结构，由布隆（Burton Howard Bloom）于1970年提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。<br>通俗的讲，布隆过滤器原理是将数据经过多次散列函数(几次取决于你的系统设置中对误差率的要求)将对应的二进制向量下标位置进行变1标注，当数据进入布隆过滤器根据散列函数散列后的下标便可以确认该数据是否存在。可以参考java中hashset判重与hascode()原理。<br>布隆过滤器误差：布隆过滤器不能完美的判断数据是否存在，举个例子说明：假设有个数组长度为8，值默认都是0，布隆过滤器放入2个数后，下标分别为0135、1246的值全变为了1，放入第3个数时，发现这个数经过多次散列函数后该标记的下标分别为0346，由于这些下标全部被标记为1布隆过滤器就会误以为该数已经存在不再更新下标值。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础认识</title>
      <link href="/2020/09/08/redis%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/"/>
      <url>/2020/09/08/redis%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis属于NOSQL((NoSQL = Not Only SQL )，意即“不仅仅是SQL”。NoSQL 数据库种类繁多(Redis、Mongodb、HBase、Elasticsearch 等等)),NOSQL的特点是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。NoSQL数据库都具有非常高的读写性能，尤其在大量下数据，更能体现它的优势。这得益于它的无关系性，数据库的结构简单。</p><p>Redis本质上是一个Key-Value类型的内存数据库，很像memcached，整个数据库在内存当中进行操作，定期通过异步操作把数据库数据写到硬盘上进行保存。因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key- Value DB。 Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能。默认16个数据库，类似数组下标是从零开始，初始默认使用零号库，统一的密码管理，16个库都是同样密码，要么都连上要么一个也连接不上，redis默认端口是6379。</p><p>在 Redis 中，事务总是具有原子性 （Atomicity)、一致性(Consistency)和隔离性（Isolation），并且当 Redis 运行在某种特定的持久化模式下时(快照、文件追加)，事务也具有持久性（Durability）。 </p><p>快照（snapshotting）持久化（RDB） Redis可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis创建快照之后，可以对快照进行 备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis主从结构，主要用来提高Redis性 能），还可以将快照留在原地以便重启服务器的时候使用。<br>快照实例配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save 900 1              #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令 创建快照。</span><br></pre></td></tr></table></figure></p><p>AOF（append-only ﬁle）持久化 与快照持久化相比，AOF持久化 的实时性更好，因此已成为主流的持久化方案。默认情况下Redis没有开启 AOF（append only ﬁle）方式的持久化，可以通过appendonly参数开启：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><br>开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件。AOF文件的 保存位置和RDB文件的位置相同，都是通过dir参数设置的，默认的文件名是appendonly.aof。<br>在Redis的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always     <span class="comment">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度 </span></span><br><span class="line">appendfsync everysec  <span class="comment">#每秒钟同步一次，显示地将多个写命令同步到硬盘 </span></span><br><span class="line">appendfsync no      <span class="comment">#让操作系统决定何时进行同步</span></span><br></pre></td></tr></table></figure><br>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec选项 ，让Redis每秒同步一次AOF文件，Redis性能 几乎没受到任何影响。而且这样即使出现系统崩溃，用户多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操 作的时候，Redis还会优雅的放慢自己的速度以便适应硬盘的大写入速度</p><p>redis的优点：<br>速度快：因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1) 持久化：定期通过异步操作把数据库数据写到硬盘上进行保存<br>支持丰富数据类型：支持string，list，set，sorted   set，hash<br>支持事务：操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p><p>redis支持类型详细：</p><ol><li><p>String<br>常用命令: set,get,decr,incr,mget 等。 String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。 常规key-value缓存应用； 常规计数：微博数，粉丝数等。 </p></li><li><p>Hash<br>常用命令： hget,hset,hgetall 等。<br>Hash 是一个 string 类型的 ﬁeld 和 value 的映射表，hash 特别适合用于存储对象，后续操作的时候，你可以直接仅 仅修改这个对象中的某个字段的值。 比如我们可以Hash数据结构来存储用户信息，商品信息等等。比如下面我就用 hash 类型存放了我本人的一些信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key=JavaUser293847</span><br><span class="line">value=&#123;  </span><br><span class="line">“id”: 1,</span><br><span class="line">“name”: “SnailClimb”,  </span><br><span class="line">“age”: 22,  </span><br><span class="line">“location”: “Wuhan, Hubei”</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>List<br>常用命令: lpush,rpush,lpop,rpop,lrange等<br>list 就是链表，Redis list 的应用场景非常多，也是Redis重要的数据结构之一，比如微博的关注列表，粉丝列表， 消息列表等功能都可以用Redis的 list 结构来实现。 Redis list 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。<br>另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 list 实现分页查询，这个很棒的一个功能，基于 redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西（一页一页的往下走），性能高。 </p></li><li><p>Set<br>常用命令： sadd,spop,smembers,sunion 等 set 对外提供的功能与list类似是一个列表的功能，特殊之处在于 set 是可以自动排重的。<br>当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在 一个set集合内的重要接口，这个也是list所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。 比如：在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis可以非常 方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。</p></li><li><p>Sorted Set<br>常用命令： zadd,zrange,zrem,zcard等 和set相比，sorted set增加了一个权重参数score，使得集合中的元素能够按score进行有序排列。<br>举例： 在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维 度的消息排行榜）等信息，适合使用 Redis 中的 SortedSet 结构进行存储。</p></li></ol><h2 id="缓存雪崩和缓存穿透问题解决方案"><a href="#缓存雪崩和缓存穿透问题解决方案" class="headerlink" title="缓存雪崩和缓存穿透问题解决方案"></a>缓存雪崩和缓存穿透问题解决方案</h2><p>缓存雪崩<br>简介：缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩 掉。<br>解决办法（中华石杉老师在他的视频中提到过，视频地址在后一个问题中有提到）：<br>事前：尽量保证整个 redis 集群的高可用性，发现机器宕机尽快补上。选择合适的内存淘汰策略。 事中：本地ehcache缓存 + hystrix限流&amp;降级，避免MySQL崩掉 事后：利用 redis 持久化机制保存的数据尽快恢复缓存</p><p>缓存穿透<br>简介：一般是黑客故意去请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量 请求而崩掉。<br>解决办法： 有很多种方法可以有效地解决缓存穿透问题，常见的则是采用布隆过滤器，将所有可能存在的数据哈 希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压 力。另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，长不超过五分钟。</p><h2 id="Redis序列化"><a href="#Redis序列化" class="headerlink" title="Redis序列化"></a>Redis序列化</h2><p>针对数据的“序列化/反序列化”，springboot提供了多种可选择策略(RedisSerializer) :<br>JdkSerializationRedisSerializer：这个序列化方法就是Jdk提供的了。首先要求我们要被序列化的类继承自Serializeable<br>接口，然后通过，然后通过Jdk对象序列化的方法保存。（注：这个序列化保存的对象，即使是个String类型的，在redis<br>控制台，也是看不出来的，因为它保存了一些对象的类型什么的额外信息）。是目前最常用的序列化策略。</p><p>StringRedisSerializer：就是通过String.getBytes()来实现的。而且在Redis中，所有存储的值都是字符串类型的。所以这种方法保存后，通过Redis-cli控制台，是可以清楚的查看到我们保存了什么key,value是什么。是最轻量级和高效的策<br>略。</p><p>JacksonJsonRedisSerializer：jackson-json工具提供了javabean与json之间的转换能力，可以将pojo实例序列化成json 格式存储在redis中，也可以将json格式的数据转换成pojo实例。因为jackson工具在序列化和反序列化时，需要明确指定Class类型，因此策略封装起来稍微复杂。</p><p>spring boot导入redis依赖后，spring boot启动后会像spring 注入两个bean:RedisTemplate、StringRedisTemplate,</p><ol><li>两者的关系是StringRedisTemplate继承RedisTemplate。</li><li>RedisTemplate是一个泛型类，而StringRedisTemplate则不是。</li><li>StringRedisTemplate只能对key=String，value=String的键值对进行操作，RedisTemplate可以对任何类型的key-value键值对 操作。</li><li>他们各自序列化的方式不同，但最终都是得到了一个字节数组，殊途同归，StringRedisTemplate使用的是StringRedisSerializer类；RedisTemplate使用的是JdkSerializationRedisSerializer类。反序列化，则是一个得到String，一个得到Object。</li></ol><p>RedisTemplate在操作数据的时候，存入数据会将数据先序列化成字节数组然后在存入Redis数据库(默认JdkSerializationRedisSerializer:这个序列化方法就是Jdk提供的了,首先要求我们要被序列化的类继承自Serializeable接口，然后通过Jdk对象序列化的方法保存)，这个时候打开Redis查看的时候，你会看到你的数据不是以可读的形式，展现的，而是以字节数组显示，<br><img src="/img/Redis/Redis.png" alt="序列化不可读"><br>（注：这个序列化保存的对象，即使是个String类型的，在redis控制台，也是看不出来的，因为它保存了一些对象的类型什么的额外信息）</p><h2 id="Redis最近应用"><a href="#Redis最近应用" class="headerlink" title="Redis最近应用"></a>Redis最近应用</h2><p>个人开发小型JavaWeb程序利用redis存储token,记录获取验证的电话号码今日申请了几次，通过JWT将对象信息转化为String。<br>改造StringRedisTemplate、自定义RedisTemplate的实现类，使得Object对象转化为json使key-vlue再次转化为String-String进行序列化存储。<br>StringRedisSerializer源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.data.redis.serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets; <span class="keyword">import</span> org.springframework.lang.Nullable; <span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRedisSerializer</span> <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">String</span>&gt; </span>&#123; <span class="keyword">private</span> <span class="keyword">final</span> Charset charset;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> StringRedisSerializer US_ASCII; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> StringRedisSerializer ISO_8859_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> StringRedisSerializer UTF_8;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringRedisSerializer</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>(StandardCharsets.UTF_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringRedisSerializer</span><span class="params">(Charset charset)</span> </span>&#123; Assert.notNull(charset, <span class="string">"Charset must not be null!"</span>); <span class="keyword">this</span>.charset = charset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(@Nullable <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bytes == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> String(bytes, <span class="keyword">this</span>.charset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(<span class="meta">@Nullable</span> String string) &#123;</span><br><span class="line"><span class="keyword">return</span> string == <span class="keyword">null</span> ? <span class="keyword">null</span> : string.getBytes(<span class="keyword">this</span>.charset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">US_ASCII = <span class="keyword">new</span> StringRedisSerializer(StandardCharsets.US_ASCII); ISO_8859_1 = <span class="keyword">new</span> StringRedisSerializer(StandardCharsets.ISO_8859_1); UTF_8 = <span class="keyword">new</span> StringRedisSerializer(StandardCharsets.UTF_8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>自定义序列化方式使得可以接收Object对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer; <span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@ClassName</span>: MyStringRedisSerializer</span></span><br><span class="line"><span class="comment">*<span class="doctag">TODO:</span>类文件简单描述</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Version</span>: 0.0.1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringRedisSerializer</span> <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">Object</span>&gt; </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Charset charset;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyStringRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>(StandardCharsets.UTF_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyStringRedisSerializer</span><span class="params">(Charset charset)</span> </span>&#123; </span><br><span class="line">Assert.notNull(charset, <span class="string">"Charset must not be null!"</span>);</span><br><span class="line"> <span class="keyword">this</span>.charset = charset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (bytes == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> String(bytes, charset));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改部分</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) &#123; </span><br><span class="line"><span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(object <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line"><span class="keyword">return</span> object.toString().getBytes(charset);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">String string = JSON.toJSONString(object);</span><br><span class="line"><span class="keyword">return</span> string.getBytes(charset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro基础认识</title>
      <link href="/2020/09/05/shiro%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/"/>
      <url>/2020/09/05/shiro%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="shiro-简介"><a href="#shiro-简介" class="headerlink" title="shiro 简介"></a>shiro 简介</h2><p>shiro是apache的一个开源框架，而且呢是一个权限管理的框架，用于实现用户认证、用户授权。spring 中也有一个权限框架 spring security (原名Acegi)，它和 spring 依赖过于紧密，没有 shiro 使用简单。shiro 不依赖于 spring，shiro 不仅可以实现 web应用的权限管理，还可以实现c/s系统，分布式系统权限管理，shiro属于轻量框架，越来越多企业项目开始使用shiro。使用shiro实现系统的权限 管理，有效提高开发效率，从而降低开发成本。</p><h2 id="shiro-基本功能点"><a href="#shiro-基本功能点" class="headerlink" title="shiro 基本功能点"></a>shiro 基本功能点</h2><p><img src="/img/shiro/shiro1.png" alt="shiro结构图"><br>subject：主体，可以是用户也可以是程序，主体要访问系统，系统需要对主体进行认证、授权。security Manager：安全管理器，主体进行认证和授权都是通过securityManager进行。authenticator：认证器，主体进行认证最终通过authenticator进行的。               authorizer：授权器，主体进行授权最终通过authorizer进行的。<br>sessionManager：web应用中一般是用web容器对session进行管理，shiro也提供一套session管理的方式。SessionDao： 通过SessionDao管理session数据，针对个性化的session数据存储需要使用sessionDao。<br>cache Manager：缓存管理器，主要对session和授权数据进行缓存，比如将授权数据通过cacheManager进行缓存管理，和ehcache整合对缓存数据进行管理。      Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储。                                realm：域，领域，相当于数据源，通过realm存取认证、授权相关数据。</p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p><img src="/img/shiro/shiro2.png" alt="shiro认证流程图"></p><ol><li>构建SecurityManager环境</li><li>主体提交认证</li><li>SecurityManager 处理</li><li>流转到 Authenticator 执行认证通过 Realm 获取相关的用户信息（获取验证数据进行验证）</li></ol><h2 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h2><p><img src="/img/shiro/shiro2.png" alt="shiro授权流程图"></p><ol><li>创建构建SecurityManager环境</li><li>主体提交授权认证</li><li>SecurityManager 处理</li><li>流转到 Authorizor 授权器执行授权认证</li><li>通过 Realm 从数据库或配置文件获取角色权限数据返回给授权器，进行授权。</li></ol><h2 id="shiro使用流程"><a href="#shiro使用流程" class="headerlink" title="shiro使用流程"></a>shiro使用流程</h2><p>注：适用于基于redis缓存的token验证，redis存储用户角色与权限，获取用户信息（包含角色、权限、登录过期时间、主键id等等）</p><h3 id="自定义配置安全域"><a href="#自定义配置安全域" class="headerlink" title="自定义配置安全域"></a>自定义配置安全域</h3><ol><li>extends AuthorizingRealm </li><li>验证用户名/密码/验证 token 是否有效 </li><li>从数据库获取用户的角色</li><li>根据角色获取用户权限</li></ol><h3 id="shiro核心配置——config"><a href="#shiro核心配置——config" class="headerlink" title="shiro核心配置——config"></a>shiro核心配置——config</h3><ol><li>读reids缓存</li><li>自定义域</li><li>构建 SecurityManager环境</li><li>配置shiro过滤器，配置拦截哪些请求</li><li>开启shiro aop注解支持<br>实例代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*自定义密码 校验</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>com.yingxue.lesson.shiro.CustomHashedCredentialsMatcher</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomHashedCredentialsMatcher <span class="title">customHashedCredentialsMatcher</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> CustomHashedCredentialsMatcher();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*自定义域</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>com.yingxue.lesson.shiro.CustomRealm</span></span><br><span class="line"><span class="comment">*<span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">CustomRealm customRealm=<span class="keyword">new</span> CustomRealm(); </span><br><span class="line">customRealm.setCredentialsMatcher(customHashedCredentialsMatcher()); </span><br><span class="line"><span class="keyword">return</span> customRealm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*安全管理</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>org.apache.shiro.mgt.SecurityManager</span></span><br><span class="line"><span class="comment">*<span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//构建 SecurityManager环境</span></span><br><span class="line">DefaultWebSecurityManager securityManager=<span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line"><span class="comment">//自定义 Realm</span></span><br><span class="line">securityManager.setRealm(customRealm()); </span><br><span class="line"><span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*shiro过滤器，配置拦截哪些请求</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">*<span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span></span>&#123; </span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean(); shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"><span class="comment">//自定义拦截器限制并发人数,参考博客</span></span><br><span class="line">LinkedHashMap&lt;String, Filter&gt; filtersMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//用来校验token</span></span><br><span class="line">filtersMap.put(<span class="string">"token"</span>, <span class="keyword">new</span> CustomAccessControlFilter()); shiroFilterFactoryBean.setFilters(filtersMap);</span><br><span class="line">Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(); filterChainDefinitionMap.put(<span class="string">"/api/user/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line"><span class="comment">//放开swagger-ui地址</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/swagger/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/v2/api-docs"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/swagger-ui.html"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/swagger-resources/**"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/webjars/**"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/favicon.ico"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/captcha.jpg"</span>, <span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/csrf"</span>,<span class="string">"anon"</span>); </span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/**"</span>,<span class="string">"token,authc"</span>); </span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap); </span><br><span class="line"><span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*开启shiro aop注解支持.</span></span><br><span class="line"><span class="comment">*使用代理方式;所以需要开启代码支持;</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor</span></span><br><span class="line"><span class="comment">*<span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line"><span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123; </span><br><span class="line">DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = newDefaultAdvisorAutoProxyCreator(); </span><br><span class="line">defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>); </span><br><span class="line"><span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="shiro注解控制请求调用与前端权限控制可见性"><a href="#shiro注解控制请求调用与前端权限控制可见性" class="headerlink" title="shiro注解控制请求调用与前端权限控制可见性"></a>shiro注解控制请求调用与前端权限控制可见性</h3><p>后端controller层shiro注解使用：<br>实例代码：<br>拥有sys:user:list权限的角色才能调用这个请求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"分页查询用户接口"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"sys:user:list"</span>)</span><br><span class="line"><span class="keyword">public</span> DataResult&lt;PageVO&lt;SysUser&gt;&gt; pageInfo(<span class="meta">@RequestBody</span> UserPageReqVO vo)&#123;</span><br><span class="line">    DataResult result=DataResult.success();</span><br><span class="line">    result.setData(userService.pageInfo(vo));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>前端控制不同角色按钮元素可见性：<br>拥有sys:log:delete权限的角色才能看到使用这个按钮<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/html"</span> id=<span class="string">"toolbar"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn-group"</span>&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn"</span> lay-event=<span class="string">"batchDelLog"</span> shiro:hasPermission=<span class="string">"sys:log:delete"</span>&gt;</span><br><span class="line">            &lt;i class="layui-icon"&gt;&amp;#xe608;&lt;/i&gt; 批量删除</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java后端使用mysqldump备份数据库</title>
      <link href="/2020/08/24/java%E5%90%8E%E7%AB%AF%E4%BD%BF%E7%94%A8mysqldump%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/08/24/java%E5%90%8E%E7%AB%AF%E4%BD%BF%E7%94%A8mysqldump%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在接老师开发商业性质的项目的时候，接受了一个前端操作向后端发送请求进行数据库备份文件生成于下载的任务，花费了自己蛮多心血特此记录一下。</p><h2 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h2><p>在指定页面以form表单（采用layui框架）显示出相关企业单位的备份信息(备份时间、备份文件名，文件名显示备份完成时间、备份相关内容、备份次数)，同时提供操作栏进行备份下载于删除操作<br><img src="/img/sql/backup.PNG" alt=""></p><h2 id="核心完成方法"><a href="#核心完成方法" class="headerlink" title="核心完成方法"></a>核心完成方法</h2><p>java拼接mysqldump运行指令，并执行，由于数据库冗余较少涉及多次命令拼接与执行耗费较多时间（mysqldump指令在我的查找各种博客和官方文档暂未看到像sql查询语句的in、not in、or关键词字段进行条件判断只得在—where上下功夫）<br>注意：mysqldump数据库备份可导致锁表，对一个正在运行的数据库进行备份请慎重！！ 如果一定要 在服务运行期间备份，请添加 —skip-opt<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --skip-opt -h hostip -u root --password=password DatabaseName &gt;xxxx.sql</span><br></pre></td></tr></table></figure></p><p>废话少说下面是示例代码：<br>path： 备份文件的生成路径地址<br>dateString:转换为yyyyMMddHHmm格式的date字符串<br>ent_id： 主键id(String)<br>userTableName: 所有需要备份的表名字符串(“,”分隔的字符串)<br>user： 备份相关数据库的用户名<br>password： 备份相关数据库的密码<br>hostIP： 数据库IP地址<br>exportDatabaseName： 备份的数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public void exportSql(String path, String dateString, String ent_id,String userTableName,String user, String password, String hostIP, String exportDatabaseName) &#123;</span><br><span class="line">       String folderName_1 = <span class="string">"ZYK_"</span> + ent_id + <span class="string">"_BackupENT_"</span> + dateString + <span class="string">".sql"</span>;</span><br><span class="line">       File saveFile = new File(path);</span><br><span class="line">       // 如果目录不存在</span><br><span class="line">       <span class="keyword">if</span> (!saveFile.exists()) &#123;</span><br><span class="line">           // 创建文件夹</span><br><span class="line">           saveFile.mkdirs();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(!path.endsWith(File.separator))&#123;</span><br><span class="line">           path = path + File.separator;</span><br><span class="line">       &#125;</span><br><span class="line">       //备份有ent_id字段列的表</span><br><span class="line">       PrintWriter printWriter = null;</span><br><span class="line">       BufferedReader bufferedReader = null;</span><br><span class="line">       try &#123;</span><br><span class="line">           printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(path + folderName_1), <span class="string">"utf8"</span>));</span><br><span class="line">           Process process = Runtime.getRuntime().<span class="built_in">exec</span>(<span class="string">" mysqldump -h"</span> + hostIP + <span class="string">" -u"</span> + user + <span class="string">" -p"</span> + password + <span class="string">" --set-charset=UTF8 "</span> + exportDatabaseName +<span class="string">" --tables "</span>+entTableName+<span class="string">" "</span>+<span class="string">"--where=\"ent_id='"</span>+ ent_id + <span class="string">"'\""</span>);</span><br><span class="line">           InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream(), <span class="string">"utf8"</span>);</span><br><span class="line">           bufferedReader = new BufferedReader(inputStreamReader);</span><br><span class="line">           String line;</span><br><span class="line">           <span class="keyword">while</span> ((line = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">               printWriter.println(line);</span><br><span class="line">           &#125;</span><br><span class="line">           printWriter.flush();</span><br><span class="line">           <span class="keyword">if</span> (process.waitFor() != 0) &#123;</span><br><span class="line">               throw new CustomException(<span class="string">"线程未正常中止"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           throw new CustomException(<span class="string">"备份sql操作失败"</span>);</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               <span class="keyword">if</span> (bufferedReader != null) &#123;</span><br><span class="line">                   bufferedReader.close();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (printWriter != null) &#123;</span><br><span class="line">                   printWriter.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; catch (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> mysqldump </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysqldump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库批量修改语句生成查询语句</title>
      <link href="/2020/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E8%AF%AD%E5%8F%A5%E7%94%9F%E6%88%90%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/08/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E8%AF%AD%E5%8F%A5%E7%94%9F%E6%88%90%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在接老师开发商业性质的项目的时候，接受了一个批量修改数据库的任务，花费了自己蛮多心血特此记录一下。</p><h2 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h2><p>任务详情：<br>数据库的表结构不统一，字段列名缺失以及长度不匹配。<br>在现有的数据库中，每张表都有 CREATER，CREATER_ID，CREATE_DATE，UPDATER，UPDATER_ID，UPDATE_DATE等字段，编写一个工具，用于：</p><ol><li>确保一致性：每张表内的这些字段名字，类型，长度都相同</li><li>统一被修改：批量修改这些字段的名字，类型，长度<br><img src="/img/sql/sql工具.PNG" alt=""></li></ol><h2 id="解决思路-amp-方案"><a href="#解决思路-amp-方案" class="headerlink" title="解决思路&amp;方案"></a>解决思路&amp;方案</h2><p>刚开始时想复杂了，脚本学习较少，时间紧迫，于是选择从sql查询语句入手，一直往IF EXISTS钻牛角尖，但批量多表操作的拼接折磨了我很久，后续将问题简单化为将对应数据库没有字段的表添加字段列，再将所有表对应字段列的属性以及长度更新校验更正为任务要求的。</p><p>拼接代码：<br>注意：除CREATER其它字段sql全部省略,下为核心拼接代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">SELECT DISTINCT CONCAT(<span class="string">'ALTER TABLE '</span>,table_name,<span class="string">' ADD COLUMN CREATER VARCHAR(32);'</span>) FROM information_schema.tables WHERE table_schema = DATABASE() AND TABLE_NAME NOT IN (SELECT TABLE_NAME FROM information_schema.columns WHERE table_schema = DATABASE() AND column_name LIKE <span class="string">'CREATER'</span>);</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(<span class="string">'ALTER TABLE '</span>,table_name,<span class="string">' MODIFY  COLUMN CREATER VARCHAR(32);'</span>) from information_schema.`TABLES`WHERE table_schema=<span class="string">'agency_test'</span>;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></p><h2 id="sql注意事项"><a href="#sql注意事项" class="headerlink" title="sql注意事项"></a>sql注意事项</h2><p>SQL语句进行列名字段查询时，注意取反编写，不可直接写 column_name not like ‘字段名’，column_name like ‘字段名’逻辑为会选取发现每个表的列名与like的字段进行对比，只要有和对应字段名相同的列名及选出该表，not like会导致只要表中有与like的字段不匹配的表便会选出该表，只要表含多个列名基本便会选出导致与需求不服。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ol><li><p>在要修改的数据库新建查询</p></li><li><p>在查询里黏贴sql查询代码生成脚本的内容并运行</p></li><li><p>保存该查询结果为.txt文件（或sql文件）</p></li><li><p>在该文件内容开头另起一行添加  START TRANSACTION;  内容结尾另一起行添加  COMMIT;</p></li><li><p>将该内容黏贴至新的查询（或运行sql文件注意指定运行sql的数据库）</p></li><li><p>注意：sql查询代码生成脚本未指定生成查询的关联数据库，请在需要使用的数据库使用该查询，若想指定对应数据库请将中所有table_schema=DATABASE()修改为table_schema=’指定数据库’</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库外键与级联的使用考量</title>
      <link href="/2020/08/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%96%E9%94%AE%E4%B8%8E%E7%BA%A7%E8%81%94%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%83%E9%87%8F/"/>
      <url>/2020/08/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%96%E9%94%AE%E4%B8%8E%E7%BA%A7%E8%81%94%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%83%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在接触了一些企业级项目后发现，项目对应的数据库设计中很少再设计外键和级联（触发器、级联更新与删除）与大学期间的数据库设计课程以及以往的个人小项目的数据库设计相反，当需要用外键做关联的时候，也是仅对字段进行冗余存储。</p><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><p>在《阿里巴巴java开发手册》中对数据库设置的规范强调————“【强制】不得使用外键与级联，一切外键概念必须在应用层解决。”</p><h2 id="数据库去外键设计"><a href="#数据库去外键设计" class="headerlink" title="数据库去外键设计"></a>数据库去外键设计</h2><p>解决方案：设计关联表。<br>举例：sys_user用户表与sys_role用户角色表需要对应关联时，再建立一个用户与角色的关联表sys_user_role表，该关联表存储sys_user表与sys_role表的主键id等。<br>设计图例：<br><img src="/img/foreignKey.PNG" alt=" run Dashboard"> </p><h2 id="思考与对比"><a href="#思考与对比" class="headerlink" title="思考与对比"></a>思考与对比</h2><p>去外键以及级联的设计，无疑是将数据的关联设置从数据库中剥离出来，在对数据库数据进行修改时，修改成本降低 （修改时不再考虑外键对应表的处理）统一在后端代码中进行关联设置。有外键的数据设计系统在分布式、高并发集群环境下，容易产生更新风暴，以及外键会影响数据库的插入速度。</p><p>个人开发（小型应用）、数据库读写资源充足（数据库并发低），集中式数据库系统，则应该使用外键保障数据的完整性，减少开发端的负担，有利于数据库开发与程序开发的分离。</p><p>团队开发（大型应用）。数据库的读写成为瓶颈（数据库并发高），分布式数据库系统（分割式存储数据），（如阿里巴巴）则应该在项目业务端实现，团队合作开发模块化突出，通过在业务端设置外键可以减小项目开发时有外键带来的各种不便。同时外键的分布式的数据库存储，数据库中表的分割也使得在数据库端实现外键比较复杂，而在业务端通过代码实现则更灵活。</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> foreign key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用@Async实现异步调用</title>
      <link href="/2020/08/08/SpringBoot%E4%BD%BF%E7%94%A8-Async%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/"/>
      <url>/2020/08/08/SpringBoot%E4%BD%BF%E7%94%A8-Async%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在写项目时，有个需求为前端使用用户下载数据库备份压缩文件，其中涉及多表多条件dump备份</p><h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><p>类似方法有4个，未异步调用耗时较长影响用户体验。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">entIdSqlDumpOne</span><span class="params">(String path, String dateString, String ent_id,String entTableName,String user, String password, String hostIP, String exportDatabaseName)</span></span>&#123;</span><br><span class="line">    String folderName_1 = <span class="string">"ZYK_"</span> + ent_id + <span class="string">"_BackupENT_"</span> + dateString + <span class="string">".sql"</span>;</span><br><span class="line">    PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//Lock lock = new ReentrantLock();</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//lock.lock();</span></span><br><span class="line">        printWriter = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(path + folderName_1), <span class="string">"utf8"</span>));</span><br><span class="line">        Process process = Runtime.getRuntime().exec(<span class="string">" mysqldump -h"</span> + hostIP + <span class="string">" -u"</span> + user + <span class="string">" -p"</span> + password + <span class="string">" --set-charset=UTF8 "</span> + exportDatabaseName +<span class="string">" --tables "</span>+entTableName+<span class="string">" "</span>+<span class="string">"--where=\"ent_id='"</span>+ ent_id + <span class="string">"'\""</span>);</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(process.getInputStream(), <span class="string">"utf8"</span>);</span><br><span class="line">        bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            printWriter.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        printWriter.flush();</span><br><span class="line">        <span class="keyword">if</span> (process.waitFor() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">"线程未正常中止"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">"备份sql操作失败"</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (printWriter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="设置异步调用"><a href="#设置异步调用" class="headerlink" title="设置异步调用"></a>设置异步调用</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>springboot application类中配置@EnableAsync</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> </span><br><span class="line"><span class="meta">@EnableAsync</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAsyncApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line"> SpringApplication.run(SpringbootAsyncApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在需要异步调用的方法头加@Async注解</p></li><li><p>异步调用备份方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTask</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Future&lt;String&gt; task1 = myTask.entIdSqlDumpOne();</span><br><span class="line">        Future&lt;String&gt; task2 = myTask.entIdSqlDumpTwo();</span><br><span class="line">        Future&lt;String&gt; task3 = myTask.entIdSqlDumpThree();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(task1.isDone() &amp;&amp; task2.isDone() &amp;&amp; task3.isDone()) &#123;</span><br><span class="line">                <span class="comment">// 三个任务都调用完成，退出循环等待，无法调度完成抛出异常</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 异步调用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离整体项目docker部署</title>
      <link href="/2020/07/25/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%95%B4%E4%BD%93%E9%A1%B9%E7%9B%AEdocker%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/07/25/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%95%B4%E4%BD%93%E9%A1%B9%E7%9B%AEdocker%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>前后端分离项目涉及vue、nginx与含dockerFile的jar包部署，使用docker一次性部署vue、nginx、jar、mysql。</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><h3 id="安装-amp-启动docker"><a href="#安装-amp-启动docker" class="headerlink" title="安装&amp;启动docker"></a>安装&amp;启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用nginx镜像来创建nginx容器实例并运行</span></span><br><span class="line">docker run --name nginx-test -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><p>run 创建容器实例</p><p>— name 容器命名</p><p>-v 映射目录</p><p>-d 设置容器后台运行</p><p>-p 本机端口映射 将容器的80端口映射到本机的80端口</p><h4 id="将nginx关键目录映射到本机"><a href="#将nginx关键目录映射到本机" class="headerlink" title="将nginx关键目录映射到本机"></a>将nginx关键目录映射到本机</h4><p>在本机创建nginx的一些文件存储目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/nginx/www /root/nginx/logs /root/nginx/conf</span><br></pre></td></tr></table></figure></p><p>查看nginx-test容器id(containerId)<br>根据id将nginx-test容器配置文件copy到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">docker cp <span class="string">"containerId"</span>:/etc/nginx/nginx.conf /root/nginx/conf</span><br></pre></td></tr></table></figure></p><p>创建新nginx容器nginx-web,并将www,logs,conf目录映射到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name nginx-web -v &#x2F;root&#x2F;nginx&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -v &#x2F;root&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf -v &#x2F;root&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx nginx</span><br></pre></td></tr></table></figure><br>www: nginx存储网站网页的目录</p><p>logs: nginx日志目录</p><p>conf: nginx配置文件目录</p><p>启动nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start nginx-web</span><br></pre></td></tr></table></figure></p><h4 id="设置反向代理"><a href="#设置反向代理" class="headerlink" title="设置反向代理"></a>设置反向代理</h4><p>进入到/root/conf/nginx.conf vim指令修改即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   charset utf-8;</span><br><span class="line">   server_name ip地址(xxx.xxx.xxx.xxx);</span><br><span class="line"> </span><br><span class="line">   location / &#123;</span><br><span class="line">      proxy_pass http://ip地址:8080;</span><br><span class="line">      proxy_redirect default;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="部署vue项目"><a href="#部署vue项目" class="headerlink" title="部署vue项目"></a>部署vue项目</h3><p>cd vue项目 ls查看是否有dist与dockerfile 2个文件</p><p>dockerfile内容：<br>作用：指定镜像、将dist文件放到nginx的项目地址路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:latest</span><br><span class="line">MAINTAINER xx</span><br><span class="line">COPY dist/ /usr/share/nginx/html/</span><br></pre></td></tr></table></figure></p><p>dist文件生成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p>当前目录部署镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t vueproject .</span><br></pre></td></tr></table></figure></p><h3 id="部署mysql"><a href="#部署mysql" class="headerlink" title="部署mysql"></a>部署mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker images|grep mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器镜像，建议在/usr/local/workspace/mysql  下执行以下docker  run  命令</span></span><br><span class="line">docker run -p 13306:3306 --name my-mysql -v <span class="variable">$PWD</span>/conf:/etc/mysql -v <span class="variable">$PWD</span>/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.26</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 建议写死路径,-v挂载路径使即使容器停止运行数据依旧存在</span></span><br><span class="line">docker run -p 13306:3306 --name my-mysql -v /usr/<span class="built_in">local</span>/workspace/mysql/conf:/etc/mysql -v /usr/<span class="built_in">local</span>/workspace/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure><h3 id="部署java-web项目"><a href="#部署java-web项目" class="headerlink" title="部署java web项目"></a>部署java web项目</h3><p>编写dockerfile文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:11-jre-alpine</span><br><span class="line">ADD statistics_examine.jar app.jar</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"app.jar"</span>]</span><br></pre></td></tr></table></figure></p><p>构建镜像&amp;运行容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t spring-hello .</span><br><span class="line"></span><br><span class="line">docker run --name hello-backend -d -p 8000:8080 spring-hello</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三实训记录——thymeleaf传值给外联js文件</title>
      <link href="/2020/06/25/%E5%A4%A7%E4%B8%89%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94thymeleaf%E4%BC%A0%E5%80%BC%E7%BB%99%E5%A4%96%E8%81%94js%E6%96%87%E4%BB%B6/"/>
      <url>/2020/06/25/%E5%A4%A7%E4%B8%89%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94thymeleaf%E4%BC%A0%E5%80%BC%E7%BB%99%E5%A4%96%E8%81%94js%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="实训"><a href="#实训" class="headerlink" title="实训"></a>实训</h2><p>最近大三下半学期刚刚结束，打算用实训记录类标题记录一下自己实训开发中遇到的一些问题。这次实训由京东互联网科技实践中心的老师授课并且给与我们开发小组达到毕设水平的评价，不知后续参加工作后看大学中开发的项目会有一些什么样的感受。项目后续上传到github上，个人负责建筑平台用户操作系统开发，管理员与评审专家由其他组员开发。</p><h2 id="实训问题——thymeleaf传值给外联js文件"><a href="#实训问题——thymeleaf传值给外联js文件" class="headerlink" title="实训问题——thymeleaf传值给外联js文件"></a>实训问题——thymeleaf传值给外联js文件</h2><p>这次实训中后端业务逻辑、架构、数据库操作没有太大阻力，由于个人前端技术较差，主要问题集中于前端模板与后端的交互。这篇文介绍外联js传值问题。<br>当使用前端模板时想使用如下图的动态显示数据问题时需要解决如何后端向js文件传值，这次实训项目未前后端分离采用thymeleaf模板引擎。<br><img src="/img/design20/countJs.PNG" alt="前端js动态显示数据"> </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决思路：后端传值给html页面，html页面设立全局变量赋值接收，js调用含有该变量的function()方法。<br>项目实例见下方代码：<br>html页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">           //&lt;![CDATA[</span><br><span class="line">          var countUser = [[<span class="variable">$&#123;userNumber&#125;</span>]];</span><br><span class="line">          var countExpert = [[<span class="variable">$&#123;expertNumber&#125;</span>]];</span><br><span class="line">          var countProject = [[<span class="variable">$&#123;projectNumber&#125;</span>]];</span><br><span class="line">          var countPrize = [[<span class="variable">$&#123;prizeNumber&#125;</span>]];</span><br><span class="line">          //通过参数传递</span><br><span class="line">          countUp(countUser);</span><br><span class="line">          countUp2(countExpert);</span><br><span class="line">          countUp3(countProject);</span><br><span class="line">          countUp4(countPrize);</span><br><span class="line"></span><br><span class="line">           //]]&gt;</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">      &lt;script src=<span class="string">"/js/count.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> /&gt;&lt;/script&gt;&lt;/section&gt;</span><br></pre></td></tr></table></figure><br>js页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> countUp(count)</span><br><span class="line">&#123;</span><br><span class="line">    var div_by = 100,</span><br><span class="line">        speed = Math.round(count / div_by),</span><br><span class="line">        <span class="variable">$display</span> = $(<span class="string">'.count'</span>),</span><br><span class="line">        run_count = 1,</span><br><span class="line">        int_speed = 24;</span><br><span class="line"></span><br><span class="line">    var int = setInterval(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(run_count &lt; div_by)&#123;</span><br><span class="line">            <span class="variable">$display</span>.text(speed * run_count);</span><br><span class="line">            run_count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(parseInt(<span class="variable">$display</span>.text()) &lt; count) &#123;</span><br><span class="line">            var curr_count = parseInt(<span class="variable">$display</span>.text()) + 1;</span><br><span class="line">            <span class="variable">$display</span>.text(curr_count);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clearInterval(int);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, int_speed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countUp(countUser);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三实训记录——springboot2.0后版本配置虚拟路径以访问本地图片</title>
      <link href="/2020/06/20/%E5%A4%A7%E4%B8%89%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94springboot2-0%E5%90%8E%E7%89%88%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2020/06/20/%E5%A4%A7%E4%B8%89%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94springboot2-0%E5%90%8E%E7%89%88%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="实训"><a href="#实训" class="headerlink" title="实训"></a>实训</h2><p>最近大三下半学期刚刚结束，打算用实训记录类标题记录一下自己实训开发中遇到的一些问题。这次实训由京东互联网科技实践中心的老师授课并且给与我们开发小组达到毕设水平的评价，不知后续参加工作后看大学中开发的项目会有一些什么样的感受。项目后续上传到github上，个人负责建筑奖项参评平台用户操作系统开发，管理员与评审专家系统由其他组员开发。</p><h2 id="实训问题——thymeleaf传值给外联js文件"><a href="#实训问题——thymeleaf传值给外联js文件" class="headerlink" title="实训问题——thymeleaf传值给外联js文件"></a>实训问题——thymeleaf传值给外联js文件</h2><p>这次实训中后端业务逻辑、架构、数据库操作没有太大阻力，由于个人前端技术较差，主要问题集中于前端模板与后端的交互。这篇文介绍虚拟路径映射问题，在项目需求分析中为满足用户操作平台中用户账号上传、更换头像并实时显示的问题，springboot开发须配置使用虚拟路径映射完成功能。<br><img src="/img/design20/images.PNG" alt="虚拟路径映射"> </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决思路：@Configuration定义配置类，继承WebMvcConfigurationSupport类配置虚拟路径。<br>项目实例见下方代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class UploadConfiguration extends WebMvcConfigurationSupport  &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/upload/**"</span>)//这个是虚拟路径图片路径</span><br><span class="line">                .addResourceLocations(<span class="string">"file:E:/upload/img/"</span>);//这个是图片真实路径</span><br><span class="line">        super.addResourceHandlers(registry);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>);//项目内的图片去static下找</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟路径 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 虚拟路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea配置run Dashboard</title>
      <link href="/2020/06/20/idea%E9%85%8D%E7%BD%AErun%20Dashboard/"/>
      <url>/2020/06/20/idea%E9%85%8D%E7%BD%AErun%20Dashboard/</url>
      
        <content type="html"><![CDATA[<h2 id="run-Dashboard功能"><a href="#run-Dashboard功能" class="headerlink" title="run Dashboard功能"></a>run Dashboard功能</h2><p>如下图所示run Dashboard面板可以管理多个服务、modules，对微服务项目以及多modules项目运行和管理十分方便，但idea在运行中不是默认就有run Dashboard的面板<br><img src="/img/design20/Dashboard.PNG" alt=" run Dashboard"> </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.点击多个模块服务启动时的idea右下角弹窗<br><img src="/img/design20/Dashboard-1.PNG" alt=" run Dashboard"><br>2.edit configurations配置，步骤如下图：<br><img src="/img/design20/Dashboard-4.PNG" alt=" run Dashboard"><br><img src="/img/design20/Dashboard-2.PNG" alt=" run Dashboard"><br><img src="/img/design20/Dashboard-3.PNG" alt=" run Dashboard"> </p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> run Dashboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid的sql数据监控没有数据</title>
      <link href="/2020/04/30/Druid%E7%9A%84sql%E6%95%B0%E6%8D%AE%E7%9B%91%E6%8E%A7%E6%B2%A1%E6%9C%89%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/04/30/Druid%E7%9A%84sql%E6%95%B0%E6%8D%AE%E7%9B%91%E6%8E%A7%E6%B2%A1%E6%9C%89%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Druid无sql数据监控"><a href="#Druid无sql数据监控" class="headerlink" title="Druid无sql数据监控"></a>Druid无sql数据监控</h2><p>在使用springboot集成Druid数据源时遇到了一直监控不到sql数据问题<br>问题情形如下：<br><img src="/img/Druid/druid1.PNG" alt=""><br><img src="/img/Druid/druid2.PNG" alt=""><br><img src="/img/Druid/druid3.PNG" alt=""><br>可以发现filter类名下为空，查看配置问题</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可能原因：<br>(1)config下的filter方法没添加@Bean<br>(2)filters没配置</p><p>(1)的解决方案不做赘述。<br>(2)的解决方案：<br>打开resources目录下配置文件添加配置<br>.yml格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: xxxx</span><br><span class="line">    password: xxxx</span><br><span class="line">    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    <span class="built_in">type</span>: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    filters: <span class="built_in">stat</span></span><br></pre></td></tr></table></figure><br>.properties:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.druid.url=jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.druid.username=xxxx</span><br><span class="line">spring.datasource.druid.password=xxxx</span><br><span class="line">spring.datasource.druid.filters=<span class="built_in">stat</span></span><br></pre></td></tr></table></figure><br>解决后截图：<br><img src="/img/Druid/druid4.PNG" alt=""><br><img src="/img/Druid/druid5.PNG" alt="">    </p>]]></content>
      
      
      <categories>
          
          <category> Druid </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Druid </tag>
            
            <tag> alibaba.druid </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA旗舰版学生党如何获得免费的个人许可证</title>
      <link href="/2020/04/21/IDEA%E6%97%97%E8%88%B0%E7%89%88%E5%AD%A6%E7%94%9F%E5%85%9A%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%AE%B8%E5%8F%AF%E8%AF%81-1/"/>
      <url>/2020/04/21/IDEA%E6%97%97%E8%88%B0%E7%89%88%E5%AD%A6%E7%94%9F%E5%85%9A%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%AE%B8%E5%8F%AF%E8%AF%81-1/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>版本：<code>Ultimate</code> | <code>Community Edition</code><br>        旗舰版    社区版本<br>为什么我要使用旗舰版的IDEA？请看官方比较：<a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html" target="_blank" rel="noopener">https://www.jetbrains.com/idea/features/editions_comparison_matrix.html</a><br>旗舰版还支持HTML，CSS，PHP，SQL，Python等语言，并且支持更多的服务端框架和前端框架例如：Spring、Spring Cloud、Java EE、Micronaut, Quarkus, Helidon、Grails、Node.js、Django等，还有服务器部署例如：Tomcat、TomEE、JBoss, WildFly、GlassFish、Resin等，而社区版只支持Docker。相对于社区版本，旗舰版还有更多的分析工具，因此我选择旗舰版IDEA，如果学生教师想要使用旗舰版的IDEA又不想官方购买怎么办？下面我教大家获取免费的个人许可证。</p><h2 id="1-到学信网申请在线认证报告"><a href="#1-到学信网申请在线认证报告" class="headerlink" title=".1.到学信网申请在线认证报告"></a>.1.到学信网申请在线认证报告</h2><p><a href="https://www.chsi.com.cn/" target="_blank" rel="noopener">https://www.chsi.com.cn/</a> 进入后用自己身份证登录，点击<code>学籍查询</code>，进入后点击<code>在线验证报告</code>下方的<code>申请</code>，点击教育部学籍<code>在线验证报告</code>下的<code>查看</code>：然后申请就好，申请完后点击<code>查看</code>，即可看到本人的学籍信息页面，接着点击<code>PDF下载</code>，然后复制当前网址放在记事本以备后面所需。<br><img src="/img/idea/idea_1.jpg" alt=""><br><img src="/img/idea/idea_2.jpg" alt=""><br><img src="/img/idea/idea_3.jpg" alt=""><br><img src="/img/idea/idea_4.jpg" alt=""><br><img src="/img/idea/idea_5.jpg" alt=""></p><h2 id="2-到JetBrains官网进行学生认证"><a href="#2-到JetBrains官网进行学生认证" class="headerlink" title=".2.到JetBrains官网进行学生认证"></a>.2.到JetBrains官网进行学生认证</h2><p><a href="https://www.jetbrains.com/shop/eform/students" target="_blank" rel="noopener">https://www.jetbrains.com/shop/eform/students</a><br>进入后如下图对照填写：<br>官方文件即为刚下载的pdf文件。证明你与你的学术机构有隶属的正式文件链接就写刚复制的，就是学信网认证后的那个页面地址。填写完后点击申请，时间为人工审核4-7天并以填写的邮件地址给你回复。</p><p><img src="/img/idea/idea_6.jpg" alt=""><br><img src="/img/idea/idea_7.jpg" alt=""></p><h2 id="3-成功收到审核成功的通知"><a href="#3-成功收到审核成功的通知" class="headerlink" title=".3.成功收到审核成功的通知"></a>.3.成功收到审核成功的通知</h2><p>jetbrains官方审核成功后会给你的来信如下图，你需要点击<code>link your free license</code>，然后下方<code>Create JetBrains Account</code>创建一个账号密码，输入你的邮箱，点击<code>Sign Up</code>注册jetbrains官方账号，进去后填写密码及可绑定该许可证。<br>至此就免费的获得了个人许可证，下载IDEA开始你的代码之旅吧。<br><img src="/img/idea/idea_8.jpg" alt=""><br><img src="/img/idea/idea_9.jpg" alt=""><br><img src="/img/idea/idea_10.jpg" alt=""></p><p>本文为转载<br>IDEA旗舰版学生党如何获得免费的个人许可证由<a href="https://yoyling.com/author/1/" target="_blank" rel="noopener">YOYLING.</a>创作,点击作者名称进入作者主页。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk11新特性</title>
      <link href="/2020/04/21/jdk11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/04/21/jdk11%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>这日子过着过着jdk14都发布了，刚起步用jdk11的我瑟瑟发抖，打算记录一下。<br><img src="/img/jdk14.PNG" alt=""></p><h2 id="Java11-vs-Java8"><a href="#Java11-vs-Java8" class="headerlink" title="Java11 vs Java8"></a>Java11 vs Java8</h2><p><img src="/img/jdk11/jdk11_1.jpg" alt=""><br>Java 11相对于Java 8确实有一部分进化，除了有很多内部的升级（比如开销和时延更低的<br>GC、TLS1.3加持等等）之外，对于初学使用者来说也有一些语言使用层面的进化。<br>正好最近我在自己的个人小项目上尝试升级使用了一下 Java11（公司项目咱也不敢动、也不<br>敢问，只好动自己的个人项目），因此本文从实际代码编写角度来大致体验一下我个人使用<br>Java11之后相对 Java8所感觉到的一些比较深刻的进化，官方文档里说得也非常清楚了：<br><a href="https://docs.oracle.com/en/java/javase/11/" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/11/</a><br>我这次实验装的 Java11版本是 11.0.6：<br><img src="/img/jdk11/jdk11_2.jpg" alt=""><br>下文将要实验验证的一些新特性其实也并非 147 Java11才引入，很多其实在 Java9和 Java10时<br>就已经引入，只不过到了 Java11这个稳定版才沉淀下来。</p><h2 id="变量类型推断"><a href="#变量类型推断" class="headerlink" title="变量类型推断"></a>变量类型推断</h2><p>新版Java引入了一个全新的类型关键字 var，用 var来定义的变量不用写具体类型，编译器能<br>根据 =右边的实际赋值来自动推断出变量的类型：<br>1、普通局部变量<br><img src="/img/jdk11/jdk11_3.jpg" alt=""><br>怎么样？是不是有一种在使用类似JavaScript这种弱类型语言的错觉？</p><p>2、for循环中使用<br><img src="/img/jdk11/jdk11_4.jpg" alt=""></p><p>这地方就能看出用 var定义局部变量的优势了，假如这个例子中集合里的元素类型更为复杂，<br>是类似 List<List<String>&gt;这种嵌套类型的话， var定义就非常简洁明了！</p><p>3、当然，有些情况是不能使用的<br>var类型变量一旦赋值后，重新赋不同类型的值是不行的，比如：<br><img src="/img/jdk11/jdk11_5.jpg" alt=""></p><p>定义 var类型变量没有初始化是不行的，比如：<br><img src="/img/jdk11/jdk11_6.jpg" alt=""><br>另外，像类的 成员变量类型、 方法入参类型、 返回值类型等是不能使用 var的，比如：<br><img src="/img/jdk11/jdk11_7.jpg" alt=""></p><h2 id="官方HTTP-Client加持"><a href="#官方HTTP-Client加持" class="headerlink" title="官方HTTP Client加持"></a>官方HTTP Client加持</h2><p>是的！<br>现在 JDK官方就自带 HTTPClient了，位于 java.net.http包下，支持发送同步、异步的 HTTP请<br>求，这样一来，以前咱们常用的HTTP请求客户端诸如： OKHttp、 HttpClient这种现在都可以<br>退下了！<br>发送同步请求：<br><img src="/img/jdk11/jdk11_8.jpg" alt=""><br>发送异步请求：<br><img src="/img/jdk11/jdk11_9.jpg" alt=""><br>当然你也可以自定义请求头，比如携带 JWT Token权限信息去请求等：<br><img src="/img/jdk11/jdk11_10.jpg" alt=""></p><h2 id="String处理增强"><a href="#String处理增强" class="headerlink" title="String处理增强"></a>String处理增强</h2><p>新版字符串 String类型增加了诸如： isBlank()、 strip()、 repeat()等方便的字符串处理方<br>法<br><img src="/img/jdk11/jdk11_11.jpg" alt=""></p><h2 id="集合增强"><a href="#集合增强" class="headerlink" title="集合增强"></a>集合增强</h2><p>主要是增加了诸如 of()和 copyOf()等方法用于更加方便的创建和复制集合类型<br><img src="/img/jdk11/jdk11_12.jpg" alt=""></p><h2 id="函数式编程增强"><a href="#函数式编程增强" class="headerlink" title="函数式编程增强"></a>函数式编程增强</h2><p>我印象最深的是对 Stream流增加了诸如 takeWhile()和 dropWhile()的截止结算方法：<br><img src="/img/jdk11/jdk11_13.jpg" alt=""></p><h2 id="文件读写增强"><a href="#文件读写增强" class="headerlink" title="文件读写增强"></a>文件读写增强</h2><h3 id="1、Files类增强"><a href="#1、Files类增强" class="headerlink" title="1、Files类增强"></a>1、Files类增强</h3><p>我们以前心心念的直接能把文件内容读取到 String以及 String回写到文件的功能终于支持了,<br>可以通过 Files类的静态方法 writeString()和 readString()完成：<br><img src="/img/jdk11/jdk11_14.jpg" alt=""></p><h3 id="2、InputStream增强"><a href="#2、InputStream增强" class="headerlink" title="2、InputStream增强"></a>2、InputStream增强</h3><p>InputStream则增加了一个 transferTo()方法，直接将数据丢到 OutputStream去：<br><img src="/img/jdk11/jdk11_15.jpg" alt=""></p><h2 id="支持源文件直接运行-666！"><a href="#支持源文件直接运行-666！" class="headerlink" title="支持源文件直接运行(666！)"></a>支持源文件直接运行(666！)</h2><p>比如写一个最简单的 Hello World程序：<br><img src="/img/jdk11/jdk11_16.jpg" alt=""><br>并保存为 hello.java文件，这时候可以直接用 java指令去运行这个Java源文件，直接省去以<br>前 javac编译源文件的过程：<br><img src="/img/jdk11/jdk11_17.jpg" alt=""><br><img src="/img/jdk11/jdk11_18.jpg" alt=""><br>怎么样？是不是和python源文件的运行有点像？这个信息量就有点大了，大家可以自行脑补<br>一下</p><h2 id="小-结"><a href="#小-结" class="headerlink" title="小 结"></a>小 结</h2><p>Java 11确有很多改进，但还是那句话，对于初学者来说Java 8足够啦，没必要刻意求新，稳<br>才是最重要的！</p><p>转载的原文地址：<a href="https://www.bilibili.com/read/cv5037646" target="_blank" rel="noopener">https://www.bilibili.com/read/cv5037646</a></p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk12新特性</title>
      <link href="/2020/04/21/jdk12%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/04/21/jdk12%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>这日子过着过着jdk14都发布了，刚起步用jdk11的我瑟瑟发抖，打算记录一下。<br><img src="/img/jdk14.PNG" alt="官网"></p><h2 id="低暂停延时的垃圾收集器-实验版"><a href="#低暂停延时的垃圾收集器-实验版" class="headerlink" title="低暂停延时的垃圾收集器 (实验版)"></a>低暂停延时的垃圾收集器 (实验版)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A Low-Pause-Time Garbage Collector (Experimental)</span><br></pre></td></tr></table></figure><p>添加一个名为 Shenandoah的新垃圾收集 (GC)算法，该算法通过与正在运行的 Java线程并发执行回收工作来减少 GC暂停时间。Shenandoah的暂停时间与堆大小无关，这意味着无论堆大小是 200MB 还是 200GB，都将拥有相同的暂停时间。</p><h2 id="微基准测试套件"><a href="#微基准测试套件" class="headerlink" title="微基准测试套件"></a>微基准测试套件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microbenchmark Suite</span><br></pre></td></tr></table></figure><p>在 JDK源代码中添加了一组基本的微基准测试套件，使得开发人员无论运行现有的微基准测试或者创建新的微基准测试都变得十分便利。</p><h2 id="Switch-表达式-预览版"><a href="#Switch-表达式-预览版" class="headerlink" title="Switch 表达式 (预览版)"></a>Switch 表达式 (预览版)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Switch Expressions (Preview)</span><br></pre></td></tr></table></figure><p>这是一个预览版语言特性。通过对 switch语法进行了扩展，使其不仅可以作为语句（statement），还可以作为表达式（expression），并且两种形式都可以使用“传统的”或“简化的”语法用于作用于不同的范围或者控制执行流。这些更改将会简化日常编码，并且为在 switch中使用模式匹配 (JEP 305) 做好了准备。</p><h2 id="JVM-常量API"><a href="#JVM-常量API" class="headerlink" title="JVM 常量API"></a>JVM 常量API</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JVM Constants API</span><br></pre></td></tr></table></figure><p>引入一个API来建模关键类文件（key class-file）和运行时构件（run-time artifacts）的标称描述，特别是对那些可从常量池加载的常量。</p><h2 id="仅保留-AArch64-实现"><a href="#仅保留-AArch64-实现" class="headerlink" title="仅保留 AArch64 实现"></a>仅保留 AArch64 实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">One AArch64 Port, Not Two</span><br></pre></td></tr></table></figure><p>删除与 arm64实现相关的所有源代码，同时保留 32-bit ARM和 64-bit aarch64实现。删除这些实现是为了让所有代码贡献者集中精力于一个实现上，从而消除维护两个实现所需付出的重复工作。</p><h2 id="默认类数据共享归档文件"><a href="#默认类数据共享归档文件" class="headerlink" title="默认类数据共享归档文件"></a>默认类数据共享归档文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Default CDS Archives</span><br></pre></td></tr></table></figure><p>增强 JDK构建过程，在 64位平台上使用默认的类列表生成类数据共享(class data-sharing，CDS)存档。</p><h2 id="可中断的-G1-Mixed-GC"><a href="#可中断的-G1-Mixed-GC" class="headerlink" title="可中断的 G1 Mixed GC"></a>可中断的 G1 Mixed GC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Abortable Mixed Collections for G1</span><br></pre></td></tr></table></figure><p>如果 Mixed GC 的 G1 存在超出暂停目标的可能性，则使其可被中止。</p><h2 id="G1未使用分配内存即时返回"><a href="#G1未使用分配内存即时返回" class="headerlink" title="G1未使用分配内存即时返回"></a>G1未使用分配内存即时返回</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Promptly Return Unused Committed Memory from G1</span><br></pre></td></tr></table></figure><p>增强 G1垃圾收集器，以便在空闲时自动将 Java 堆内存返回给操作系统。</p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 2020、Java14升级体验</title>
      <link href="/2020/04/21/IDEA%202020%E5%8D%87%E7%BA%A7%E4%BD%93%E9%AA%8CJava14/"/>
      <url>/2020/04/21/IDEA%202020%E5%8D%87%E7%BA%A7%E4%BD%93%E9%AA%8CJava14/</url>
      
        <content type="html"><![CDATA[<h2 id="IntelliJ-IDEA2020"><a href="#IntelliJ-IDEA2020" class="headerlink" title="IntelliJ IDEA2020"></a>IntelliJ IDEA2020</h2><p>就在前几天，Java软件开发神器 IDEA 2020.1 新版发布了：<br><img src="/img/IDEA2020/IDEA2020_1.jpg" alt=""><br>我第一时间在机子上更新并体验了几天，感觉还是有点香的！怎么硕呢，体验完新特性之后，不由的感叹一句：IDEA现在真的是越来越智能，越来越懂开发者了。</p><h2 id="UI-界面升级"><a href="#UI-界面升级" class="headerlink" title="UI/界面升级"></a>UI/界面升级</h2><h3 id="1、界面支持中文了"><a href="#1、界面支持中文了" class="headerlink" title="1、界面支持中文了"></a>1、界面支持中文了</h3><p>汉化后的效果就是这个样子：<br><img src="/img/IDEA2020/IDEA2020_2.jpg" alt=""><br>各花入各眼，好坏就不做评判了，可以根据自己的喜好来调节。</p><p>必须要说的是，这个中文汉化不是软件原生支持，而是需要下载安装一个名为<code>Chinese (Simplified) Language Pack</code>的插件，好在这个插件就是<code>JetBrains</code>官方提供的<br><img src="/img/IDEA2020/IDEA2020_3.jpg" alt=""></p><h3 id="2、导航栏进化"><a href="#2、导航栏进化" class="headerlink" title="2、导航栏进化"></a>2、导航栏进化</h3><p>现在代码层级导航栏这里，可以直接定位到文件中的某个具体方法或者字段了，这个的确很高效<br><img src="/img/IDEA2020/IDEA2020_4.jpg" alt=""></p><h3 id="3、支持编辑器内的Javadocs渲染"><a href="#3、支持编辑器内的Javadocs渲染" class="headerlink" title="3、支持编辑器内的Javadocs渲染"></a>3、支持编辑器内的<code>Javadocs</code>渲染</h3><p><img src="/img/IDEA2020/IDEA2020_5.jpg" alt=""><br>渲染后的<code>Javadoc</code>就非常直观易读了，而且还可以调整字号<br><img src="/img/IDEA2020/IDEA2020_6.jpg" alt=""></p><h3 id="4、新增主题和字体"><a href="#4、新增主题和字体" class="headerlink" title="4、新增主题和字体"></a>4、新增主题和字体</h3><p>首先默认支持了JetBrains自家的新JetBrains<br><img src="/img/IDEA2020/IDEA2020_7.jpg" alt=""><br>然后则是采用了统一的<code>IntelliJ Light</code>主题，而且该主题已经在不同的操作系统中完全统一了<br><img src="/img/IDEA2020/IDEA2020_8.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_9.jpg" alt=""><br>喜不喜欢看大家个人习惯了</p><h3 id="5、船新的LightEdit模式"><a href="#5、船新的LightEdit模式" class="headerlink" title="5、船新的LightEdit模式"></a>5、船新的LightEdit模式</h3><p><code>LightEdit</code>，顾名思义，轻量级的代码编辑。</p><p>是的，这次更新的IDEA支持打开单个代码文件进行编辑，而无需打开整个项目。文件可以在单独的编辑窗口打开，而且该窗口可以和其他（项目）窗口共存。就像这样：<br><img src="/img/IDEA2020/IDEA2020_10.jpg" alt=""><br>更强大的是，直接支持快捷打开这个单文件所在的完整项目：<br><img src="/img/IDEA2020/IDEA2020_11.jpg" alt=""><br>甚至还可以通过命令行来打开单文件，这相当可以了：<br><img src="/img/IDEA2020/IDEA2020_12.jpg" alt=""></p><h3 id="6、支持“禅”模式"><a href="#6、支持“禅”模式" class="headerlink" title="6、支持“禅”模式"></a>6、支持“禅”模式</h3><p>现在的这个代码展示模式有够丰富了，支持四种了：<br><img src="/img/IDEA2020/IDEA2020_13.jpg" alt=""><br>当然，禅模式是最彻底的，一开这个模式，整个世界都清净了…<br><img src="/img/IDEA2020/IDEA2020_14.jpg" alt=""></p><h3 id="7、终端支持分栏了"><a href="#7、终端支持分栏了" class="headerlink" title="7、终端支持分栏了"></a>7、终端支持分栏了</h3><p>现在可以随意地将IDEA自带的终端进行横竖分栏，非常方便<br><img src="/img/IDEA2020/IDEA2020_15.jpg" alt=""></p><h2 id="支持直接IDEA里安装JDK和Git"><a href="#支持直接IDEA里安装JDK和Git" class="headerlink" title="支持直接IDEA里安装JDK和Git"></a>支持直接IDEA里安装JDK和Git</h2><p>很多小伙伴交流说自己JDK环境好像装的有问题，实验各种出问题。为了这个事，强迫症都快犯了，很烦。</p><p>从IntelliJ IDEA 2020.1开始，我们可以直接在创建项目时，直接从IDEA上下载并设置JDK环境，很方便了。</p><p>我特地实验了一下，在IDEA里面下载安装了个Open JDK 14，没毛病，好用，切换也很方便。<br><img src="/img/IDEA2020/IDEA2020_16.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_17.jpg" alt=""><br>除此之外，IDEA还直接支持Git的安装，i了i了<br><img src="/img/IDEA2020/IDEA2020_18.jpg" alt=""></p><h2 id="支持Java-14新特性"><a href="#支持Java-14新特性" class="headerlink" title="支持Java 14新特性"></a>支持Java 14新特性</h2><p>前段时间Java 14发布，加入了一些新特性，这次IDEA 2020.1迅速跟进，支持了Java 14的一些新特性，举两个典型的例子。</p><h3 id="1、instanceof用法增强"><a href="#1、instanceof用法增强" class="headerlink" title="1、instanceof用法增强"></a>1、<code>instanceof</code>用法增强</h3><p>老的Java版本中，对于instanceof语法，我们一般都是这样用的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="built_in">test</span>( Object obj ) &#123;</span><br><span class="line">    <span class="keyword">if</span>( obj instanceof String  ) &#123;</span><br><span class="line">        String str = (String) obj;  // 需手动强制转换！</span><br><span class="line">        System.out.println( str.isEmpty() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>而Java 14对<code>instanceof</code>用法做了增强，我们借助全新的IDEA 2020，可以快捷的将上面的代码自动重构成如下所示：<br><img src="/img/IDEA2020/IDEA2020_19.jpg" alt=""><br>所以最终变成了这个亚子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="built_in">test</span>( Object obj ) &#123;</span><br><span class="line">    <span class="keyword">if</span>( obj instanceof String str ) &#123; // 校验通过，直接后面定义变量，无需强转！</span><br><span class="line">        System.out.println( str.isEmpty() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、record新语法支持"><a href="#2、record新语法支持" class="headerlink" title="2、record新语法支持"></a>2、record新语法支持</h3><p>Java 14新增了record新语法，record的词面意思就是 “记录”，主要用于形式化的固定记录，这在以前主要就是通过 不可变类来实现的，举个例子吧。</p><p>比如我们定义一个不可变的日志记录类LogRecord，里面包含日志ID（id），日志时间（date），日志详情（detail），按照老的做法，只能使用class进行定义：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public final class LogRecord &#123; // 不可变类</span><br><span class="line"></span><br><span class="line">    private final int id;</span><br><span class="line">    private final LocalDate date;</span><br><span class="line">    private final String detail;</span><br><span class="line"></span><br><span class="line">    public LogRecord(int id, LocalDate date, String detail) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.date = date;</span><br><span class="line">        this.detail = detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">getId</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LocalDate <span class="function"><span class="title">getDate</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getDetail</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"LogRecord&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", date="</span> + date +</span><br><span class="line">                <span class="string">", detail='"</span> + detail + <span class="string">'\'</span><span class="string">' +</span></span><br><span class="line"><span class="string">                '</span>&#125;<span class="string">';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public boolean equals(Object o) &#123;</span></span><br><span class="line"><span class="string">        if (this == o) return true;</span></span><br><span class="line"><span class="string">        if (o == null || getClass() != o.getClass()) return false;</span></span><br><span class="line"><span class="string">        LogRecord logRecord = (LogRecord) o;</span></span><br><span class="line"><span class="string">        return id == logRecord.id &amp;&amp;</span></span><br><span class="line"><span class="string">                Objects.equals(date, logRecord.date) &amp;&amp;</span></span><br><span class="line"><span class="string">                Objects.equals(detail, logRecord.detail);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public int hashCode() &#123;</span></span><br><span class="line"><span class="string">        return Objects.hash(id, date, detail);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><br>Java 14认为上面这种final类型class的定义的套路是完全固定的，写了很多固定套路的代码，包括：构造函数、Getter方法、toString()方法、hashCode() 和 equals()方法等等，十分无聊。</p><p>为此Java 14推出了全新的record语法，只需一行代码即可搞定，十分方便：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">record LogRecord( int id, LocalDate date, String detail ) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这次IDEA 2020中就已经完全支持recod语法了，并且还可以自动显式地为record生成各种方法：<br><img src="/img/IDEA2020/IDEA2020_20.jpg" alt=""></p><h2 id="支持更加智能的检查和重构"><a href="#支持更加智能的检查和重构" class="headerlink" title="支持更加智能的检查和重构"></a>支持更加智能的检查和重构</h2><h3 id="1、支持就地更改方法签名"><a href="#1、支持就地更改方法签名" class="headerlink" title="1、支持就地更改方法签名"></a>1、支持就地更改方法签名</h3><p>什么意思呢？举个例子。</p><p>当你想直接修改某个已有方法的参数时，不管三七二十一，上来可以直接修改方法签名，然后点击更新，接下来的所有步骤IDEA可以帮你完成。<br><img src="/img/IDEA2020/IDEA2020_21.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_22.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_23.jpg" alt=""><br><img src="/img/IDEA2020/IDEA2020_24.jpg" alt=""></p><p>2、智能分析日期字符串格式</p><p>比如这个例子中，我格式化一个日期时，无意将年月日<code>yyyy/MM/dd</code>字符串写成了<code>yyyy/mm/dd</code>，中间的<code>MM</code>大小写忘了，IDEA自动给我们分析出来了：<br><img src="/img/IDEA2020/IDEA2020_25.jpg" alt=""></p><p>3、智能语法和拼写检查器</p><p>这个功能得配合<code>Grazie</code>这个插件一起使用，该插件是一个全面的语法、拼写、以及样式检查工具。</p><p>比如，这地方我小手一抖，写错了英语语法，它立马帮我们提示出来了<br><img src="/img/IDEA2020/IDEA2020_26.jpg" alt=""></p><h2 id="增强调试功能"><a href="#增强调试功能" class="headerlink" title="增强调试功能"></a>增强调试功能</h2><h3 id="1、数据流分析辅助，可以直接预测下面的运行结果"><a href="#1、数据流分析辅助，可以直接预测下面的运行结果" class="headerlink" title="1、数据流分析辅助，可以直接预测下面的运行结果"></a>1、数据流分析辅助，可以直接预测下面的运行结果</h3><p>IDEA 2020.1直接将数据流分析添加到JVM调试器。当程序在断点处停止时，IDEA可以根据程序的当前状态运行数据流分析，来预测下一步将要发生什么。<br><img src="/img/IDEA2020/IDEA2020_27.jpg" alt=""></p><h3 id="2、调试时，支持固定对象字段"><a href="#2、调试时，支持固定对象字段" class="headerlink" title="2、调试时，支持固定对象字段"></a>2、调试时，支持固定对象字段</h3><p>当一个对象字段过多，以致于调试时很难找到需要的字段时，我们可以直接将其置顶，便于查看。<br><img src="/img/IDEA2020/IDEA2020_28.jpg" alt=""></p><h3 id="3、以文件形式存储运行配置"><a href="#3、以文件形式存储运行配置" class="headerlink" title="3、以文件形式存储运行配置"></a>3、以文件形式存储运行配置</h3><p>新版IDEA支持直接将当前的调试/运行的配置存档，并在以后选择重新加载<br><img src="/img/IDEA2020/IDEA2020_29.jpg" alt=""></p><h2 id="更加先进的版本控制"><a href="#更加先进的版本控制" class="headerlink" title="更加先进的版本控制"></a>更加先进的版本控制</h2><p>第一个大的改进就是重新设计了代码提交的窗口，而不再是以前老的那种模态化弹窗式窗口了。这样一来，提交代码时的代码比对，编辑会更加舒适。<br><img src="/img/IDEA2020/IDEA2020_30.jpg" alt=""></p><p>第二个改进就是支持搜索、刷新本地以及远端的代码分支：<br><img src="/img/IDEA2020/IDEA2020_31.jpg" alt=""><br>另外，这个历史日志留痕也是蛮好看的：<br><img src="/img/IDEA2020/IDEA2020_32.jpg" alt=""></p><h2 id="Maven和Gradle导入更新"><a href="#Maven和Gradle导入更新" class="headerlink" title="Maven和Gradle导入更新"></a>Maven和Gradle导入更新</h2><p>此处就以Maven工具为例，编辑器右上角出现的是一个浮动通知。修改构建文件后，可以使用这个迷你的通知图标来加载更改<br><img src="/img/IDEA2020/IDEA2020_33.jpg" alt=""></p><h2 id="数据库处理增强"><a href="#数据库处理增强" class="headerlink" title="数据库处理增强"></a>数据库处理增强</h2><p>新版IDEA内置的数据库管理，现在可以支持将数据导出到Excel（.xlsx）文件，并且直接在编辑器中以文本形式查看<br><img src="/img/IDEA2020/IDEA2020_34.jpg" alt=""></p><h2 id="增强的HTTP-Client"><a href="#增强的HTTP-Client" class="headerlink" title="增强的HTTP Client"></a>增强的HTTP Client</h2><p>升级之后的<code>HTTP Client</code>更加智能，典型的比如：支持自动匹配和补全<br><img src="/img/IDEA2020/IDEA2020_35.jpg" alt=""><br>而且还可以在<code>Contoller</code>代码的左侧，通过快捷的方式来自动生成HTTP请求文件<br><img src="/img/IDEA2020/IDEA2020_36.jpg" alt=""><br>而且对于Spring项目，还可以在底部的<code>Endpoints</code>窗口里来快捷生成HTTP请求文件。<br><img src="/img/IDEA2020/IDEA2020_37.jpg" alt=""></p><h2 id="其他改进"><a href="#其他改进" class="headerlink" title="其他改进"></a>其他改进</h2><p>1、对各种框架的支持改进，比如：<code>Spring WebFlux/Selenium/JMS/Micronaut/RxJava</code>等等</p><p>2、对<code>Docker/Kubernetes</code>的支持改进</p><p>3、对<code>Scala 3</code>的支持</p><p>4、对<code>Android Volley</code>的支持</p><p>5、对<code>JavaScript</code>的改进和支持</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>体验一番之后发现，新版的IDEA 2020.1肉眼可见的改进还是非常多的，挺香。</p><p>不过还有一个实际的问题就是：我一升级之后发现一大票的插件都不能用了，所以周边支持的兼容性还得再等等。</p><p>本文为授权转载<br>IDEA2020新版本体验文章及视频来自个人非常喜欢的、富有经验的b站up主：<a href="https://space.bilibili.com/384068749" target="_blank" rel="noopener">程序羊</a>，<a href="https://www.codesheep.cn/" target="_blank" rel="noopener">羊哥个人博客地址</a>。<br>原文地址：<a href="https://mp.weixin.qq.com/s/Ua4TYlcNntLr-x9WQirHyg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Ua4TYlcNntLr-x9WQirHyg</a> 视频地址：<a href="https://www.bilibili.com/video/BV1MT4y1V76k" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1MT4y1V76k</a><br>注意：部分组件周边可能还不兼容。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装nginx并配置SSL证书</title>
      <link href="/2020/04/05/centos%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/"/>
      <url>/2020/04/05/centos%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="安装nginx的命令"><a href="#安装nginx的命令" class="headerlink" title="安装nginx的命令"></a>安装nginx的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><h2 id="让nginx随系统启动而启动"><a href="#让nginx随系统启动而启动" class="headerlink" title="让nginx随系统启动而启动"></a>让nginx随系统启动而启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动：nginx</span><br><span class="line">停止：nginx -s stop</span><br><span class="line">重载配置：nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="配置SSL证书"><a href="#配置SSL证书" class="headerlink" title="配置SSL证书"></a>配置SSL证书</h2><p>配置路径：/etc/nginx/<br>日志路径：/var/log/nginx<br>打开配置文件<br>在HTTP节点下配置两个server节点，其他不变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server </span><br><span class="line">&#123;</span><br><span class="line">listen 443;</span><br><span class="line">server_name your-domain.com www.your-domain.com;</span><br><span class="line">ssl on;</span><br><span class="line">ssl_certificate  /root/ssl/your-domain.crt;</span><br><span class="line">ssl_certificate_key /root/ssl/your-domain.key;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_buffer_size  128k;</span><br><span class="line">proxy_buffers   32 32k;</span><br><span class="line">proxy_busy_buffers_size 128k;</span><br><span class="line">proxy_pass http://127.0.0.1:912;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name your-domain.com www.your-domain.com;</span><br><span class="line">   rewrite ^(.*)$ https://<span class="variable">$host</span><span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>配置注意：</p><ul><li>your-domain.com替换成你自己的域名</li><li>your-domain.crt和your-domain.key是你的证书文件，换成你自己的证书文件路径(从购买域名地址下载)</li><li>域名解析，增加两个A记录，主机名一个是www的，一个是@，记录值是你服务器的IP地址,详细步骤可以看我的博文-hexo博客</li><li>配置完成之后要重新加载nginx：nginx -s reload</li></ul>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> centos </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六边形架构认识</title>
      <link href="/2020/03/01/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/03/01/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="六边形架构简介"><a href="#六边形架构简介" class="headerlink" title="六边形架构简介"></a>六边形架构简介</h2><p>六边形架构由Alistair Cockburn于2005年提出，相较于传统三层架构方式的缺点————不支持多客户端、不支持多数据库、领域层依赖持久层，六边形架构实现了业务逻辑以一种松耦合的形式与多个外部系统通过“适配器-端口”的形式进行集成。某种意义上六边形架构也是一种分层架构，将架构分为了内部和外部但没有了层的概念。六边形架构也称为端口与适配器，在领域驱动设计（DDD）和微服务架构中都出现了六边形架构的身影。</p><h2 id="六边形架构结构"><a href="#六边形架构结构" class="headerlink" title="六边形架构结构"></a>六边形架构结构</h2><p>六边形架构的六边并不重要，六边只是为了留足空间放置端口和适配器以及用六边形接入多个外部系统视觉上最简洁美观。六边形架构创造者AlistairCockburn最初以六边形来表示这种架构后沿用至今。六边形架构的主要特点是多个适配器和端口形成的划分为内部、外部的架构模式。业务逻辑层可以接入所有满足端口需求的表示层(应用前端、页面)与持久层(数据库)。这种情形可以类比理解java中接口与接口的实现类，所有有满足接口所有方法的类都可以实现接口。<br><img src="/img/六边形架构.png" alt="六边形架构alt"><br>上图六边形架构结构图，其中黑箭头为调用关系，白箭头为实现关系。右侧Message为相关消息机制，多用于微服务架构中多个微服务(六边形架构)之间通信，本文不做太多讨论。<br>由上图可以发现六边形架构的内部(业务逻辑)与外部(APP,WEB,数据库等)完全隔离，只通过adapter适配器进行交互实现了业务逻辑层与持久层的完全解耦，更一步实现“高内聚低耦合”</p><h2 id="各部分解读"><a href="#各部分解读" class="headerlink" title="各部分解读"></a>各部分解读</h2><ul><li><p>输入端口：<br>用于系统提供服务时暴露API接口，接受外部（前端UI界面、其它微服务）的输入。系统作为服务提供者是对外的接入层可以看成是输入端口。</p></li><li><p>输出端口：<br>为系统获取外部服务提供支持，如获取持久化状态、对结果进行持久化(要求对数据库增删改查操作的接口)。</p></li><li><p>业务逻辑：<br>系统服务的实体类，微服务设计中根据用例、服务复杂程度将大项目(服务)划分为多个小团队可处理的小服务重要参照。</p></li></ul><h2 id="软件开发设计"><a href="#软件开发设计" class="headerlink" title="软件开发设计"></a>软件开发设计</h2><p>规范化六边形架构可以如下图所示<br>其中adapter包下为入站、出站适配器，application包下为入站、出站端口其中BookApplicationService为入站端口BookUaseCase接口的实现类，domin包下为业务逻辑层book为实体类。adapter包下JpaBookRepository接口为出站端口BookRepository接口的继承并具备接口的默认实现方法(jdk8特性)。<br><img src="/img/六边形架构开发实例.PNG" alt="六边形架构开发实例"></p>]]></content>
      
      
      <categories>
          
          <category> 架构模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构模式 </tag>
            
            <tag> 六边形架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器运行前后端分离简单实例</title>
      <link href="/2020/02/25/docker%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E7%AE%80%E5%8D%95%E5%89%8D%E5%90%8E%E7%AB%AF%E7%BB%93%E5%90%88%E5%AE%9E%E4%BE%8B/"/>
      <url>/2020/02/25/docker%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E7%AE%80%E5%8D%95%E5%89%8D%E5%90%8E%E7%AB%AF%E7%BB%93%E5%90%88%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>Docker是一种运行于Linux和Windows上的软件，用于创建、管理和编排容器。Docker是在GitHub上开发的Moby开源项目的一部分。<a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker官方文档</a> <a href="http://www.docker.org.cn/page/resources.html" target="_blank" rel="noopener">Docker中文社区</a>(ps:别忘配置加速器Docker图标》Settings》Docker Engine)</p><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><p>springboot项目，非常简单的演示后端，注解代码实现获取/hello/路径后的string类型数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package iteach.docker.service.spring.docker;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringHelloApplication &#123;</span><br><span class="line"></span><br><span class="line">    @CrossOrigin</span><br><span class="line">    @GetMapping(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">    public String hello(@PathVariable String name) &#123;</span><br><span class="line">        <span class="built_in">return</span> String.format(<span class="string">"Hello,%s!"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringHelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Docker与后端应用"><a href="#Docker与后端应用" class="headerlink" title="Docker与后端应用"></a>Docker与后端应用</h2><h3 id="Docker创建后端镜像"><a href="#Docker创建后端镜像" class="headerlink" title="Docker创建后端镜像"></a>Docker创建后端镜像</h3><p>1、将后端项目打成jar包，可以在命令行工具（这里使用的是powershell）进入到jar包生成路径运行java -jar .\jar包名.jar\检验jar包是否能运行<br>2、新建一个文件夹，文件夹下放置jar包和新建一个名为Dockerfile的文件不可改名。<br>3、Dockerfile内容,可以将jdk改为jre这样安装的镜像更小更快<br><img src="/img/backend.png" alt="运行结果"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:11</span><br><span class="line">ADD spring-hello.jar app.jar</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"app.jar"</span>]</span><br></pre></td></tr></table></figure><br>4、命令行工具在该目录下输入(文章最后总结解释各个指令作用)<br>拉取镜像(在放置Dockerfile文件处执行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t spring-hello .</span><br></pre></td></tr></table></figure></p><h3 id="Docker创建容器并运行"><a href="#Docker创建容器并运行" class="headerlink" title="Docker创建容器并运行"></a>Docker创建容器并运行</h3><p>命令行工具输入，创建容器运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name hello-backend -d -p 8000:8080 spring-hello</span><br></pre></td></tr></table></figure><br>获取运行结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-RestMethod http://localhost:8000/hello/xz</span><br></pre></td></tr></table></figure><br><img src="/img/backend2.png" alt="运行结果">  </p><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"sender"</span>&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"name"</span> /&gt;</span><br><span class="line">&lt;button @click=<span class="string">"send"</span>&gt;发送&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"greeting"</span>&gt;</span><br><span class="line">&lt;p style=<span class="string">"margin-bottom: 0;"</span>&gt;Vue: &#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">"margin-top: 0;"</span>&gt;Spring: &#123;&#123; greeting &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123; name: <span class="string">"App"</span>,</span><br><span class="line"><span class="function"><span class="title">data</span></span>() &#123; <span class="built_in">return</span> &#123;</span><br><span class="line">name: <span class="string">""</span>, greeting: <span class="string">""</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="function"><span class="title">send</span></span>() &#123; // Axios Promise </span><br><span class="line">fetch(`http://localhost:8000/hello/<span class="variable">$&#123;this.name&#125;</span>`)</span><br><span class="line">.<span class="keyword">then</span>(response =&gt; &#123; <span class="built_in">return</span> response.text();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(text =&gt; (this.greeting = text))</span><br><span class="line">.catch(error =&gt; console.log(error));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Docker与前端应用"><a href="#Docker与前端应用" class="headerlink" title="Docker与前端应用"></a>Docker与前端应用</h2><p>注意：这里演示使用的是Vue框架，文件名为hello-vue,使用服务器为nginx.</p><h3 id="Docker创建前端镜像"><a href="#Docker创建前端镜像" class="headerlink" title="Docker创建前端镜像"></a>Docker创建前端镜像</h3><p>新建Dockerfile文件，文件内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"><span class="comment"># 更多请参考https://hub.docker.com/_/nginx/</span></span><br><span class="line">COPY ./hello /usr/share/nginx/html</span><br></pre></td></tr></table></figure></p><h3 id="Docker创建容器并运行-1"><a href="#Docker创建容器并运行-1" class="headerlink" title="Docker创建容器并运行"></a>Docker创建容器并运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hello-vue . </span><br><span class="line">docker run --name hello-frontend -d -p 80:80 hello-vue</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/img/result1.png" alt="运行结果"></p><h2 id="Docker-compose一次运行两个容器"><a href="#Docker-compose一次运行两个容器" class="headerlink" title="Docker-compose一次运行两个容器"></a>Docker-compose一次运行两个容器</h2><p>避免干扰测试建议停止并删除之前运行的容器，指令行在文章末尾<br>1、命令行工具输入code docker-compose.yml 创建docker-compose文件<br>2、docker-compose.yml编译内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  frontend:</span><br><span class="line">    image: hello-vue</span><br><span class="line">    ports:</span><br><span class="line">    - 80:80 </span><br><span class="line">    depends_on:</span><br><span class="line">    - backend</span><br><span class="line">  backend:</span><br><span class="line">    image: spring-hello</span><br><span class="line">    ports:</span><br><span class="line">    - 8000:8080</span><br></pre></td></tr></table></figure><br>3、命令行工具输入运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose.exe up</span><br></pre></td></tr></table></figure><br><img src="/img/image.png" alt="镜像"><br><img src="/img/container.png" alt="容器"><br>4、运行结果<br><img src="/img/result2.png" alt="运行结果"></p><h2 id="Docker基础指令"><a href="#Docker基础指令" class="headerlink" title="Docker基础指令"></a>Docker基础指令</h2><p>下面是这篇文章运用的docker指令集合方便观看<br>Docker构建镜像(spring-hello为镜像名，-t为容器重新分配一个伪输入终端)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t spring-hello .</span><br></pre></td></tr></table></figure><br>Docker运行容器(hello-backend为容器名，-d表示后台运行容器并返回容器ID，-p表示端口号，spring-hello为已搭建的镜像名)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name hello-backend -d -p 8000:8080 spring-hello</span><br></pre></td></tr></table></figure><br>显示已安装镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><br>显示所有容器与显示正在运行容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><br>停止容器、删除容器、删除镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名</span><br><span class="line">docker rm 容器名</span><br><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure><br>获取网页内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-RestMethod http://localhost:8000/hello/xz</span><br></pre></td></tr></table></figure><br>创建docker-compose文件与运行该文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code docker-compose.yml</span><br><span class="line">docker-compose.exe up</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客配置及个人网站部署</title>
      <link href="/2019/12/25/hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/25/hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Hexo"><a href="#一、Hexo" class="headerlink" title="一、Hexo"></a>一、Hexo</h2><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a>本文简化列举Hexo框架搭建基础步骤<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>安装前确保电脑安装了<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p><ul><li>必备的应用程序安装完后，鼠标右键点击Git Bash Here进行git命令行操作。<br><img src="/img/Gitbash.PNG" alt="Git Bash alt"></li><li>输入安装指令  </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>输入以下指令建站，folder为自定义文件名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h3><p>建站完成后生成以下文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><h3 id="各个文件作用"><a href="#各个文件作用" class="headerlink" title="各个文件作用"></a>各个文件作用</h3><ul><li>_config.yml<br>网站的配置信息，基于markdown语言，在此配置大部分的参数。</li><li>package.json<br>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，可以自由移除。</li><li>scaffolds<br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改 scaffold/post.md 中的 Front-matter 内容，那么每次新建一篇文章时都会包含这个修改。</li><li>source<br>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li><li>themes<br>主题 文件夹。Hexo 会根据主题来生成静态页面。  </li></ul><h3 id="网站配置与基础指令"><a href="#网站配置与基础指令" class="headerlink" title="网站配置与基础指令"></a>网站配置与基础指令</h3><ul><li>config文件中记录网站参数 相关参数介绍<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">Hexo官方文档</a></li><li>基础指令：<br><strong>new</strong><br>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>-<br><strong>generate</strong><br>生成静态文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></li></ul><p><strong>server</strong><br>启动服务器。可简写为hexo s,默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p><strong>clean</strong><br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>文件夹进入指令new新建的.md文件，使用文本编辑器编译，个人推荐Sublime Text 3。进入后基于markdown语法进行写作。Hexo官方文档也有写作方法。完成博客编写后可在命令行输入<br>hexo s进入<a href="http://localhost:4000/页面查看编写结果。" target="_blank" rel="noopener">http://localhost:4000/页面查看编写结果。</a>    </p><h3 id="hexo主题选择"><a href="#hexo主题选择" class="headerlink" title="hexo主题选择"></a>hexo主题选择</h3><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题选择界面</a>找到心仪的主题后，查找该主题的文档按要求进行操作,亦可留言作者求助。  </p><h2 id="部署到个人网站"><a href="#部署到个人网站" class="headerlink" title="部署到个人网站"></a>部署到个人网站</h2><p>这里建议并演示Github仓库Gitpage功能搭建。</p><h3 id="github仓库管理"><a href="#github仓库管理" class="headerlink" title="github仓库管理"></a>github仓库管理</h3><p>1、新建仓库，于个人主页面如图位置创建新的远程仓库<br><img src="/img/newrepository.PNG" alt="New Repository alt"></p><p>2、仓库命名，按下图要求命名(github.io前与左侧owner名一致，github.io不可改)<br><img src="/img/rename.PNG" alt="Repository Name alt"></p><p>3、填写完后点击页面最下面的create按钮，于下图位置点击复制按钮<br><img src="/img/copy.PNG" alt="https/ssh alt"></p><p>4、黏贴复制的内容，修改_config.yml文件下图位置的配置(不同主题可能有些许小不同但命名基本相同),修改url、root、type、branch、github这几处。<br><img src="/img/deploy.PNG" alt="deploy alt"><br><img src="/img/url.PNG" alt="url alt"></p><p>5、进入本地博客文件夹git bash,安装 hexo-deployer-git 输入npm install hexo-deployer-git —save安装完成后依次输入hexo g(生成静态文件)、hexo d(部署到服务器)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">一般流程：</span><br><span class="line">hexo g 生成静态资源</span><br><span class="line">hexo d 部署</span><br><span class="line">hexo clean 清除静态缓存</span><br><span class="line">hexo s启动服务</span><br></pre></td></tr></table></figure><p>完成上述操作后可在地址 ownername.github.io 查看页面效果</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>若想部署到自己的域名则按下列操作<br>1、ping获取github上部署的博客页面ip地址<br><img src="/img/ping.PNG" alt="ping alt"></p><p>2、github仓库设置(save前为自己的域名地址,不要留https://)<br>在你的博客仓库找到如图所示位置进行设置<br><img src="/img/Settings.PNG" alt="Setting alt"><br><img src="/img/save.PNG" alt="Save alt"></p><p>3、服务器控制台解析,按下图配置即可，ip地址为第一步ping的地址<br><img src="/img/解析.PNG" alt="解析 alt"><br>完成后去自己的域名看看把~</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2019/11/01/Hexo-Theme-Snail/"/>
      <url>/2019/11/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache License 2.0 Copyright(c) 2018-2020 <a href="https://github.com/dusign" target="_blank" rel="noopener">Dusign</a>   </p><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">hexo-theme-snail</a> is derived from <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro</a> Apache License 2.0. Copyright (c) 2015-2020 Huxpro</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot注解代码Annotation整合</title>
      <link href="/2019/10/01/Annotation/"/>
      <url>/2019/10/01/Annotation/</url>
      
        <content type="html"><![CDATA[<p>常见注解代码集合，方便以后查阅，后续持续更新。</p><h2 id="Annotation简介"><a href="#Annotation简介" class="headerlink" title="Annotation简介"></a>Annotation简介</h2><ul><li><p>从Java1.5开始，Java增加了元数据（MetaData）的支持，也就是Annotation（注释）；</p></li><li><p>Annotation能被用来为程序元素（类、方法、成员变量等）设置元数据；</p></li><li><p>Annotation不能影响程序代码的执行，无论添加、删除Annotation，代码始终如一的执行；</p></li><li><p>如果希望让程序中的Annotataion能在 运行时其一定作用，只有通过某种配套的工具对Annotation中的信息进行访问和处理，这些工具统称APT（Annotion Processing Tool）； </p></li></ul><h2 id="Annotation基本注解"><a href="#Annotation基本注解" class="headerlink" title="Annotation基本注解"></a>Annotation基本注解</h2><ul><li><p>@Override：限定重写父类方法,验证@Override下面的方法名是否是你父类中所有的，如果没有则报错，避免方法名错误。</p></li><li><p>@Deprecated：标记已过时,用于标识某个程序元素（类、方法等）已过时，当其他程序使用已过时的类、方法时，编译器将会给出警告。该方法不可再调用。</p></li><li><p>@SuppressWarnings：抑制编译器警告,指示被Annotation标识的程序元素（以及在该程序元素中的所有字元素）取消显示指定的编译器警告；一直作用于该程序元素的所有子元素；</p></li></ul><h2 id="lombok基本注解"><a href="#lombok基本注解" class="headerlink" title="lombok基本注解"></a>lombok基本注解</h2><ul><li><p>@Data:使用这个注解，就不用再去手写Getter,Setter,equals,canEqual,hasCode,toString等方法了，注解后在编译时会自动加进去。</p></li><li><p>@AllArgsConstructor:使用后添加一个构造函数，该构造函数含有所有已声明字段属性参数。</p></li><li><p>@NoArgsConstructor:使用后创建一个无参构造函数。</p></li><li><p>@Builder:解决某个类有很多构造函数的情况，省去写很多构造函数的麻烦。用一个内部类去实例化一个对象，避免一个类出现过多构造函数。</p></li><li><p>@NonNull：注解在属性上，如果注解了，就必须不能为Null。</p></li><li><p>@toString:生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割。</p></li></ul><h2 id="注解-annotations-列表"><a href="#注解-annotations-列表" class="headerlink" title="注解(annotations)列表"></a>注解(annotations)列表</h2><ul><li><p>@SpringBootApplication：包含了@ComponentScan、@Configuration和@EnableAutoConfiguration注解。其中@ComponentScan让spring Boot扫描到Configuration类并把它加入到程序上下文。</p></li><li><p>@Configuration 等同于spring的XML配置文件；使用Java代码可以检查类型安全。</p></li><li><p>@EnableAutoConfiguration 自动配置。</p></li><li><p>@ComponentScan 组件扫描，可自动发现和装配一些Bean。</p></li><li><p>@Component可配合CommandLineRunner使用，在程序启动后执行一些基础任务。</p></li><li><p>@RestController注解是@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。</p></li><li><p>@Autowired自动导入。</p></li><li><p>@PathVariable获取参数。</p></li><li><p>@JsonBackReference解决嵌套外链问题。</p></li><li><p>@RepositoryRestResourcepublic配合spring-boot-starter-data-rest使用。</p></li></ul><h2 id="注解-annotations-详解-SpringBootApplication："><a href="#注解-annotations-详解-SpringBootApplication：" class="headerlink" title="注解(annotations)详解@SpringBootApplication："></a>注解(annotations)详解@SpringBootApplication：</h2><ul><li><p>@SpringBootApplication：申明让spring boot自动给程序进行必要的配置，这个配置等同于：@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置。</p></li><li><p>@ResponseBody：表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。在使用@RequestMapping后，返回值通常解析为跳转路径，加上@esponsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。</p></li><li><p>@Controller：用于定义控制器类对Controller实现类进行标注，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层），一般这个注解在类中，通常方法需要配合注解@RequestMapping。</p></li><li><p>@RestController：用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。</p></li><li><p>@RequestMapping：提供路由信息，负责URL到Controller中的具体函数的映射<br>@GetMapping：是@RequestMapping(method = RequestMethod.GET)的缩写。该注解将HTTP Get 映射到 特定的处理方法上。大白话即：根据HTTP地址映射调用Controller对应方法<br>@PostMapping:向服务器提交信息,即客户端信息返回给服务器端。<br>@PutMapping：作用与@PostMapping类似，用@PutMapping倾向于更新信息。<br>@DeleteMapping： 删除URL映射</p></li><li><p>@EnableAutoConfiguration：SpringBoot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性来禁用它们。</p></li><li><p>@ComponentScan：其实很简单，@ComponentScan主要就是定义扫描的路径从中找出标识了需要装配的类自动装配到spring的bean容器中,你一定都有用过@Controller，@Service，@Repository注解，查看其源码你会发现，他们中有一个共同的注解@Component，没错@ComponentScan注解默认就会装配标识了@Controller，@Service，@Repository，@Component注解的类到spring容器中。当然，这个的前提就是你需要在所扫描包下的类上引入注解。</p></li><li><p>@Configuration：相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。</p></li><li><p>@Import：用来导入其他配置类。</p></li><li><p>@ImportResource：用来加载xml配置文件。</p></li><li><p>@Autowired：自动导入依赖的bean,byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。</p></li><li><p>@Service：一般用于修饰service层的组件用于对Service实现类进行标注,（注入dao）用于标注服务层，主要用来进行业务的逻辑处理.</p></li><li><p>@Repository：使用@Repository注解可以确保DAO或者repositories提供异常转译实现dao访问，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项,用于对DAO实现类进行标注。</p></li><li><p>@Bean：用@Bean标注方法等价于XML中配置的bean,相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p></li><li><p>@Value：注入Spring boot application.properties配置的属性的值。示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(value = “<span class="comment">#&#123;message&#125;”)</span></span><br><span class="line">private String message;</span><br></pre></td></tr></table></figure></li><li><p>@Inject：等价于默认的@Autowired，只是没有required属性；</p></li><li><p>@Component：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。带此注解的类看为组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。</p></li><li><p>@Qualifier：当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">@Qualifier(value = “demoInfoService”)</span><br><span class="line">private DemoInfoService demoInfoService;</span><br></pre></td></tr></table></figure></li><li>@Resource(name=”name”,type=”type”)：没有括号内内容的话，默认byName。与@Autowired干类似的事。<br>-<br>@Resource有两个常用属性name、type，所以分4种情况：<br>1、指定name和type：通过name找到唯一的bean，找不到抛出异常；如果type和字段类型不一致，也会抛出异常<br>2、指定name：通过name找到唯一的bean，找不到抛出异常<br>3、指定type：通过tpye找到唯一的bean，如果不唯一，则抛出异常：NoUniqueBeanDefinitionException<br>4、都不指定：通过字段名作为key去查找，找到则赋值；找不到则再通过字段类型去查找，如果不唯一，则抛出异常：NoUniqueBeanDefinitionException</li></ul><p>@Autowired<br>1、@Autowired只有一个属性required，默认值为true，为true时，找不到就抛异常，为false时，找不到就赋值为null。<br>2、@Autowired按类型查找，如果该类型的bean不唯一，则抛出异常；可通过组合注解解决@Autowired()@Qualifier(“baseDao”)</p><p>不同点：<br>Resource是JDK提供的，而Autowired是Spring提供的<br>Resource不允许找不到bean的情况，而Autowired允许（@Autowired(required = false)）<br>指定name的方式不一样，@Resource(name = “baseDao”),@Autowired()@Qualifier(“baseDao”)<br>Resource默认通过name查找，而Autowired默认通过type查找</p><h2 id="JPA注解"><a href="#JPA注解" class="headerlink" title="JPA注解"></a>JPA注解</h2><ul><li><p>@Entity：@Table(name=”“)：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略</p></li><li><p>@Table 当实体类与其映射的数据库表名不同名时需要使用，声明此对象映射到数据库的数据表，通过它可以为实体指定表(talbe)。</p></li><li><p>@MappedSuperClass:用在确定是父类的entity上。父类的属性子类可以继承。</p></li><li><p>@NoRepositoryBean:一般用作父类的repository，有这个注解，spring不会去实例化该repository。</p></li><li><p>@Column：用来标识实体类中属性与数据表中字段的对应关系。如果字段名与列名相同，则可以省略。</p></li><li><p>@Id：表示该属性为主键。</p></li><li><p>@GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)：表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。</p></li><li><p>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。</p></li><li><p>@Transient：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式</p></li><li><p>@JsonIgnore：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。</p></li><li><p>@JoinColumn（name=”loginId”）:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。</p></li><li><p>@OneToOne、@OneToMany、@ManyToOne：对应hibernate配置文件中的一对一，一对多，多对一。</p></li></ul><h2 id="springMVC相关注解"><a href="#springMVC相关注解" class="headerlink" title="springMVC相关注解"></a>springMVC相关注解</h2><ul><li><p>@RequestMapping：@RequestMapping(“/path”)表示该控制器处理所有“/path”的UR L请求。RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。<br>用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。该注解有六个属性：<br>params:指定request中必须包含某些参数值是，才让该方法处理。<br>headers:指定request中必须包含某些指定的header值，才能让该方法处理请求。<br>value:指定请求的实际地址，指定的地址可以是URI Template 模式<br>method:指定请求的method类型， GET、POST、PUT、DELETE等<br>consumes:指定处理请求的提交内容类型（Content-Type），如application/json,text/html;<br>produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</p></li><li><p>@RequestParam：用在方法的参数前面。将请求参数绑定到你控制器的方法参数上（是springmvc中接收普通参数的注解）<br>接收请求地址末尾为？(value的参数名)的请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法：@RequestParam(value=”参数名”,required=”<span class="literal">true</span>/<span class="literal">false</span>”,defaultValue=””)</span><br><span class="line"> </span><br><span class="line">value：参数名</span><br><span class="line"> </span><br><span class="line">required：是否包含该参数，默认为<span class="literal">true</span>，表示该请求路径中必须包含该参数，如果不包含就报错。</span><br><span class="line"></span><br><span class="line">defaultValue：默认参数值，如果设置了该值，required=<span class="literal">true</span>将失效，自动为<span class="literal">false</span>,如果没有传该参数，就使用默认值</span><br><span class="line">@RequestMapping(<span class="string">"/list"</span>)</span><br><span class="line">public String <span class="built_in">test</span>(@RequestParam(value = <span class="string">"userId"</span>, defaultValue = <span class="string">"0"</span>, required = <span class="literal">false</span>) int userId) &#123;</span><br><span class="line">　　<span class="built_in">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>@PathVariable:路径变量。参数与大括号里的名字一样要相同.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestMapping(“user/get/mac/&#123;macAddress&#125;”)</span><br><span class="line">  2 public String getByMacAddress(@PathVariable String macAddress)&#123;</span><br><span class="line">  3    //<span class="keyword">do</span> something; </span><br><span class="line">  4 &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><ul><li><p>@ControllerAdvice：包含@Component。可以被扫描到。统一处理异常。</p></li><li><p>@ExceptionHandler（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。</p></li></ul><h2 id="项目中具体配置解析和使用环境"><a href="#项目中具体配置解析和使用环境" class="headerlink" title="项目中具体配置解析和使用环境"></a>项目中具体配置解析和使用环境</h2><ul><li>@MappedSuperclass：<br>1.@MappedSuperclass 注解使用在父类上面，是用来标识父类的</li></ul><p>2.@MappedSuperclass 标识的类表示其不能映射到数据库表，因为其不是一个完整的实体类，但是它所拥有的属性能够映射在其子类对用的数据库表中</p><p>3.@MappedSuperclass 标识的类不能再有@Entity或@Table注解</p><ul><li>@Column：<br>1.当实体的属性与其映射的数据库表的列不同名时需要使用@Column标注说明，该属性通常置于实体的属性声明语句之前，还可与 @Id 标注一起使用。</li></ul><p>2.@Column 标注的常用属性是name，用于设置映射数据库表的列名。此外，该标注还包含其它多个属性，如：unique、nullable、length、precision等。具体如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name属性：name属性定义了被标注字段在数据库表中所对应字段的名称</span><br><span class="line">unique属性：unique属性表示该字段是否为唯一标识，默认为<span class="literal">false</span>，如果表中有一个字段需要唯一标识，则既可以使用该标记，也可以使用@Table注解中的@UniqueConstraint</span><br><span class="line">nullable属性：nullable属性表示该字段是否可以为null值，默认为<span class="literal">true</span></span><br><span class="line">insertable属性：insertable属性表示在使用”INSERT”语句插入数据时，是否需要插入该字段的值</span><br><span class="line">updateable属性：updateable属性表示在使用”UPDATE”语句插入数据时，是否需要更新该字段的值</span><br><span class="line">insertable和updateable属性：一般多用于只读的属性，例如主键和外键等，这些字段通常是自动生成的</span><br><span class="line">columnDefinition属性：columnDefinition属性表示创建表时，该字段创建的SQL语句，一般用于通过Entity生成表定义时使用，如果数据库中表已经建好，该属性没有必要使用</span><br><span class="line">table属性：table属性定义了包含当前字段的表名</span><br><span class="line">length属性：length属性表示字段的长度，当字段的类型为varchar时，该属性才有效，默认为255个字符</span><br><span class="line">precision属性和scale属性：precision属性和scale属性一起表示精度，当字段类型为double时，precision表示数值的总长度，scale表示小数点所占的位数</span><br><span class="line">    具体如下：</span><br><span class="line">   1.double类型将在数据库中映射为double类型，precision和scale属性无效</span><br><span class="line">   2.double类型若在columnDefinition属性中指定数字类型为decimal并指定精度，则最终以columnDefinition为准</span><br><span class="line">   3.BigDecimal类型在数据库中映射为decimal类型，precision和scale属性有效</span><br><span class="line">   4.precision和scale属性只在BigDecimal类型中有效</span><br></pre></td></tr></table></figure><br>3.@Column 标注的columnDefinition属性: 表示该字段在数据库中的实际类型.通常 ORM 框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR,如果要将 String 类型映射到特定数据库的 BLOB 或TEXT字段类型.</p><p>4.@Column标注也可置于属性的getter方法之前</p><ul><li>@PreUpdate和@PrePersist:<br>@PreUpdate<br>1.用于为相应的生命周期事件指定回调方法。<br>2.该注释可以应用于实体类，映射超类或回调监听器类的方法。<br>3.用于setter 如果要每次更新实体时更新实体的属性，可以使用@PreUpdate注释。<br>4.使用该注释，您不必在每次更新用户实体时显式更新相应的属性。<br>5.preUpdate不允许您更改您的实体。 您只能使用传递给事件的计算的更改集来修改原始字段值。<br>@Prepersist<br>1.查看@PrePersist注释，帮助您在持久化之前自动填充实体属性。<br>2.可以用来在使用jpa的时记录一些业务无关的字段，比如最后更新时间等等。生命周期方法注解（delete没有生命周期事件）<br>3.@PrePersist save之前被调用，它可以返回一个DBObject代替一个空的 @PostPersist save到datastore之后被调用<br>4.@PostLoad 在Entity被映射之后被调用 @EntityListeners 指定外部生命周期事件实现类<br>实体Bean生命周期的回调事件:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">方法的标注： @PrePersist @PostPersist @PreRemove @PostRemove @PreUpdate @PostUpdate @PostLoad 。</span><br><span class="line">它们标注在某个方法之前，没有任何参数。这些标注下的方法在实体的状态改变前后时进行调用，相当于拦截器;</span><br><span class="line">pre 表示在状态切换前触发，post 则表示在切换后触发。 </span><br><span class="line">@PostLoad 事件在下列情况触发： </span><br><span class="line">1. 执行 EntityManager.find()或 getreference()方法载入一个实体后； </span><br><span class="line">2. 执行 JPA QL 查询过后； </span><br><span class="line">3. EntityManager.refresh( )方法被调用后。 </span><br><span class="line">@PrePersist 和 @PostPersist事件在实体对象插入到数据库的过程中发生;</span><br><span class="line">@PrePersist 事件在调用 EntityManager.persist()方法后立刻发生，级联保存也会发生此事件，此时的数据还没有真实插入进数据库。</span><br><span class="line">@PostPersist 事件在数据已经插入进数据库后发生。</span><br><span class="line">@PreUpdate 和 @PostUpdate 事件的触发由更新实体引起, @PreUpdate 事件在实体的状态同步到数据库之前触发，此时的数据还没有真实更新到数据库。</span><br><span class="line">@PostUpdate 事件在实体的状态同步到数据库后触发，同步在事务提交时发生。 </span><br><span class="line">@PreRemove 和 @PostRemove 事件的触发由删除实体引起，@ PreRemove 事件在实体从数据库删除之前触发，即调用了 EntityManager.remove()方法或者级联删除</span><br><span class="line"></span><br><span class="line">当你在执行各种持久化方法的时候，实体的状态会随之改变，状态的改变会引发不同的生命周期事件。这些事件可以使用不同的注释符来指示发生时的回调函数。</span><br><span class="line">@javax.persistence.PostLoad：加载后。</span><br><span class="line">@javax.persistence.PrePersist：持久化前。</span><br><span class="line">@javax.persistence.PostPersist：持久化后。</span><br><span class="line">@javax.persistence.PreUpdate：更新前。</span><br><span class="line">@javax.persistence.PostUpdate：更新后。</span><br><span class="line">@javax.persistence.PreRemove：删除前。</span><br><span class="line">@javax.persistence.PostRemove：删除后。</span><br></pre></td></tr></table></figure><img src="/img/Bean.jpg" alt="实体Bean生命周期"><br>1）数据库查询</li></ul><p>@PostLoad事件在下列情况下触发：</p><p>执行EntityManager.find()或getreference()方法载入一个实体后。</p><p>执行JPQL查询后。</p><p>EntityManager.refresh()方法被调用后。</p><p>2）数据库插入</p><p>@PrePersist和@PostPersist事件在实体对象插入到数据库的过程中发生：</p><p>@PrePersist事件在调用persist()方法后立刻发生，此时的数据还没有真正插入进数据库。</p><p>@PostPersist事件在数据已经插入进数据库后发生。</p><p>3）数据库更新</p><p>@PreUpdate和@PostUpdate事件的触发由更新实体引起：</p><p>@PreUpdate事件在实体的状态同步到数据库之前触发，此时的数据还没有真正更新到数据库。</p><p>@PostUpdate事件在实体的状态同步到数据库之后触发，同步在事务提交时发生。</p><p>4）数据库删除</p><p>@PreRemove和@PostRemove事件的触发由删除实体引起：</p><p>@PreRemove事件在实体从数据库删除之前触发，即在调用remove()方法删除时发生，此时的数据还没有真正从数据库中删除。</p><p>@PostRemove事件在实体从数据库中删除后触发。</p><h2 id="使用-Configuration注解来代替Spring的bean配置"><a href="#使用-Configuration注解来代替Spring的bean配置" class="headerlink" title="使用@Configuration注解来代替Spring的bean配置"></a>使用@Configuration注解来代替Spring的bean配置</h2><ul><li><p>Spring配置文件（application-config.xml）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">        &lt;bean id=<span class="string">"orderService"</span> class=<span class="string">"com.acme.OrderService"</span>/&gt;</span><br><span class="line">                &lt;constructor-arg ref=<span class="string">"orderRepository"</span>/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">        &lt;bean id=<span class="string">"orderRepository"</span> class=<span class="string">"com.acme.OrderRepository"</span>/&gt;</span><br><span class="line">                &lt;constructor-arg ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>Spring Java @Configuratio通过java代码来装配bean的方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ApplicationConfig &#123;</span><br><span class="line"></span><br><span class="line">        public @Bean OrderService <span class="function"><span class="title">orderService</span></span>() &#123;</span><br><span class="line">                <span class="built_in">return</span> new OrderService(orderRepository());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public @Bean OrderRepository <span class="function"><span class="title">orderRepository</span></span>() &#123;</span><br><span class="line">                <span class="built_in">return</span> new OrderRepository(dataSource());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用bean</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaConfigApplicationContext ctx = new JavaConfigApplicationContext(ApplicationConfig.class);</span><br><span class="line">OrderService orderService = ctx.getBean(OrderService.class);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Annotation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
            <tag> 注解代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Git上传、更新、删除GitHub仓库文件</title>
      <link href="/2019/08/19/%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4%20GitHub%20%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/"/>
      <url>/2019/08/19/%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4%20GitHub%20%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>本文为转载CSDN博主<a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind" target="_blank" rel="noopener">ZY-JIMMY</a>的文章,感谢博主转载允许</p><h2 id="创建GitHub代码仓库"><a href="#创建GitHub代码仓库" class="headerlink" title="创建GitHub代码仓库"></a>创建GitHub代码仓库</h2><p>首先在GitHub上创建自己的仓库，进入GitHub官网并登陆，点击 <code>New repository</code> 如下图<br><img src="/img/GitHub1.png" alt=""><br>然后输入自己的仓库名称及仓库说明，输入完毕后点击 <code>Create repository</code></p><blockquote><p>Repository name: 仓库名称<br>Description(可选): 仓库描述介绍<br>Public, Private : 仓库权限（公开共享，私有或指定合作者）<br>Initialize this repository with a README: 添加一个README.md<br>gitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignore<br>license: 证书类型，对应生成文件LICENSE<br><img src="/img/GitHub2.png" alt=""><br>如下图所示，建立好了一个代码仓库，可将项目的文件、文件夹通过 Git 上传至此<br><img src="/img/GitHub3.png" alt=""></p></blockquote><h2 id="获取Git"><a href="#获取Git" class="headerlink" title="获取Git"></a>获取Git</h2><p>在Git官网下载最新版本的Git软件安装到本地：<a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">https://www.git-scm.com/download/</a></p><h2 id="上传本地项目文件到GitHub新建仓库"><a href="#上传本地项目文件到GitHub新建仓库" class="headerlink" title="上传本地项目文件到GitHub新建仓库"></a>上传本地项目文件到GitHub新建仓库</h2><p>点击<code>Clone or dowload</code>会出现一个地址，copy这个地址备用。<br><img src="/img/GitHub4.png" alt=""><br>接下来回到本地操作，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为<em>Git Gui Here</em>,<em>Git Bash Here</em>,这里我们选择<code>Git Bash Here</code>，进入如下界面，Bank即为我的项目名。<br><img src="/img/GitHub5.png" alt=""><br>接下来输入如下命令（<code>关键步骤</code>），把github上面的仓库克隆到本地<br><code>git clone 仓库地址</code><br><img src="/img/GitHub6.png" alt=""><br>进入本地项目文件夹，其中会多出一个和github上面的仓库名相同的文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹）都复制到那个新多出的文件夹下<br><img src="/img/GitHub7.png" alt=""><br>输入命令<code>cd 仓库名称</code>，进入本地仓库文件夹<br><img src="/img/GitHub8.png" alt=""><br>接下来依次输入以下代码即可完成其他剩余操作：<br>git add .        （后面的 . 是把该文件夹下面的文件都添加进来）</p><p>git commit  -m  “提交信息”  （“提交信息”是自定义的，如“first commit”）</p><p>git pull origin master    （先使用pull，进行合并然后再进行push，即先使用pull将远程文件同步下来。）</p><p>git push -u origin master   （此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）<br><img src="/img/GitHub9.png" alt=""><br><img src="/img/GitHub10.png" alt=""><br><img src="/img/GitHub11.png" alt=""><br>完成以上步骤后，查看代码仓库会发现项目已经上传成功<br><img src="/img/GitHub12.png" alt=""><br>上传本地项目文件到GitHub已有代码仓库<br>上传文件夹：参考<a href="https://blog.csdn.net/geerniya/article/details/79552247、" target="_blank" rel="noopener">https://blog.csdn.net/geerniya/article/details/79552247、</a>  <a href="https://blog.csdn.net/weixin_42350212/article/details/80560272" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42350212/article/details/80560272</a></p><p>备注：<br>hexo g 生成静态资源<br>hexo d 部署<br>hexo clean 清除静态缓存<br>hexo s启动服务</p><p>执行git命令时出现fatal: ‘origin’ does not appear to be a git repository错误<br>git remote add origin git@github.com:raineddown/raineddown.github.io.git<br> 将关联远程仓库为origin</p><p> [rejected] master -&gt; master (non-fast-forward)<br>git pull origin master —allow-unrelated-histories //把远程仓库和本地同步，消除差异</p><p>修改分支：<br>git checkout -b xxxx</p><p>git push 失败解决方法：<a href="https://blog.csdn.net/Ltime/article/details/70224456" target="_blank" rel="noopener">https://blog.csdn.net/Ltime/article/details/70224456</a><br><img src="/img/GitHub13.png" alt=""><br><img src="/img/GitHub14.png" alt=""><br><img src="/img/GitHub15.png" alt=""></p><p>上传文件<br><img src="/img/GitHub16.png" alt=""><br><img src="/img/GitHub17.png" alt=""></p><h2 id="使用Git更新GitHub仓库文件"><a href="#使用Git更新GitHub仓库文件" class="headerlink" title="使用Git更新GitHub仓库文件"></a>使用Git更新GitHub仓库文件</h2><p>参考：<a href="https://blog.csdn.net/asuna_yu/article/details/80174011" target="_blank" rel="noopener">https://blog.csdn.net/asuna_yu/article/details/80174011</a><br><img src="/img/GitHub18.png" alt=""><br><img src="/img/GitHub19.png" alt=""></p><h2 id="使用Git删除Github仓库文件夹"><a href="#使用Git删除Github仓库文件夹" class="headerlink" title="使用Git删除Github仓库文件夹"></a>使用Git删除Github仓库文件夹</h2><p>参考：<a href="https://blog.csdn.net/luocheng7430/article/details/81222231" target="_blank" rel="noopener">https://blog.csdn.net/luocheng7430/article/details/81222231</a><br>     <a href="https://www.cnblogs.com/crazyStar/articles/7354894.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazyStar/articles/7354894.html</a><br><img src="/img/GitHub20.png" alt=""><br><img src="/img/GitHub21.png" alt=""><br><img src="/img/GitHub22.png" alt=""><br><img src="/img/GitHub23.png" alt=""><br><img src="/img/GitHub24.png" alt=""></p><p>Git 各种命令：<a href="https://www.cnblogs.com/smiler/p/5074124.html" target="_blank" rel="noopener">https://www.cnblogs.com/smiler/p/5074124.html</a> </p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON基础</title>
      <link href="/2019/08/19/JSON/"/>
      <url>/2019/08/19/JSON/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h2><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率，是JavaScript对象的字符串表示法，它使用文本表示一个 JS 对象的信息。降维说人话就是一种便于理解、编译、传输用于描述实例的字符串。</p><h2 id="Json要求和语法格式"><a href="#Json要求和语法格式" class="headerlink" title="Json要求和语法格式"></a>Json要求和语法格式</h2><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p>JSON 键值对是用来保存 JavaScript 对象的一种方式，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：<br>例如：name为键、Hello world为数据值即从后端获取的对象/值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"Hello world"</span>&#125; </span><br><span class="line">//下为JSON数组格式//</span><br><span class="line">&#123;<span class="string">"name"</span>:[<span class="string">"luoyonghao"</span>,<span class="string">"jiayueting"</span>,<span class="string">"sunyuchen"</span>]&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JSON解析工具"><a href="#JSON解析工具" class="headerlink" title="JSON解析工具"></a>JSON解析工具</h2><h3 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h3><p>Jackson框架是基于Java平台的一套数据处理工具<br>依赖：<br><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind" target="_blank" rel="noopener">官方依赖</a><br>pom.xml配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br>将对象转化为JSON字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建一个jackson的对象映射器，用来解析数据</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//将对象解析成为json格式</span><br><span class="line">String str = mapper.writeValueAsString(解析对象名);</span><br></pre></td></tr></table></figure><br>前端js相关<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//将js对象转换成json字符串</span><br><span class="line"> var str = JSON.stringify(js对象);</span><br><span class="line"> console.log(str);</span><br><span class="line"> </span><br><span class="line"> //将json字符串转换为js对象</span><br><span class="line"> var js对象 = JSON.parse(str);</span><br><span class="line"> console.log(js对象.age,js对象.name,js对象.sex);</span><br></pre></td></tr></table></figure></p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>fastJson是阿里巴巴出品的一个json序列化工具<br>依赖配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.2.60&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br>将对象转化为JSON字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String objJson = JSON.toJSONString(Object object);</span><br></pre></td></tr></table></figure><br>将Json串转换成java对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象是单个元素</span><br><span class="line">String objJson = JSON.parseObject(json对象，CLAZZ);</span><br><span class="line">//对象包含多个元素</span><br><span class="line">String objJson = JSON.parseArray(json对象，CLAZZ)；</span><br><span class="line">//CLAZZ为String.class为Map.class等等</span><br></pre></td></tr></table></figure></p><h2 id="JSON相关注解代码"><a href="#JSON相关注解代码" class="headerlink" title="JSON相关注解代码"></a>JSON相关注解代码</h2><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>等价于@Controller + @ResponseBody<br>在类上直接使用 @RestController ，这样子，里面所有的方法都只会返回 json 字符串</p><h3 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h3><p>获取get请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">   @GetMapping(value = <span class="string">"/json"</span>)</span><br><span class="line">   public String json() throws JsonProcessingException &#123;</span><br><span class="line">       ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">       User user = new User(<span class="string">"zhangsan"</span>, 17, <span class="string">"男"</span>);</span><br><span class="line">       //将对象解析成为json格式</span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       //@ResponseBody,json格式返回</span><br><span class="line">       <span class="built_in">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="处理默认时间对象类型"><a href="#处理默认时间对象类型" class="headerlink" title="处理默认时间对象类型"></a>处理默认时间对象类型</h2><p>Jackson默认Date date默认使用timestamps（时间戳：1970年01月01日00时00分00秒起至现在的总毫秒数）形式 。<br>自定义时间显示类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(<span class="string">"/json"</span>)</span><br><span class="line">public String json() throws JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">   ObjectMapper mapper = new ObjectMapper();</span><br><span class="line"></span><br><span class="line">   //不使用时间戳的方式</span><br><span class="line">   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">   //自定义日期格式对象</span><br><span class="line">   SimpleDateFormat sdf = new SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   //指定日期格式</span><br><span class="line">   mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">   Date date = new Date();</span><br><span class="line">   String str = mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>面向对象封装、以及方法重载便于以后使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class JsonUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static String getJson(Object object) throws JsonProcessingException &#123;</span><br><span class="line">        <span class="built_in">return</span> getJson(object,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);//默认时间显示形式</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //第一个参数为时间对象，第二个参数为时间显示形式</span><br><span class="line">    public static String getJson(Object object, String dateFormat) throws JsonProcessingException &#123;</span><br><span class="line">        ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS,<span class="literal">false</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat);</span><br><span class="line">        mapper.setDateFormat(simpleDateFormat);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> mapper.writeValueAsString(object);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>后续使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(<span class="string">"/json"</span>)</span><br><span class="line">public String json5() throws JsonProcessingException &#123;</span><br><span class="line">   Date date = new Date();</span><br><span class="line">   String json = JsonUtils.getJson(date);</span><br><span class="line">   <span class="built_in">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
            <tag> JSON时间对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC、MVP、MVVM架构模式与多层架构</title>
      <link href="/2019/07/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h2><h3 id="概要："><a href="#概要：" class="headerlink" title="概要："></a>概要：</h3><p>MVC、MVP、MVVM是传统较为主流的三种架构模式，使用架构模式的目的是为了解决界面呈现和逻辑代码分离问题，其中MVP和MVVM都是在MVC的基础上发展而来的，引发发展的主要原因在于各个模块间的耦合度、模块测试引发的问题。  </p><h3 id="MVC-："><a href="#MVC-：" class="headerlink" title="MVC ："></a>MVC ：</h3><p>MVC(全名：Model View Controller),正如名字一样MVC是使用Model、View、Controller三个模块设计创建 Web 应用程序的模式。<br>三个模块介绍及功能：<br>模型(Model):提供可视化元素的呈现、处理部分逻辑，包含数据和行为，可以认为是领域模型(domain)或JavaBean组件。通俗的讲就是用于网络请求、数据库、业务逻辑处理等操作并对应应用状态和业务功能的封装以及提供View模块显示的数据。如果对java熟悉的话Model模块最直观的部分就是JavaBean中的实体类和DAO类方法了。<br>视图（View）:数据的展示、提供用户数据显示及操作的可视化界面。（比如jsp页面）<br>控制器（Controller）:接受用户的输入指令并调用模型模块和视图模块去完成用户的需求。可以将控制器理解为模型模块和视图模块之间的桥梁，通过控制器管理两个模块的交互，是设计这类构架模式的基础分层目的的模块，一定程度上降低了耦合度、提高了代码重复利用率。<br><img src="/img/MVC.PNG" alt="MVC架构模式alt">  </p><h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP :"></a>MVP :</h3><p>MVP(全名:Model-view-presenter),是MVC演变而来的一种软件设计模式。与MVC有一定的相似性：Presenter负责逻辑的处理，Model提供数据，View负责显示。但MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter(MVC中的Controller)来进行的，所有的交互都发生在Presenter内部， 从理论上去除了View和Model的耦合。<br>模块介绍及功能：<br>Model：负责存储、检索、操纵数据，但与MVC的Model不同的是MVP的Model与可视化元素的呈现无关，与UI（view）处理逻辑也无关。<br>View：数据的展示、提供用户数据显示及操作的可视化界面，同时含有一个Presenter成员变量及逻辑接口<br>Presenter：处理与用户交互的负责逻辑。相比于MVC的controller，除了相同的事件触发控制功能，由于去除了View和Model的交互，所有的交互功能都发生在了Presenter（从Model传递需要呈现的可视化元素、View逻辑执行后发送响应等等）。由于解除了View与Model的耦合性，开发者可模拟测试View和Model中的任意一个模块，但明显的是Presenter接口与实现类的增加导致代码冗余度、复杂度会有明显增加。<br><img src="/img/MVP.PNG" alt="MVP架构模式alt">  </p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM :"></a>MVVM :</h3><p>MVVM(全名:Model View ViewModel)MVVM是MVP的进一步发展与规范，实现了View和Model的自动同步。MVVM模式中，一个ViewModel和一个View匹配绑定，所有View中的修改变化，都会自动更新到ViewModel中，同时ViewModel的任何变化也会自动同步到View上显示(ViewModel中的属性都实现了observable这样的接口，当使用属性 的set的方法，都会同时触发属性修改的事件，使绑定的View自动刷新，一般由不同的前端框架平台封装例如VUE。)，ViewModel和View之间的交互通过Data Binding完成， 而Data Binding可以实现双向的交互,这就使得视图和控制层之间的耦合程度进一步降低。<br>三个模块介绍及功能：<br>Model：负责存储、检索、操纵数据。<br>View：数据的展示、提供用户数据显示及操作的可视化界面，通过通过模板语法来声明在ViewModel模块完成数据绑定。<br>ViewModel：处理与用户交互的负责逻辑，核心是双向数据绑定，去除了View与Model的耦合关联，View可以独立于Model变化和修改方便测试，同时降低了代码的冗余度增加了重用度。<br><img src="/img/MVVM.PNG" alt="MVVM架构模式alt">  </p><h2 id="多层架构"><a href="#多层架构" class="headerlink" title="多层架构"></a>多层架构</h2><p>多层架构是开发人员在开发过程当中面对复杂且易变的需求采取的一种以隔离控制为主的应对策略，具体显示为将业务划分为多个层。  </p><h3 id="3层架构-3-tier-architecture"><a href="#3层架构-3-tier-architecture" class="headerlink" title="3层架构(3-tier architecture)"></a>3层架构(3-tier architecture)</h3><p>三层架构(3-tier architecture) 通常意义上的三层架构就是将整个业务应用划分为：界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、 数据访问层（Data access layer）。<br>各层功能：<br>UI(界面层): 数据的展示、提供用户数据显示及操作的可视化界面。用于接收用户输入的数据和显示处理后用户需要的数据。<br>BLL:(业务逻辑层): UI层和DAL层之间的交互通道。对数据层的操作，对数据业务逻辑处理。<br>DAL:(数据访问层): 实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库。<br><img src="/img/3-tier-architecture.PNG" alt="三层架构alt"><br>大多数人三层架构易与架构模式混淆（尤其是MVC模式），从表示图可以直观看出它们间区别。架构模式（MVC）设计初衷是降低View与Model间的耦合度、降低代码冗余度、提高数据访问安全性。而三层架构是从整个业务应用出发，架构模式例如MVC只是三层架构中的UI（界面层）和BLL(业务逻辑层)展示。（很多博客文章表示MVC严格意义上 只是三层架构的UI界面层，MVC的Model模块实现了业务逻辑的处理和对数据层的操作）用图表示之间关系如下(下图表示基于B/S系统的三层架构，橙线表示对B/S系统的划分)。<br><img src="/img/emm.PNG" alt="三层架构alt">  </p><h3 id="2-2-多层架构-n-tier-architecture"><a href="#2-2-多层架构-n-tier-architecture" class="headerlink" title="2.2 多层架构(n-tier architecture)"></a>2.2 多层架构(n-tier architecture)</h3><p>简单的说多层架构是对三层架构的进一步划分，实际中有时“标准”的划分为三层架构会对维护调试带来很多麻烦，多层架构便是对三层架构中的UI（界面层）与BLL（业务逻辑层）进行进一步细分。</p><h2 id="java的三层架构"><a href="#java的三层架构" class="headerlink" title="java的三层架构"></a>java的三层架构</h2><p>也属于三层架构各个层的名字有所变化。<br>Struts（表示层）：Struts是一个表示层框架，主要作用是界面展示，接收请求，分发请求为用户提供一种交互式操作的界面。在MVC框架中，Struts属于VC层次，负责界面表现，负责MVC关系的分发。<br>Spring（业务层）：业务层框架，是一个整合的框架，能够很好地黏合表示层与持久层。<br>Hibernate（持久层）：持久层，有时候也称为是数据访问层，其功能主要是负责数据库的访问，可以访问数据库系统、二进制文件、文本文档或是XML文档。</p><p>学期末学习了MVC架构模式有感，也算完成了自己的第一篇博客，当作知识积累日志。<br>参考学习文章：<a href="https://www.runoob.com/w3cnote/three-tier-architecture.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/three-tier-architecture.html</a><br>参考学习文章：<a href="https://www.jianshu.com/p/ebd2c5914d20" target="_blank" rel="noopener">https://www.jianshu.com/p/ebd2c5914d20</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
            <tag> MVVM </tag>
            
            <tag> 三层架构(3-tier application) </tag>
            
            <tag> 多层架构(n-tier application) </tag>
            
            <tag> 架构模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
